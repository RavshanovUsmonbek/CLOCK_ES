
Timer 2- CTC mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000016e  00800100  00001b30  00001bc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001b30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  0080026e  0080026e  00001d32  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d32  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001d64  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000110  00000000  00000000  00001da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000237e  00000000  00000000  00001eb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a44  00000000  00000000  0000422e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001212  00000000  00000000  00004c72  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003b0  00000000  00000000  00005e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b7  00000000  00000000  00006234  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001375  00000000  00000000  000068eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000100  00000000  00000000  00007c60  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	b2 c3       	rjmp	.+1892   	; 0x76a <__vector_1>
       6:	00 00       	nop
       8:	37 c5       	rjmp	.+2670   	; 0xa78 <__vector_2>
       a:	00 00       	nop
       c:	63 c5       	rjmp	.+2758   	; 0xad4 <__vector_3>
       e:	00 00       	nop
      10:	ed c6       	rjmp	.+3546   	; 0xdec <__vector_4>
      12:	00 00       	nop
      14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
      32:	00 00       	nop
      34:	51 c0       	rjmp	.+162    	; 0xd8 <__bad_interrupt>
      36:	00 00       	nop
      38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	68 c3       	rjmp	.+1744   	; 0x70e <__vector_15>
      3e:	00 00       	nop
      40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
      42:	00 00       	nop
      44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
      46:	00 00       	nop
      48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
      62:	00 00       	nop
      64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
      66:	00 00       	nop
      68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	a6 08       	sbc	r10, r6
      8e:	ab 08       	sbc	r10, r11
      90:	b0 08       	sbc	r11, r0
      92:	b5 08       	sbc	r11, r5
      94:	ba 08       	sbc	r11, r10
      96:	bf 08       	sbc	r11, r15
      98:	c4 08       	sbc	r12, r4

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e1       	ldi	r29, 0x10	; 16
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	12 e0       	ldi	r17, 0x02	; 2
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e0 e3       	ldi	r30, 0x30	; 48
      ae:	fb e1       	ldi	r31, 0x1B	; 27
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	ae 36       	cpi	r26, 0x6E	; 110
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	22 e0       	ldi	r18, 0x02	; 2
      c2:	ae e6       	ldi	r26, 0x6E	; 110
      c4:	b2 e0       	ldi	r27, 0x02	; 2
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a6 38       	cpi	r26, 0x86	; 134
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 bc 0c 	call	0x1978	; 0x1978 <main>
      d4:	0c 94 96 0d 	jmp	0x1b2c	; 0x1b2c <_exit>

000000d8 <__bad_interrupt>:
      d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <LCD_Data>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      da:	e5 e6       	ldi	r30, 0x65	; 101
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	90 81       	ld	r25, Z
      e0:	94 60       	ori	r25, 0x04	; 4
      e2:	90 83       	st	Z, r25
      e4:	90 81       	ld	r25, Z
      e6:	9d 7f       	andi	r25, 0xFD	; 253
      e8:	90 83       	st	Z, r25
      ea:	90 81       	ld	r25, Z
      ec:	91 60       	ori	r25, 0x01	; 1
      ee:	90 83       	st	Z, r25
      f0:	96 ef       	ldi	r25, 0xF6	; 246
      f2:	9a 95       	dec	r25
      f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_Data+0x18>
      f6:	8b bb       	out	0x1b, r24	; 27
      f8:	86 ef       	ldi	r24, 0xF6	; 246
      fa:	8a 95       	dec	r24
      fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Data+0x20>
      fe:	80 81       	ld	r24, Z
     100:	8e 7f       	andi	r24, 0xFE	; 254
     102:	80 83       	st	Z, r24
     104:	08 95       	ret

00000106 <LCD_Comm>:
     106:	e5 e6       	ldi	r30, 0x65	; 101
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	90 81       	ld	r25, Z
     10c:	9b 7f       	andi	r25, 0xFB	; 251
     10e:	90 83       	st	Z, r25
     110:	90 81       	ld	r25, Z
     112:	9d 7f       	andi	r25, 0xFD	; 253
     114:	90 83       	st	Z, r25
     116:	90 81       	ld	r25, Z
     118:	91 60       	ori	r25, 0x01	; 1
     11a:	90 83       	st	Z, r25
     11c:	96 ef       	ldi	r25, 0xF6	; 246
     11e:	9a 95       	dec	r25
     120:	f1 f7       	brne	.-4      	; 0x11e <LCD_Comm+0x18>
     122:	8b bb       	out	0x1b, r24	; 27
     124:	86 ef       	ldi	r24, 0xF6	; 246
     126:	8a 95       	dec	r24
     128:	f1 f7       	brne	.-4      	; 0x126 <LCD_Comm+0x20>
     12a:	80 81       	ld	r24, Z
     12c:	8e 7f       	andi	r24, 0xFE	; 254
     12e:	80 83       	st	Z, r24
     130:	08 95       	ret

00000132 <LCD_CHAR>:
     132:	d3 df       	rcall	.-90     	; 0xda <LCD_Data>
     134:	8c ec       	ldi	r24, 0xCC	; 204
     136:	9c e1       	ldi	r25, 0x1C	; 28
     138:	01 97       	sbiw	r24, 0x01	; 1
     13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_CHAR+0x6>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_CHAR+0xc>
     13e:	00 00       	nop
     140:	08 95       	ret

00000142 <LCD_STR>:
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	ec 01       	movw	r28, r24
     148:	88 81       	ld	r24, Y
     14a:	88 23       	and	r24, r24
     14c:	29 f0       	breq	.+10     	; 0x158 <LCD_STR+0x16>
     14e:	21 96       	adiw	r28, 0x01	; 1
     150:	f0 df       	rcall	.-32     	; 0x132 <LCD_CHAR>
     152:	89 91       	ld	r24, Y+
     154:	81 11       	cpse	r24, r1
     156:	fc cf       	rjmp	.-8      	; 0x150 <LCD_STR+0xe>
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <LCD_Clear>:
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Comm>
     162:	8c ec       	ldi	r24, 0xCC	; 204
     164:	9c e1       	ldi	r25, 0x1C	; 28
     166:	01 97       	sbiw	r24, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <LCD_Clear+0x8>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_Clear+0xe>
     16c:	00 00       	nop
     16e:	08 95       	ret

00000170 <LCD_Init>:
     170:	88 e3       	ldi	r24, 0x38	; 56
     172:	c9 df       	rcall	.-110    	; 0x106 <LCD_Comm>
     174:	8c ec       	ldi	r24, 0xCC	; 204
     176:	9c e1       	ldi	r25, 0x1C	; 28
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_Init+0x8>
     17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Init+0xe>
     17e:	00 00       	nop
     180:	88 e3       	ldi	r24, 0x38	; 56
     182:	c1 df       	rcall	.-126    	; 0x106 <LCD_Comm>
     184:	8c ec       	ldi	r24, 0xCC	; 204
     186:	9c e1       	ldi	r25, 0x1C	; 28
     188:	01 97       	sbiw	r24, 0x01	; 1
     18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_Init+0x18>
     18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_Init+0x1e>
     18e:	00 00       	nop
     190:	88 e3       	ldi	r24, 0x38	; 56
     192:	b9 df       	rcall	.-142    	; 0x106 <LCD_Comm>
     194:	8c ec       	ldi	r24, 0xCC	; 204
     196:	9c e1       	ldi	r25, 0x1C	; 28
     198:	01 97       	sbiw	r24, 0x01	; 1
     19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_Init+0x28>
     19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_Init+0x2e>
     19e:	00 00       	nop
     1a0:	8e e0       	ldi	r24, 0x0E	; 14
     1a2:	b1 df       	rcall	.-158    	; 0x106 <LCD_Comm>
     1a4:	8c ec       	ldi	r24, 0xCC	; 204
     1a6:	9c e1       	ldi	r25, 0x1C	; 28
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_Init+0x38>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_Init+0x3e>
     1ae:	00 00       	nop
     1b0:	86 e0       	ldi	r24, 0x06	; 6
     1b2:	a9 df       	rcall	.-174    	; 0x106 <LCD_Comm>
     1b4:	8c ec       	ldi	r24, 0xCC	; 204
     1b6:	9c e1       	ldi	r25, 0x1C	; 28
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_Init+0x48>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_Init+0x4e>
     1be:	00 00       	nop
     1c0:	ce cf       	rjmp	.-100    	; 0x15e <LCD_Clear>
     1c2:	08 95       	ret

000001c4 <cursor_home>:

	}	
}

void cursor_home(void) {
	LCD_Comm(0x02); 
     1c4:	82 e0       	ldi	r24, 0x02	; 2
     1c6:	9f df       	rcall	.-194    	; 0x106 <LCD_Comm>
     1c8:	8c ec       	ldi	r24, 0xCC	; 204
     1ca:	9c e1       	ldi	r25, 0x1C	; 28
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <cursor_home+0x8>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <cursor_home+0xe>
     1d2:	00 00       	nop
     1d4:	08 95       	ret

000001d6 <init_timer>:
uch is_current_date=0;
/////////////////////////////////////////////////////////////////

void init_timer()
{
	TIMSK = 0x02; // output compare interrupt enabled
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	87 bf       	out	0x37, r24	; 55
	TCCR0 = 0x0f; // CTC mode, prescale 1024
     1da:	8f e0       	ldi	r24, 0x0F	; 15
     1dc:	83 bf       	out	0x33, r24	; 51
	OCR0 = 143;
     1de:	8f e8       	ldi	r24, 0x8F	; 143
     1e0:	81 bf       	out	0x31, r24	; 49
     1e2:	08 95       	ret

000001e4 <port_init>:
}
void port_init()
{
	DDRA = 0xff; // lcd port configuration of DDRA and DDRG
     1e4:	8f ef       	ldi	r24, 0xFF	; 255
     1e6:	8a bb       	out	0x1a, r24	; 26
	DDRG = 0x0f;
     1e8:	9f e0       	ldi	r25, 0x0F	; 15
     1ea:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRB = 0xff; // making PORTB as an output port for leds
     1ee:	87 bb       	out	0x17, r24	; 23
	PORTB= 0xff;
     1f0:	88 bb       	out	0x18, r24	; 24
	DDRD = 0x00; // making PORTD as an input port for recieving signals form switches
     1f2:	11 ba       	out	0x11, r1	; 17
     1f4:	08 95       	ret

000001f6 <interrupt_init>:
}
void interrupt_init(void)
{
	EIMSK=0xff; // enabling all interrupts
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	89 bf       	out	0x39, r24	; 57
	EICRA=0xaa;// enabling falling edge trigger for all interrupts
     1fa:	8a ea       	ldi	r24, 0xAA	; 170
     1fc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB=0xaa; 
     200:	8a bf       	out	0x3a, r24	; 58
	sei();   // setting global interrupt on
     202:	78 94       	sei
     204:	08 95       	ret

00000206 <is_leap_year>:
}
char is_leap_year(int y) // utility function for determining leap year
{
     206:	9c 01       	movw	r18, r24
	if(y % 4 == 0)
     208:	83 70       	andi	r24, 0x03	; 3
     20a:	99 27       	eor	r25, r25
     20c:	89 2b       	or	r24, r25
     20e:	91 f4       	brne	.+36     	; 0x234 <is_leap_year+0x2e>
	{
		//Nested if else
		if( y % 100 == 0)
     210:	c9 01       	movw	r24, r18
     212:	64 e6       	ldi	r22, 0x64	; 100
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__divmodhi4>
     21a:	89 2b       	or	r24, r25
     21c:	69 f4       	brne	.+26     	; 0x238 <is_leap_year+0x32>
		{
			if ( y % 400 == 0)
				return 1;
     21e:	c9 01       	movw	r24, r18
     220:	60 e9       	ldi	r22, 0x90	; 144
     222:	71 e0       	ldi	r23, 0x01	; 1
     224:	0e 94 57 0d 	call	0x1aae	; 0x1aae <__divmodhi4>
     228:	9c 01       	movw	r18, r24
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	23 2b       	or	r18, r19
     22e:	29 f0       	breq	.+10     	; 0x23a <is_leap_year+0x34>
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	08 95       	ret
		}
		else
			return 1;
	}
	else
		return 0;
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	08 95       	ret
				return 1;
			else
				return 0;
		}
		else
			return 1;
     238:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return 0;
}
     23a:	08 95       	ret

0000023c <month_day_count>:
int month_day_count(ui month, ui year)
{
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	68 97       	sbiw	r28, 0x18	; 24
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
     254:	8c 01       	movw	r16, r24
	ui const month_days[]={31,28,31,30,31,30,31,31,30,31,30,31};
     256:	98 e1       	ldi	r25, 0x18	; 24
     258:	e2 e3       	ldi	r30, 0x32	; 50
     25a:	f1 e0       	ldi	r31, 0x01	; 1
     25c:	de 01       	movw	r26, r28
     25e:	11 96       	adiw	r26, 0x01	; 1
     260:	01 90       	ld	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	9a 95       	dec	r25
     266:	e1 f7       	brne	.-8      	; 0x260 <month_day_count+0x24>
	if (month==2 && is_leap_year(year))
     268:	02 30       	cpi	r16, 0x02	; 2
     26a:	11 05       	cpc	r17, r1
     26c:	21 f4       	brne	.+8      	; 0x276 <month_day_count+0x3a>
     26e:	cb 01       	movw	r24, r22
     270:	ca df       	rcall	.-108    	; 0x206 <is_leap_year>
     272:	81 11       	cpse	r24, r1
     274:	09 c0       	rjmp	.+18     	; 0x288 <month_day_count+0x4c>
	{
		return 29;
	}
	return month_days[month-1];
     276:	f8 01       	movw	r30, r16
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	ee 0f       	add	r30, r30
     27c:	ff 1f       	adc	r31, r31
     27e:	ec 0f       	add	r30, r28
     280:	fd 1f       	adc	r31, r29
     282:	81 81       	ldd	r24, Z+1	; 0x01
     284:	92 81       	ldd	r25, Z+2	; 0x02
     286:	02 c0       	rjmp	.+4      	; 0x28c <month_day_count+0x50>
int month_day_count(ui month, ui year)
{
	ui const month_days[]={31,28,31,30,31,30,31,31,30,31,30,31};
	if (month==2 && is_leap_year(year))
	{
		return 29;
     288:	8d e1       	ldi	r24, 0x1D	; 29
     28a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return month_days[month-1];
}
     28c:	68 96       	adiw	r28, 0x18	; 24
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	de bf       	out	0x3e, r29	; 62
     294:	0f be       	out	0x3f, r0	; 63
     296:	cd bf       	out	0x3d, r28	; 61
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	08 95       	ret

000002a2 <disable_alarm_clock>:
void disable_alarm_clock(void)
{
			min_alarm=0;
     2a2:	10 92 73 02 	sts	0x0273, r1	; 0x800273 <min_alarm>
			hour_alarm=0;
     2a6:	10 92 72 02 	sts	0x0272, r1	; 0x800272 <hour_alarm>
			day_alarm=0;
     2aa:	10 92 71 02 	sts	0x0271, r1	; 0x800271 <day_alarm>
			month_alarm=0;
     2ae:	10 92 70 02 	sts	0x0270, r1	; 0x800270 <month_alarm>
			year_alarm=0;
     2b2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <year_alarm+0x1>
     2b6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <year_alarm>
			step=1;
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <step>
			isset_alarm=0;
     2c0:	10 92 6f 02 	sts	0x026F, r1	; 0x80026f <isset_alarm>
			temp_year=year;
     2c4:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <year>
     2c8:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <year+0x1>
     2cc:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2d0:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			// clearing temp variables
			for (uch i=0;i<4;i++)
			{
				temp_arr[i]=0;
     2d4:	e2 e0       	ldi	r30, 0x02	; 2
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	10 82       	st	Z, r1
     2da:	11 82       	std	Z+1, r1	; 0x01
				if (i>1)
				{
					temp_arr[i]=1;
     2dc:	82 83       	std	Z+2, r24	; 0x02
     2de:	83 83       	std	Z+3, r24	; 0x03
     2e0:	08 95       	ret

000002e2 <normal_clock_logic>:
				}
			}
}
void normal_clock_logic(void)
{
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
	cnt++;
     2e8:	80 91 75 02 	lds	r24, 0x0275	; 0x800275 <cnt>
     2ec:	8f 5f       	subi	r24, 0xFF	; 255
	if(cnt==100)
     2ee:	84 36       	cpi	r24, 0x64	; 100
     2f0:	19 f0       	breq	.+6      	; 0x2f8 <normal_clock_logic+0x16>
				}
			}
}
void normal_clock_logic(void)
{
	cnt++;
     2f2:	80 93 75 02 	sts	0x0275, r24	; 0x800275 <cnt>
     2f6:	54 c0       	rjmp	.+168    	; 0x3a0 <normal_clock_logic+0xbe>
	if(cnt==100)
	{
		cnt=0;
     2f8:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <cnt>
		sec++;
     2fc:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <sec>
     300:	8f 5f       	subi	r24, 0xFF	; 255
     302:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <sec>
		if (sec>=60)
     306:	8c 33       	cpi	r24, 0x3C	; 60
     308:	38 f0       	brcs	.+14     	; 0x318 <normal_clock_logic+0x36>
		{
			min++;
     30a:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <min>
     30e:	8f 5f       	subi	r24, 0xFF	; 255
     310:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <min>
			sec=0;
     314:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <sec>
		}
		if (min>=60)
     318:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <min>
     31c:	8c 33       	cpi	r24, 0x3C	; 60
     31e:	38 f0       	brcs	.+14     	; 0x32e <normal_clock_logic+0x4c>
		{
			hour++;
     320:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <hour>
     324:	8f 5f       	subi	r24, 0xFF	; 255
     326:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <hour>
			min = 0;
     32a:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <min>
		}
		if(hour>=24)
     32e:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <hour>
     332:	88 31       	cpi	r24, 0x18	; 24
     334:	60 f0       	brcs	.+24     	; 0x34e <normal_clock_logic+0x6c>
		{
			day++;
     336:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <day>
     33a:	8f 5f       	subi	r24, 0xFF	; 255
     33c:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <day>
			week_day++;
     340:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <week_day>
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <week_day>
			hour = 0;
     34a:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <hour>
		}
		if (week_day>=8)
     34e:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <week_day>
     352:	88 30       	cpi	r24, 0x08	; 8
     354:	18 f0       	brcs	.+6      	; 0x35c <normal_clock_logic+0x7a>
		{
			week_day=1;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <week_day>
		}
		if(day>month_day_count(month,year))
     35c:	c0 91 7e 02 	lds	r28, 0x027E	; 0x80027e <year>
     360:	d0 91 7f 02 	lds	r29, 0x027F	; 0x80027f <year+0x1>
     364:	10 91 76 02 	lds	r17, 0x0276	; 0x800276 <month>
     368:	be 01       	movw	r22, r28
     36a:	81 2f       	mov	r24, r17
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	66 df       	rcall	.-308    	; 0x23c <month_day_count>
     370:	20 91 81 02 	lds	r18, 0x0281	; 0x800281 <day>
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	82 17       	cp	r24, r18
     378:	93 07       	cpc	r25, r19
     37a:	34 f4       	brge	.+12     	; 0x388 <normal_clock_logic+0xa6>
		{
			month++;
     37c:	1f 5f       	subi	r17, 0xFF	; 255
     37e:	10 93 76 02 	sts	0x0276, r17	; 0x800276 <month>
			day = 1;
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <day>
		}
		if(month>12)
     388:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <month>
     38c:	8d 30       	cpi	r24, 0x0D	; 13
     38e:	40 f0       	brcs	.+16     	; 0x3a0 <normal_clock_logic+0xbe>
		{
			year++;
     390:	21 96       	adiw	r28, 0x01	; 1
     392:	d0 93 7f 02 	sts	0x027F, r29	; 0x80027f <year+0x1>
     396:	c0 93 7e 02 	sts	0x027E, r28	; 0x80027e <year>
			month = 1;
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <month>
		}
	}
}
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	08 95       	ret

000003a8 <stop_watch_logic>:
void stop_watch_logic(void)
{
	cnt_stp_w++;
     3a8:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <cnt_stp_w>
     3ac:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <cnt_stp_w+0x1>
     3b0:	01 96       	adiw	r24, 0x01	; 1
	if(cnt_stp_w>=100)
     3b2:	84 36       	cpi	r24, 0x64	; 100
     3b4:	91 05       	cpc	r25, r1
     3b6:	28 f4       	brcc	.+10     	; 0x3c2 <stop_watch_logic+0x1a>
		}
	}
}
void stop_watch_logic(void)
{
	cnt_stp_w++;
     3b8:	90 93 85 02 	sts	0x0285, r25	; 0x800285 <cnt_stp_w+0x1>
     3bc:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <cnt_stp_w>
     3c0:	08 95       	ret
	if(cnt_stp_w>=100)
	{
		cnt_stp_w=0;
     3c2:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <cnt_stp_w+0x1>
     3c6:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <cnt_stp_w>
		sec_stp_w++;
     3ca:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <sec_stp_w>
     3ce:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <sec_stp_w+0x1>
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <sec_stp_w+0x1>
     3d8:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <sec_stp_w>
		if (sec_stp_w>=60)
     3dc:	cc 97       	sbiw	r24, 0x3c	; 60
     3de:	68 f0       	brcs	.+26     	; 0x3fa <stop_watch_logic+0x52>
		{
			min_stp_w++;
     3e0:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <min_stp_w>
     3e4:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <min_stp_w+0x1>
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	90 93 78 02 	sts	0x0278, r25	; 0x800278 <min_stp_w+0x1>
     3ee:	80 93 77 02 	sts	0x0277, r24	; 0x800277 <min_stp_w>
			sec_stp_w=0;
     3f2:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <sec_stp_w+0x1>
     3f6:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <sec_stp_w>
		}
		if (min_stp_w>=60)
     3fa:	80 91 77 02 	lds	r24, 0x0277	; 0x800277 <min_stp_w>
     3fe:	90 91 78 02 	lds	r25, 0x0278	; 0x800278 <min_stp_w+0x1>
     402:	cc 97       	sbiw	r24, 0x3c	; 60
     404:	68 f0       	brcs	.+26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		{
			hour_stp_w++;
     406:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <hour_stp_w>
     40a:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <hour_stp_w+0x1>
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	90 93 83 02 	sts	0x0283, r25	; 0x800283 <hour_stp_w+0x1>
     414:	80 93 82 02 	sts	0x0282, r24	; 0x800282 <hour_stp_w>
			min_stp_w = 0;
     418:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <min_stp_w+0x1>
     41c:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <min_stp_w>
		}
		if(hour_stp_w>=24)
     420:	80 91 82 02 	lds	r24, 0x0282	; 0x800282 <hour_stp_w>
     424:	90 91 83 02 	lds	r25, 0x0283	; 0x800283 <hour_stp_w+0x1>
     428:	48 97       	sbiw	r24, 0x18	; 24
     42a:	20 f0       	brcs	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		{
			hour_stp_w = 0;
     42c:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <hour_stp_w+0x1>
     430:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <hour_stp_w>
     434:	08 95       	ret

00000436 <alarm_clock_check_logic>:
		}
	}
}
uch alarm_clock_check_logic(uch min, uch hour, uch day, uch month, ui year)
{
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
	if(min_alarm==min && hour_alarm==hour && day_alarm==day && month_alarm==month && year_alarm==year)
     43a:	90 91 73 02 	lds	r25, 0x0273	; 0x800273 <min_alarm>
     43e:	98 13       	cpse	r25, r24
     440:	16 c0       	rjmp	.+44     	; 0x46e <alarm_clock_check_logic+0x38>
     442:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <hour_alarm>
     446:	86 13       	cpse	r24, r22
     448:	14 c0       	rjmp	.+40     	; 0x472 <alarm_clock_check_logic+0x3c>
     44a:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <day_alarm>
     44e:	84 13       	cpse	r24, r20
     450:	12 c0       	rjmp	.+36     	; 0x476 <alarm_clock_check_logic+0x40>
     452:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <month_alarm>
     456:	82 13       	cpse	r24, r18
     458:	10 c0       	rjmp	.+32     	; 0x47a <alarm_clock_check_logic+0x44>
	{
		return 1;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <year_alarm>
     460:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <year_alarm+0x1>
     464:	20 17       	cp	r18, r16
     466:	31 07       	cpc	r19, r17
     468:	49 f0       	breq	.+18     	; 0x47c <alarm_clock_check_logic+0x46>
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	07 c0       	rjmp	.+14     	; 0x47c <alarm_clock_check_logic+0x46>
	}
	return 0;
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	05 c0       	rjmp	.+10     	; 0x47c <alarm_clock_check_logic+0x46>
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	03 c0       	rjmp	.+6      	; 0x47c <alarm_clock_check_logic+0x46>
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	01 c0       	rjmp	.+2      	; 0x47c <alarm_clock_check_logic+0x46>
     47a:	80 e0       	ldi	r24, 0x00	; 0
}
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <led_blink>:
void led_blink(void)  // led on and off all bits for INT1
{
	PORTB = 0xff;
     482:	8f ef       	ldi	r24, 0xFF	; 255
     484:	88 bb       	out	0x18, r24	; 24
     486:	2f ef       	ldi	r18, 0xFF	; 255
     488:	8f e7       	ldi	r24, 0x7F	; 127
     48a:	9d e0       	ldi	r25, 0x0D	; 13
     48c:	21 50       	subi	r18, 0x01	; 1
     48e:	80 40       	sbci	r24, 0x00	; 0
     490:	90 40       	sbci	r25, 0x00	; 0
     492:	e1 f7       	brne	.-8      	; 0x48c <led_blink+0xa>
     494:	00 c0       	rjmp	.+0      	; 0x496 <led_blink+0x14>
     496:	00 00       	nop
	_delay_ms(300);
	PORTB = 0x00;
     498:	18 ba       	out	0x18, r1	; 24
     49a:	2f ef       	ldi	r18, 0xFF	; 255
     49c:	8f e7       	ldi	r24, 0x7F	; 127
     49e:	9d e0       	ldi	r25, 0x0D	; 13
     4a0:	21 50       	subi	r18, 0x01	; 1
     4a2:	80 40       	sbci	r24, 0x00	; 0
     4a4:	90 40       	sbci	r25, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <led_blink+0x1e>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <led_blink+0x28>
     4aa:	00 00       	nop
     4ac:	08 95       	ret

000004ae <alarm_clock_display>:
	_delay_ms(300);
}
void alarm_clock_display(void)
{
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
	if (!isset_alarm)
     4b4:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <isset_alarm>
     4b8:	81 11       	cpse	r24, r1
     4ba:	25 c1       	rjmp	.+586    	; 0x706 <alarm_clock_display+0x258>
	{
		switch(step)
     4bc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step>
     4c0:	83 30       	cpi	r24, 0x03	; 3
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <alarm_clock_display+0x18>
     4c4:	b2 c0       	rjmp	.+356    	; 0x62a <alarm_clock_display+0x17c>
     4c6:	30 f4       	brcc	.+12     	; 0x4d4 <alarm_clock_display+0x26>
     4c8:	81 30       	cpi	r24, 0x01	; 1
     4ca:	59 f0       	breq	.+22     	; 0x4e2 <alarm_clock_display+0x34>
     4cc:	82 30       	cpi	r24, 0x02	; 2
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <alarm_clock_display+0x24>
     4d0:	9a c0       	rjmp	.+308    	; 0x606 <alarm_clock_display+0x158>
     4d2:	19 c1       	rjmp	.+562    	; 0x706 <alarm_clock_display+0x258>
     4d4:	84 30       	cpi	r24, 0x04	; 4
     4d6:	09 f4       	brne	.+2      	; 0x4da <alarm_clock_display+0x2c>
     4d8:	cd c0       	rjmp	.+410    	; 0x674 <alarm_clock_display+0x1c6>
     4da:	85 30       	cpi	r24, 0x05	; 5
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <alarm_clock_display+0x32>
     4de:	ef c0       	rjmp	.+478    	; 0x6be <alarm_clock_display+0x210>
     4e0:	12 c1       	rjmp	.+548    	; 0x706 <alarm_clock_display+0x258>
	}
}

void LCD_pos(unsigned char row, unsigned char col)
{
	LCD_Comm(0x80|(row+col*0x40)); 
     4e2:	82 e8       	ldi	r24, 0x82	; 130
     4e4:	10 de       	rcall	.-992    	; 0x106 <LCD_Comm>
		{
			case 1:
			LCD_pos(2,0);
			LCD_STR("ALARM | YEAR ");
     4e6:	8a e4       	ldi	r24, 0x4A	; 74
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	2b de       	rcall	.-938    	; 0x142 <LCD_STR>
     4ec:	86 ec       	ldi	r24, 0xC6	; 198
     4ee:	0b de       	rcall	.-1002   	; 0x106 <LCD_Comm>
     4f0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_pos(6,1);
			LCD_CHAR((temp_year)/1000+'0');
     4f4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     4f8:	36 95       	lsr	r19
     4fa:	27 95       	ror	r18
     4fc:	36 95       	lsr	r19
     4fe:	27 95       	ror	r18
     500:	36 95       	lsr	r19
     502:	27 95       	ror	r18
     504:	a5 ec       	ldi	r26, 0xC5	; 197
     506:	b0 e2       	ldi	r27, 0x20	; 32
     508:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__umulhisi3>
     50c:	92 95       	swap	r25
     50e:	82 95       	swap	r24
     510:	8f 70       	andi	r24, 0x0F	; 15
     512:	89 27       	eor	r24, r25
     514:	9f 70       	andi	r25, 0x0F	; 15
     516:	89 27       	eor	r24, r25
     518:	80 5d       	subi	r24, 0xD0	; 208
     51a:	0b de       	rcall	.-1002   	; 0x132 <LCD_CHAR>
     51c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_CHAR((temp_year/100)%10+'0');
     520:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     524:	36 95       	lsr	r19
     526:	27 95       	ror	r18
     528:	36 95       	lsr	r19
     52a:	27 95       	ror	r18
     52c:	ab e7       	ldi	r26, 0x7B	; 123
     52e:	b4 e1       	ldi	r27, 0x14	; 20
     530:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__umulhisi3>
     534:	ac 01       	movw	r20, r24
     536:	56 95       	lsr	r21
     538:	47 95       	ror	r20
     53a:	9a 01       	movw	r18, r20
     53c:	ad ec       	ldi	r26, 0xCD	; 205
     53e:	bc ec       	ldi	r27, 0xCC	; 204
     540:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__umulhisi3>
     544:	96 95       	lsr	r25
     546:	87 95       	ror	r24
     548:	96 95       	lsr	r25
     54a:	87 95       	ror	r24
     54c:	96 95       	lsr	r25
     54e:	87 95       	ror	r24
     550:	9c 01       	movw	r18, r24
     552:	22 0f       	add	r18, r18
     554:	33 1f       	adc	r19, r19
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	82 0f       	add	r24, r18
     564:	93 1f       	adc	r25, r19
     566:	9a 01       	movw	r18, r20
     568:	28 1b       	sub	r18, r24
     56a:	39 0b       	sbc	r19, r25
     56c:	c9 01       	movw	r24, r18
     56e:	80 5d       	subi	r24, 0xD0	; 208
     570:	e0 dd       	rcall	.-1088   	; 0x132 <LCD_CHAR>
     572:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_CHAR((temp_year/10)%10+'0');
     576:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     57a:	ad ec       	ldi	r26, 0xCD	; 205
     57c:	bc ec       	ldi	r27, 0xCC	; 204
     57e:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__umulhisi3>
     582:	ac 01       	movw	r20, r24
     584:	56 95       	lsr	r21
     586:	47 95       	ror	r20
     588:	56 95       	lsr	r21
     58a:	47 95       	ror	r20
     58c:	56 95       	lsr	r21
     58e:	47 95       	ror	r20
     590:	9a 01       	movw	r18, r20
     592:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__umulhisi3>
     596:	96 95       	lsr	r25
     598:	87 95       	ror	r24
     59a:	96 95       	lsr	r25
     59c:	87 95       	ror	r24
     59e:	96 95       	lsr	r25
     5a0:	87 95       	ror	r24
     5a2:	9c 01       	movw	r18, r24
     5a4:	22 0f       	add	r18, r18
     5a6:	33 1f       	adc	r19, r19
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	82 0f       	add	r24, r18
     5b6:	93 1f       	adc	r25, r19
     5b8:	fa 01       	movw	r30, r20
     5ba:	e8 1b       	sub	r30, r24
     5bc:	f9 0b       	sbc	r31, r25
     5be:	cf 01       	movw	r24, r30
     5c0:	80 5d       	subi	r24, 0xD0	; 208
     5c2:	b7 dd       	rcall	.-1170   	; 0x132 <LCD_CHAR>
     5c4:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_CHAR((temp_year)%10+'0');
     5c8:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5cc:	9a 01       	movw	r18, r20
     5ce:	ad ec       	ldi	r26, 0xCD	; 205
     5d0:	bc ec       	ldi	r27, 0xCC	; 204
     5d2:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <__umulhisi3>
     5d6:	96 95       	lsr	r25
     5d8:	87 95       	ror	r24
     5da:	96 95       	lsr	r25
     5dc:	87 95       	ror	r24
     5de:	96 95       	lsr	r25
     5e0:	87 95       	ror	r24
     5e2:	9c 01       	movw	r18, r24
     5e4:	22 0f       	add	r18, r18
     5e6:	33 1f       	adc	r19, r19
     5e8:	88 0f       	add	r24, r24
     5ea:	99 1f       	adc	r25, r25
     5ec:	88 0f       	add	r24, r24
     5ee:	99 1f       	adc	r25, r25
     5f0:	88 0f       	add	r24, r24
     5f2:	99 1f       	adc	r25, r25
     5f4:	82 0f       	add	r24, r18
     5f6:	93 1f       	adc	r25, r19
     5f8:	9a 01       	movw	r18, r20
     5fa:	28 1b       	sub	r18, r24
     5fc:	39 0b       	sbc	r19, r25
     5fe:	c9 01       	movw	r24, r18
     600:	80 5d       	subi	r24, 0xD0	; 208
     602:	97 dd       	rcall	.-1234   	; 0x132 <LCD_CHAR>
     604:	80 c0       	rjmp	.+256    	; 0x706 <alarm_clock_display+0x258>
     606:	82 e8       	ldi	r24, 0x82	; 130
     608:	7e dd       	rcall	.-1284   	; 0x106 <LCD_Comm>
			break;
			
			case 2:
			LCD_pos(2,0);
			LCD_STR("ALARM | MONTH ");
     60a:	88 e5       	ldi	r24, 0x58	; 88
     60c:	91 e0       	ldi	r25, 0x01	; 1
     60e:	99 dd       	rcall	.-1230   	; 0x142 <LCD_STR>
     610:	86 ec       	ldi	r24, 0xC6	; 198
     612:	79 dd       	rcall	.-1294   	; 0x106 <LCD_Comm>
     614:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <temp_arr+0x3>
			LCD_pos(6,1);
			LCD_STR(month_arr[temp_arr[3]-1]);
     618:	f0 e0       	ldi	r31, 0x00	; 0
     61a:	ee 0f       	add	r30, r30
     61c:	ff 1f       	adc	r31, r31
     61e:	eb 5e       	subi	r30, 0xEB	; 235
     620:	fe 4f       	sbci	r31, 0xFE	; 254
     622:	80 81       	ld	r24, Z
     624:	91 81       	ldd	r25, Z+1	; 0x01
			break;
     626:	8d dd       	rcall	.-1254   	; 0x142 <LCD_STR>
     628:	6e c0       	rjmp	.+220    	; 0x706 <alarm_clock_display+0x258>
     62a:	82 e8       	ldi	r24, 0x82	; 130
     62c:	6c dd       	rcall	.-1320   	; 0x106 <LCD_Comm>
			
			case 3:
			LCD_pos(2,0);
			LCD_STR("ALARM | DAY ");
     62e:	87 e6       	ldi	r24, 0x67	; 103
     630:	91 e0       	ldi	r25, 0x01	; 1
     632:	87 dd       	rcall	.-1266   	; 0x142 <LCD_STR>
     634:	87 ec       	ldi	r24, 0xC7	; 199
     636:	67 dd       	rcall	.-1330   	; 0x106 <LCD_Comm>
     638:	02 e0       	ldi	r16, 0x02	; 2
			LCD_pos(7,1);
			LCD_CHAR((temp_arr[2]/10)+'0');
     63a:	11 e0       	ldi	r17, 0x01	; 1
     63c:	f8 01       	movw	r30, r16
     63e:	82 81       	ldd	r24, Z+2	; 0x02
     640:	cd ec       	ldi	r28, 0xCD	; 205
     642:	8c 9f       	mul	r24, r28
     644:	81 2d       	mov	r24, r1
     646:	11 24       	eor	r1, r1
     648:	86 95       	lsr	r24
     64a:	86 95       	lsr	r24
     64c:	86 95       	lsr	r24
     64e:	80 5d       	subi	r24, 0xD0	; 208
     650:	70 dd       	rcall	.-1312   	; 0x132 <LCD_CHAR>
     652:	f8 01       	movw	r30, r16
     654:	82 81       	ldd	r24, Z+2	; 0x02
			LCD_CHAR((temp_arr[2]%10)+'0');
     656:	8c 9f       	mul	r24, r28
     658:	c1 2d       	mov	r28, r1
     65a:	11 24       	eor	r1, r1
     65c:	c6 95       	lsr	r28
     65e:	c6 95       	lsr	r28
     660:	c6 95       	lsr	r28
     662:	cc 0f       	add	r28, r28
     664:	9c 2f       	mov	r25, r28
     666:	99 0f       	add	r25, r25
     668:	99 0f       	add	r25, r25
     66a:	c9 0f       	add	r28, r25
     66c:	8c 1b       	sub	r24, r28
     66e:	80 5d       	subi	r24, 0xD0	; 208
			break;
     670:	60 dd       	rcall	.-1344   	; 0x132 <LCD_CHAR>
     672:	49 c0       	rjmp	.+146    	; 0x706 <alarm_clock_display+0x258>
     674:	82 e8       	ldi	r24, 0x82	; 130
     676:	47 dd       	rcall	.-1394   	; 0x106 <LCD_Comm>
			
			case 4:
			LCD_pos(2,0);
			LCD_STR("ALARM | HOUR");
     678:	84 e7       	ldi	r24, 0x74	; 116
     67a:	91 e0       	ldi	r25, 0x01	; 1
     67c:	62 dd       	rcall	.-1340   	; 0x142 <LCD_STR>
     67e:	87 ec       	ldi	r24, 0xC7	; 199
     680:	42 dd       	rcall	.-1404   	; 0x106 <LCD_Comm>
     682:	02 e0       	ldi	r16, 0x02	; 2
			LCD_pos(7,1);
			LCD_CHAR((temp_arr[1]/10)+'0');
     684:	11 e0       	ldi	r17, 0x01	; 1
     686:	f8 01       	movw	r30, r16
     688:	81 81       	ldd	r24, Z+1	; 0x01
     68a:	cd ec       	ldi	r28, 0xCD	; 205
     68c:	8c 9f       	mul	r24, r28
     68e:	81 2d       	mov	r24, r1
     690:	11 24       	eor	r1, r1
     692:	86 95       	lsr	r24
     694:	86 95       	lsr	r24
     696:	86 95       	lsr	r24
     698:	80 5d       	subi	r24, 0xD0	; 208
     69a:	4b dd       	rcall	.-1386   	; 0x132 <LCD_CHAR>
			LCD_CHAR((temp_arr[1]%10)+'0');
     69c:	f8 01       	movw	r30, r16
     69e:	81 81       	ldd	r24, Z+1	; 0x01
     6a0:	8c 9f       	mul	r24, r28
     6a2:	c1 2d       	mov	r28, r1
     6a4:	11 24       	eor	r1, r1
     6a6:	c6 95       	lsr	r28
     6a8:	c6 95       	lsr	r28
     6aa:	c6 95       	lsr	r28
     6ac:	cc 0f       	add	r28, r28
     6ae:	9c 2f       	mov	r25, r28
     6b0:	99 0f       	add	r25, r25
     6b2:	99 0f       	add	r25, r25
     6b4:	c9 0f       	add	r28, r25
     6b6:	8c 1b       	sub	r24, r28
     6b8:	80 5d       	subi	r24, 0xD0	; 208
			break;
     6ba:	3b dd       	rcall	.-1418   	; 0x132 <LCD_CHAR>
     6bc:	24 c0       	rjmp	.+72     	; 0x706 <alarm_clock_display+0x258>
     6be:	81 e8       	ldi	r24, 0x81	; 129
     6c0:	22 dd       	rcall	.-1468   	; 0x106 <LCD_Comm>

			case 5:
			LCD_pos(1,0);
			LCD_STR("ALARM | MINUTE");
     6c2:	81 e8       	ldi	r24, 0x81	; 129
     6c4:	91 e0       	ldi	r25, 0x01	; 1
     6c6:	3d dd       	rcall	.-1414   	; 0x142 <LCD_STR>
     6c8:	86 ec       	ldi	r24, 0xC6	; 198
     6ca:	1d dd       	rcall	.-1478   	; 0x106 <LCD_Comm>
     6cc:	02 e0       	ldi	r16, 0x02	; 2
     6ce:	11 e0       	ldi	r17, 0x01	; 1
			LCD_pos(6,1);
			LCD_CHAR((temp_arr[0]/10)+'0');
     6d0:	f8 01       	movw	r30, r16
     6d2:	80 81       	ld	r24, Z
     6d4:	cd ec       	ldi	r28, 0xCD	; 205
     6d6:	8c 9f       	mul	r24, r28
     6d8:	81 2d       	mov	r24, r1
     6da:	11 24       	eor	r1, r1
     6dc:	86 95       	lsr	r24
     6de:	86 95       	lsr	r24
     6e0:	86 95       	lsr	r24
     6e2:	80 5d       	subi	r24, 0xD0	; 208
     6e4:	26 dd       	rcall	.-1460   	; 0x132 <LCD_CHAR>
     6e6:	f8 01       	movw	r30, r16
     6e8:	80 81       	ld	r24, Z
			LCD_CHAR((temp_arr[0]%10)+'0');
     6ea:	8c 9f       	mul	r24, r28
     6ec:	c1 2d       	mov	r28, r1
     6ee:	11 24       	eor	r1, r1
     6f0:	c6 95       	lsr	r28
     6f2:	c6 95       	lsr	r28
     6f4:	c6 95       	lsr	r28
     6f6:	cc 0f       	add	r28, r28
     6f8:	9c 2f       	mov	r25, r28
     6fa:	99 0f       	add	r25, r25
     6fc:	99 0f       	add	r25, r25
     6fe:	c9 0f       	add	r28, r25
     700:	8c 1b       	sub	r24, r28
     702:	80 5d       	subi	r24, 0xD0	; 208
     704:	16 dd       	rcall	.-1492   	; 0x132 <LCD_CHAR>
     706:	cf 91       	pop	r28
     708:	1f 91       	pop	r17
     70a:	0f 91       	pop	r16

			case 7:
			break;
		}
	}
}
     70c:	08 95       	ret

0000070e <__vector_15>:
     70e:	1f 92       	push	r1
     710:	0f 92       	push	r0
     712:	0f b6       	in	r0, 0x3f	; 63

ISR(TIMER0_COMP_vect)
{
     714:	0f 92       	push	r0
     716:	11 24       	eor	r1, r1
     718:	0b b6       	in	r0, 0x3b	; 59
     71a:	0f 92       	push	r0
     71c:	2f 93       	push	r18
     71e:	3f 93       	push	r19
     720:	4f 93       	push	r20
     722:	5f 93       	push	r21
     724:	6f 93       	push	r22
     726:	7f 93       	push	r23
     728:	8f 93       	push	r24
     72a:	9f 93       	push	r25
     72c:	af 93       	push	r26
     72e:	bf 93       	push	r27
     730:	ef 93       	push	r30
     732:	ff 93       	push	r31
	if(!is_stopped)
     734:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <is_stopped>
     738:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <is_stopped+0x1>
     73c:	89 2b       	or	r24, r25
     73e:	09 f4       	brne	.+2      	; 0x742 <__vector_15+0x34>
		stop_watch_logic();
     740:	33 de       	rcall	.-922    	; 0x3a8 <stop_watch_logic>
		
	normal_clock_logic();
     742:	cf dd       	rcall	.-1122   	; 0x2e2 <normal_clock_logic>
     744:	ff 91       	pop	r31
}
     746:	ef 91       	pop	r30
     748:	bf 91       	pop	r27
     74a:	af 91       	pop	r26
     74c:	9f 91       	pop	r25
     74e:	8f 91       	pop	r24
     750:	7f 91       	pop	r23
     752:	6f 91       	pop	r22
     754:	5f 91       	pop	r21
     756:	4f 91       	pop	r20
     758:	3f 91       	pop	r19
     75a:	2f 91       	pop	r18
     75c:	0f 90       	pop	r0
     75e:	0b be       	out	0x3b, r0	; 59
     760:	0f 90       	pop	r0
     762:	0f be       	out	0x3f, r0	; 63
     764:	0f 90       	pop	r0
     766:	1f 90       	pop	r1
     768:	18 95       	reti

0000076a <__vector_1>:
     76a:	1f 92       	push	r1

ISR(INT0_vect)
{
     76c:	0f 92       	push	r0
     76e:	0f b6       	in	r0, 0x3f	; 63
     770:	0f 92       	push	r0
     772:	11 24       	eor	r1, r1
     774:	0b b6       	in	r0, 0x3b	; 59
     776:	0f 92       	push	r0
     778:	1f 93       	push	r17
     77a:	2f 93       	push	r18
     77c:	3f 93       	push	r19
     77e:	4f 93       	push	r20
     780:	5f 93       	push	r21
     782:	6f 93       	push	r22
     784:	7f 93       	push	r23
     786:	8f 93       	push	r24
     788:	9f 93       	push	r25
     78a:	af 93       	push	r26
     78c:	bf 93       	push	r27
     78e:	cf 93       	push	r28
     790:	df 93       	push	r29
     792:	ef 93       	push	r30
     794:	ff 93       	push	r31
	if(mode==0)
     796:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <mode>
     79a:	81 11       	cpse	r24, r1
     79c:	14 c0       	rjmp	.+40     	; 0x7c6 <__vector_1+0x5c>
	{
		mode = 1; // setting up stop_watch mode
     79e:	81 e0       	ldi	r24, 0x01	; 1
     7a0:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <mode>
		cnt_stp_w=0;
     7a4:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <cnt_stp_w+0x1>
     7a8:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <cnt_stp_w>
		sec_stp_w=0;
     7ac:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <sec_stp_w+0x1>
     7b0:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <sec_stp_w>
		min_stp_w=0;
     7b4:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <min_stp_w+0x1>
     7b8:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <min_stp_w>
		hour_stp_w=0;
     7bc:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <hour_stp_w+0x1>
     7c0:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <hour_stp_w>
     7c4:	43 c1       	rjmp	.+646    	; 0xa4c <__vector_1+0x2e2>
	}
	else if(mode==1) // stopwatch
     7c6:	81 30       	cpi	r24, 0x01	; 1
     7c8:	49 f4       	brne	.+18     	; 0x7dc <__vector_1+0x72>
	{
		mode = 0;
     7ca:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <mode>
		is_stopped=1;
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <is_stopped+0x1>
     7d6:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <is_stopped>
     7da:	38 c1       	rjmp	.+624    	; 0xa4c <__vector_1+0x2e2>
	}
	else if(mode==2) // alarm clock
     7dc:	82 30       	cpi	r24, 0x02	; 2
     7de:	09 f0       	breq	.+2      	; 0x7e2 <__vector_1+0x78>
     7e0:	c4 c0       	rjmp	.+392    	; 0x96a <__vector_1+0x200>
	{
		switch(step)
     7e2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step>
     7e6:	83 30       	cpi	r24, 0x03	; 3
     7e8:	e9 f1       	breq	.+122    	; 0x864 <__vector_1+0xfa>
     7ea:	28 f4       	brcc	.+10     	; 0x7f6 <__vector_1+0x8c>
     7ec:	81 30       	cpi	r24, 0x01	; 1
     7ee:	51 f0       	breq	.+20     	; 0x804 <__vector_1+0x9a>
     7f0:	82 30       	cpi	r24, 0x02	; 2
     7f2:	91 f0       	breq	.+36     	; 0x818 <__vector_1+0xae>
     7f4:	2b c1       	rjmp	.+598    	; 0xa4c <__vector_1+0x2e2>
     7f6:	84 30       	cpi	r24, 0x04	; 4
     7f8:	09 f4       	brne	.+2      	; 0x7fc <__vector_1+0x92>
     7fa:	6d c0       	rjmp	.+218    	; 0x8d6 <__vector_1+0x16c>
     7fc:	85 30       	cpi	r24, 0x05	; 5
     7fe:	09 f4       	brne	.+2      	; 0x802 <__vector_1+0x98>
     800:	8f c0       	rjmp	.+286    	; 0x920 <__vector_1+0x1b6>
     802:	24 c1       	rjmp	.+584    	; 0xa4c <__vector_1+0x2e2>
		{
			case 1:
			temp_year++;
     804:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     808:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     80c:	01 96       	adiw	r24, 0x01	; 1
     80e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     812:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
     816:	1a c1       	rjmp	.+564    	; 0xa4c <__vector_1+0x2e2>
			
			case 2:
			if (is_current_date==1)
     818:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end>
     81c:	81 30       	cpi	r24, 0x01	; 1
     81e:	99 f4       	brne	.+38     	; 0x846 <__vector_1+0xdc>
			{
				if (temp_arr[3]+1>month && (temp_arr[3]+1)<=12)
     820:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <temp_arr+0x3>
     824:	84 2f       	mov	r24, r20
     826:	90 e0       	ldi	r25, 0x00	; 0
     828:	01 96       	adiw	r24, 0x01	; 1
     82a:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <month>
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	28 17       	cp	r18, r24
     832:	39 07       	cpc	r19, r25
     834:	0c f0       	brlt	.+2      	; 0x838 <__vector_1+0xce>
     836:	0a c1       	rjmp	.+532    	; 0xa4c <__vector_1+0x2e2>
     838:	0d 97       	sbiw	r24, 0x0d	; 13
     83a:	0c f0       	brlt	.+2      	; 0x83e <__vector_1+0xd4>
     83c:	07 c1       	rjmp	.+526    	; 0xa4c <__vector_1+0x2e2>
				{
					temp_arr[3]++;
     83e:	4f 5f       	subi	r20, 0xFF	; 255
     840:	40 93 05 01 	sts	0x0105, r20	; 0x800105 <temp_arr+0x3>
     844:	03 c1       	rjmp	.+518    	; 0xa4c <__vector_1+0x2e2>
				}
			}
			else
			{
				if (temp_arr[3]+1>12)
     846:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <temp_arr+0x3>
     84a:	82 2f       	mov	r24, r18
     84c:	90 e0       	ldi	r25, 0x00	; 0
     84e:	01 96       	adiw	r24, 0x01	; 1
     850:	0d 97       	sbiw	r24, 0x0d	; 13
     852:	24 f0       	brlt	.+8      	; 0x85c <__vector_1+0xf2>
				{
					temp_arr[3]=1;
     854:	81 e0       	ldi	r24, 0x01	; 1
     856:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_arr+0x3>
     85a:	f8 c0       	rjmp	.+496    	; 0xa4c <__vector_1+0x2e2>
				}
				else
				{
					temp_arr[3]++;
     85c:	2f 5f       	subi	r18, 0xFF	; 255
     85e:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <temp_arr+0x3>
     862:	f4 c0       	rjmp	.+488    	; 0xa4c <__vector_1+0x2e2>
				}
			}
			break;
			
			case 3:
			if (is_current_date==1)
     864:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end>
     868:	81 30       	cpi	r24, 0x01	; 1
     86a:	e1 f4       	brne	.+56     	; 0x8a4 <__vector_1+0x13a>
			{
				if (temp_arr[2]+1>day && temp_arr[2]+1<=month_day_count(temp_arr[3], temp_year))
     86c:	10 91 04 01 	lds	r17, 0x0104	; 0x800104 <temp_arr+0x2>
     870:	c1 2f       	mov	r28, r17
     872:	d0 e0       	ldi	r29, 0x00	; 0
     874:	21 96       	adiw	r28, 0x01	; 1
     876:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <day>
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	8c 17       	cp	r24, r28
     87e:	9d 07       	cpc	r25, r29
     880:	0c f0       	brlt	.+2      	; 0x884 <__vector_1+0x11a>
     882:	e4 c0       	rjmp	.+456    	; 0xa4c <__vector_1+0x2e2>
     884:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     888:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     88c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <temp_arr+0x3>
     890:	90 e0       	ldi	r25, 0x00	; 0
     892:	d4 dc       	rcall	.-1624   	; 0x23c <month_day_count>
     894:	8c 17       	cp	r24, r28
     896:	9d 07       	cpc	r25, r29
     898:	0c f4       	brge	.+2      	; 0x89c <__vector_1+0x132>
     89a:	d8 c0       	rjmp	.+432    	; 0xa4c <__vector_1+0x2e2>
				{
					temp_arr[2]++;
     89c:	1f 5f       	subi	r17, 0xFF	; 255
     89e:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <temp_arr+0x2>
     8a2:	d4 c0       	rjmp	.+424    	; 0xa4c <__vector_1+0x2e2>
				}
			}
			else
			{
				if (temp_arr[2]+1>month_day_count(temp_arr[3], temp_year))
     8a4:	e2 e0       	ldi	r30, 0x02	; 2
     8a6:	f1 e0       	ldi	r31, 0x01	; 1
     8a8:	c2 81       	ldd	r28, Z+2	; 0x02
     8aa:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8ae:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     8b2:	83 81       	ldd	r24, Z+3	; 0x03
     8b4:	90 e0       	ldi	r25, 0x00	; 0
     8b6:	c2 dc       	rcall	.-1660   	; 0x23c <month_day_count>
     8b8:	2c 2f       	mov	r18, r28
     8ba:	30 e0       	ldi	r19, 0x00	; 0
     8bc:	2f 5f       	subi	r18, 0xFF	; 255
     8be:	3f 4f       	sbci	r19, 0xFF	; 255
     8c0:	82 17       	cp	r24, r18
     8c2:	93 07       	cpc	r25, r19
     8c4:	24 f4       	brge	.+8      	; 0x8ce <__vector_1+0x164>
				{
					temp_arr[2]=1;
     8c6:	81 e0       	ldi	r24, 0x01	; 1
     8c8:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_arr+0x2>
     8cc:	bf c0       	rjmp	.+382    	; 0xa4c <__vector_1+0x2e2>
				}
				else
				{
					temp_arr[2]++;
     8ce:	cf 5f       	subi	r28, 0xFF	; 255
     8d0:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <temp_arr+0x2>
     8d4:	bb c0       	rjmp	.+374    	; 0xa4c <__vector_1+0x2e2>
				}
			}
			break;
			
			case 4: 
			if (is_current_date==1)
     8d6:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end>
     8da:	81 30       	cpi	r24, 0x01	; 1
     8dc:	99 f4       	brne	.+38     	; 0x904 <__vector_1+0x19a>
			{
				if (temp_arr[1]+1>hour && (temp_arr[1]+1)<=23)
     8de:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <temp_arr+0x1>
     8e2:	84 2f       	mov	r24, r20
     8e4:	90 e0       	ldi	r25, 0x00	; 0
     8e6:	01 96       	adiw	r24, 0x01	; 1
     8e8:	20 91 7b 02 	lds	r18, 0x027B	; 0x80027b <hour>
     8ec:	30 e0       	ldi	r19, 0x00	; 0
     8ee:	28 17       	cp	r18, r24
     8f0:	39 07       	cpc	r19, r25
     8f2:	0c f0       	brlt	.+2      	; 0x8f6 <__vector_1+0x18c>
     8f4:	ab c0       	rjmp	.+342    	; 0xa4c <__vector_1+0x2e2>
     8f6:	48 97       	sbiw	r24, 0x18	; 24
     8f8:	0c f0       	brlt	.+2      	; 0x8fc <__vector_1+0x192>
     8fa:	a8 c0       	rjmp	.+336    	; 0xa4c <__vector_1+0x2e2>
				{
					temp_arr[1]++;
     8fc:	4f 5f       	subi	r20, 0xFF	; 255
     8fe:	40 93 03 01 	sts	0x0103, r20	; 0x800103 <temp_arr+0x1>
     902:	a4 c0       	rjmp	.+328    	; 0xa4c <__vector_1+0x2e2>
				}
			}
			else
			{
				if (temp_arr[1]+1>=24)
     904:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <temp_arr+0x1>
     908:	82 2f       	mov	r24, r18
     90a:	90 e0       	ldi	r25, 0x00	; 0
     90c:	01 96       	adiw	r24, 0x01	; 1
     90e:	48 97       	sbiw	r24, 0x18	; 24
     910:	1c f0       	brlt	.+6      	; 0x918 <__vector_1+0x1ae>
				{
					temp_arr[1]=0;
     912:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <temp_arr+0x1>
     916:	9a c0       	rjmp	.+308    	; 0xa4c <__vector_1+0x2e2>
				}
				else
				{
					temp_arr[1]++;
     918:	2f 5f       	subi	r18, 0xFF	; 255
     91a:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <temp_arr+0x1>
     91e:	96 c0       	rjmp	.+300    	; 0xa4c <__vector_1+0x2e2>
				}
			}
			break;
			
			case 5:	
			if (is_current_date==1)
     920:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end>
     924:	81 30       	cpi	r24, 0x01	; 1
     926:	99 f4       	brne	.+38     	; 0x94e <__vector_1+0x1e4>
			{
				if (temp_arr[0]+1>min && (temp_arr[0]+1)<=59)
     928:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <temp_arr>
     92c:	84 2f       	mov	r24, r20
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	01 96       	adiw	r24, 0x01	; 1
     932:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <min>
     936:	30 e0       	ldi	r19, 0x00	; 0
     938:	28 17       	cp	r18, r24
     93a:	39 07       	cpc	r19, r25
     93c:	0c f0       	brlt	.+2      	; 0x940 <__vector_1+0x1d6>
     93e:	86 c0       	rjmp	.+268    	; 0xa4c <__vector_1+0x2e2>
     940:	cc 97       	sbiw	r24, 0x3c	; 60
     942:	0c f0       	brlt	.+2      	; 0x946 <__vector_1+0x1dc>
     944:	83 c0       	rjmp	.+262    	; 0xa4c <__vector_1+0x2e2>
				{
					temp_arr[0]++;
     946:	4f 5f       	subi	r20, 0xFF	; 255
     948:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <temp_arr>
     94c:	7f c0       	rjmp	.+254    	; 0xa4c <__vector_1+0x2e2>
				}
			} 
			else
			{
				if (temp_arr[0]+1>=60)
     94e:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_arr>
     952:	82 2f       	mov	r24, r18
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	01 96       	adiw	r24, 0x01	; 1
     958:	cc 97       	sbiw	r24, 0x3c	; 60
     95a:	1c f0       	brlt	.+6      	; 0x962 <__vector_1+0x1f8>
				{
					temp_arr[0]=0;
     95c:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <temp_arr>
     960:	75 c0       	rjmp	.+234    	; 0xa4c <__vector_1+0x2e2>
				}
				else
				{
					temp_arr[0]++;
     962:	2f 5f       	subi	r18, 0xFF	; 255
     964:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <temp_arr>
     968:	71 c0       	rjmp	.+226    	; 0xa4c <__vector_1+0x2e2>
			break;
			default: break;
		}
		
	}
	else if (mode==3) // time setting mode
     96a:	83 30       	cpi	r24, 0x03	; 3
     96c:	09 f0       	breq	.+2      	; 0x970 <__vector_1+0x206>
     96e:	6e c0       	rjmp	.+220    	; 0xa4c <__vector_1+0x2e2>
	{
		switch(step_time_set)
     970:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <step_time_set>
     974:	83 30       	cpi	r24, 0x03	; 3
     976:	39 f1       	breq	.+78     	; 0x9c6 <__vector_1+0x25c>
     978:	28 f4       	brcc	.+10     	; 0x984 <__vector_1+0x21a>
     97a:	81 30       	cpi	r24, 0x01	; 1
     97c:	59 f0       	breq	.+22     	; 0x994 <__vector_1+0x22a>
     97e:	82 30       	cpi	r24, 0x02	; 2
     980:	99 f0       	breq	.+38     	; 0x9a8 <__vector_1+0x23e>
     982:	64 c0       	rjmp	.+200    	; 0xa4c <__vector_1+0x2e2>
     984:	85 30       	cpi	r24, 0x05	; 5
     986:	09 f4       	brne	.+2      	; 0x98a <__vector_1+0x220>
     988:	45 c0       	rjmp	.+138    	; 0xa14 <__vector_1+0x2aa>
     98a:	b0 f1       	brcs	.+108    	; 0x9f8 <__vector_1+0x28e>
     98c:	86 30       	cpi	r24, 0x06	; 6
     98e:	09 f4       	brne	.+2      	; 0x992 <__vector_1+0x228>
     990:	4f c0       	rjmp	.+158    	; 0xa30 <__vector_1+0x2c6>
     992:	5c c0       	rjmp	.+184    	; 0xa4c <__vector_1+0x2e2>
		{
			case 1:
			year++;
     994:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <year>
     998:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <year+0x1>
     99c:	01 96       	adiw	r24, 0x01	; 1
     99e:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <year+0x1>
     9a2:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <year>
			break;
     9a6:	52 c0       	rjmp	.+164    	; 0xa4c <__vector_1+0x2e2>
			
			case 2:
			if (month+1>12)
     9a8:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <month>
     9ac:	82 2f       	mov	r24, r18
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	01 96       	adiw	r24, 0x01	; 1
     9b2:	0d 97       	sbiw	r24, 0x0d	; 13
     9b4:	24 f0       	brlt	.+8      	; 0x9be <__vector_1+0x254>
			{
				month=1;
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <month>
     9bc:	47 c0       	rjmp	.+142    	; 0xa4c <__vector_1+0x2e2>
			}
			else
			{
				month++;
     9be:	2f 5f       	subi	r18, 0xFF	; 255
     9c0:	20 93 76 02 	sts	0x0276, r18	; 0x800276 <month>
     9c4:	43 c0       	rjmp	.+134    	; 0xa4c <__vector_1+0x2e2>
			}
			break;
			
			case 3:

			if (day+1>month_day_count(month, year))
     9c6:	c0 91 81 02 	lds	r28, 0x0281	; 0x800281 <day>
     9ca:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <year>
     9ce:	70 91 7f 02 	lds	r23, 0x027F	; 0x80027f <year+0x1>
     9d2:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <month>
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	31 dc       	rcall	.-1950   	; 0x23c <month_day_count>
     9da:	2c 2f       	mov	r18, r28
     9dc:	30 e0       	ldi	r19, 0x00	; 0
     9de:	2f 5f       	subi	r18, 0xFF	; 255
     9e0:	3f 4f       	sbci	r19, 0xFF	; 255
     9e2:	82 17       	cp	r24, r18
     9e4:	93 07       	cpc	r25, r19
     9e6:	24 f4       	brge	.+8      	; 0x9f0 <__vector_1+0x286>
			{
				day=1;
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <day>
     9ee:	2e c0       	rjmp	.+92     	; 0xa4c <__vector_1+0x2e2>
			}
			else
			{
				day++;
     9f0:	cf 5f       	subi	r28, 0xFF	; 255
     9f2:	c0 93 81 02 	sts	0x0281, r28	; 0x800281 <day>
     9f6:	2a c0       	rjmp	.+84     	; 0xa4c <__vector_1+0x2e2>
			}

			break;
			case 4:
			if (hour+1>=24)
     9f8:	20 91 7b 02 	lds	r18, 0x027B	; 0x80027b <hour>
     9fc:	82 2f       	mov	r24, r18
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	01 96       	adiw	r24, 0x01	; 1
     a02:	48 97       	sbiw	r24, 0x18	; 24
     a04:	1c f0       	brlt	.+6      	; 0xa0c <__vector_1+0x2a2>
			{
				hour=0;
     a06:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <hour>
     a0a:	20 c0       	rjmp	.+64     	; 0xa4c <__vector_1+0x2e2>
			}
			else
			{
				hour++;
     a0c:	2f 5f       	subi	r18, 0xFF	; 255
     a0e:	20 93 7b 02 	sts	0x027B, r18	; 0x80027b <hour>
     a12:	1c c0       	rjmp	.+56     	; 0xa4c <__vector_1+0x2e2>
			}
			break;
			
			case 5:
			if (min+1>=60)
     a14:	20 91 7d 02 	lds	r18, 0x027D	; 0x80027d <min>
     a18:	82 2f       	mov	r24, r18
     a1a:	90 e0       	ldi	r25, 0x00	; 0
     a1c:	01 96       	adiw	r24, 0x01	; 1
     a1e:	cc 97       	sbiw	r24, 0x3c	; 60
     a20:	1c f0       	brlt	.+6      	; 0xa28 <__vector_1+0x2be>
			{
				min=0;
     a22:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <min>
     a26:	12 c0       	rjmp	.+36     	; 0xa4c <__vector_1+0x2e2>
			}
			else
			{
				min++;
     a28:	2f 5f       	subi	r18, 0xFF	; 255
     a2a:	20 93 7d 02 	sts	0x027D, r18	; 0x80027d <min>
     a2e:	0e c0       	rjmp	.+28     	; 0xa4c <__vector_1+0x2e2>
			}
			break;

			case 6:
			if (week_day+1>=7)
     a30:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <week_day>
     a34:	82 2f       	mov	r24, r18
     a36:	90 e0       	ldi	r25, 0x00	; 0
     a38:	01 96       	adiw	r24, 0x01	; 1
     a3a:	07 97       	sbiw	r24, 0x07	; 7
     a3c:	24 f0       	brlt	.+8      	; 0xa46 <__vector_1+0x2dc>
			{
				week_day=1;
     a3e:	81 e0       	ldi	r24, 0x01	; 1
     a40:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <week_day>
     a44:	03 c0       	rjmp	.+6      	; 0xa4c <__vector_1+0x2e2>
			} 
			else
			{
				week_day++;
     a46:	2f 5f       	subi	r18, 0xFF	; 255
     a48:	20 93 7c 02 	sts	0x027C, r18	; 0x80027c <week_day>
			break;
			default: break;
		}
		
	}
}
     a4c:	ff 91       	pop	r31
     a4e:	ef 91       	pop	r30
     a50:	df 91       	pop	r29
     a52:	cf 91       	pop	r28
     a54:	bf 91       	pop	r27
     a56:	af 91       	pop	r26
     a58:	9f 91       	pop	r25
     a5a:	8f 91       	pop	r24
     a5c:	7f 91       	pop	r23
     a5e:	6f 91       	pop	r22
     a60:	5f 91       	pop	r21
     a62:	4f 91       	pop	r20
     a64:	3f 91       	pop	r19
     a66:	2f 91       	pop	r18
     a68:	1f 91       	pop	r17
     a6a:	0f 90       	pop	r0
     a6c:	0b be       	out	0x3b, r0	; 59
     a6e:	0f 90       	pop	r0
     a70:	0f be       	out	0x3f, r0	; 63
     a72:	0f 90       	pop	r0
     a74:	1f 90       	pop	r1
     a76:	18 95       	reti

00000a78 <__vector_2>:

ISR(INT1_vect)
{
     a78:	1f 92       	push	r1
     a7a:	0f 92       	push	r0
     a7c:	0f b6       	in	r0, 0x3f	; 63
     a7e:	0f 92       	push	r0
     a80:	11 24       	eor	r1, r1
     a82:	8f 93       	push	r24
     a84:	9f 93       	push	r25
	if(mode==1) // stop and go button for stopwatch 
     a86:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <mode>
     a8a:	81 30       	cpi	r24, 0x01	; 1
     a8c:	91 f4       	brne	.+36     	; 0xab2 <__vector_2+0x3a>
	{
		if (!is_stopped)
     a8e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <is_stopped>
     a92:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <is_stopped+0x1>
     a96:	89 2b       	or	r24, r25
     a98:	39 f4       	brne	.+14     	; 0xaa8 <__vector_2+0x30>
			is_stopped = 1;
     a9a:	81 e0       	ldi	r24, 0x01	; 1
     a9c:	90 e0       	ldi	r25, 0x00	; 0
     a9e:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <is_stopped+0x1>
     aa2:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <is_stopped>
     aa6:	0f c0       	rjmp	.+30     	; 0xac6 <__vector_2+0x4e>
		else
			is_stopped=0;
     aa8:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <is_stopped+0x1>
     aac:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <is_stopped>
     ab0:	0a c0       	rjmp	.+20     	; 0xac6 <__vector_2+0x4e>
	}
	else if(mode==0)
     ab2:	81 11       	cpse	r24, r1
     ab4:	04 c0       	rjmp	.+8      	; 0xabe <__vector_2+0x46>
	{
		mode=2;
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <mode>
     abc:	04 c0       	rjmp	.+8      	; 0xac6 <__vector_2+0x4e>
	}
	else if(mode==2)
     abe:	82 30       	cpi	r24, 0x02	; 2
     ac0:	11 f4       	brne	.+4      	; 0xac6 <__vector_2+0x4e>
	{
		mode=0;
     ac2:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <mode>
	}
}
     ac6:	9f 91       	pop	r25
     ac8:	8f 91       	pop	r24
     aca:	0f 90       	pop	r0
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	0f 90       	pop	r0
     ad0:	1f 90       	pop	r1
     ad2:	18 95       	reti

00000ad4 <__vector_3>:

ISR(INT2_vect)
{
     ad4:	1f 92       	push	r1
     ad6:	0f 92       	push	r0
     ad8:	0f b6       	in	r0, 0x3f	; 63
     ada:	0f 92       	push	r0
     adc:	11 24       	eor	r1, r1
     ade:	0b b6       	in	r0, 0x3b	; 59
     ae0:	0f 92       	push	r0
     ae2:	2f 93       	push	r18
     ae4:	3f 93       	push	r19
     ae6:	4f 93       	push	r20
     ae8:	5f 93       	push	r21
     aea:	6f 93       	push	r22
     aec:	7f 93       	push	r23
     aee:	8f 93       	push	r24
     af0:	9f 93       	push	r25
     af2:	af 93       	push	r26
     af4:	bf 93       	push	r27
     af6:	cf 93       	push	r28
     af8:	df 93       	push	r29
     afa:	ef 93       	push	r30
     afc:	ff 93       	push	r31
	if(mode==1)// reset button for stopwatch
     afe:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <mode>
     b02:	81 30       	cpi	r24, 0x01	; 1
     b04:	e9 f4       	brne	.+58     	; 0xb40 <__vector_3+0x6c>
	{
		if(!is_stopped)
     b06:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <is_stopped>
     b0a:	90 91 30 01 	lds	r25, 0x0130	; 0x800130 <is_stopped+0x1>
     b0e:	89 2b       	or	r24, r25
     b10:	31 f4       	brne	.+12     	; 0xb1e <__vector_3+0x4a>
			is_stopped=1;
     b12:	81 e0       	ldi	r24, 0x01	; 1
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	90 93 30 01 	sts	0x0130, r25	; 0x800130 <is_stopped+0x1>
     b1a:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <is_stopped>

		cnt_stp_w=0;
     b1e:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <cnt_stp_w+0x1>
     b22:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <cnt_stp_w>
		sec_stp_w=0;
     b26:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <sec_stp_w+0x1>
     b2a:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <sec_stp_w>
		min_stp_w=0;
     b2e:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <min_stp_w+0x1>
     b32:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <min_stp_w>
		hour_stp_w=0;
     b36:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <hour_stp_w+0x1>
     b3a:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <hour_stp_w>
     b3e:	41 c1       	rjmp	.+642    	; 0xdc2 <__vector_3+0x2ee>
	}
	else if(mode==0)
     b40:	81 11       	cpse	r24, r1
     b42:	02 c0       	rjmp	.+4      	; 0xb48 <__vector_3+0x74>
	{
		disable_alarm_clock();
     b44:	ae db       	rcall	.-2212   	; 0x2a2 <disable_alarm_clock>
     b46:	3d c1       	rjmp	.+634    	; 0xdc2 <__vector_3+0x2ee>
	}
	else if(mode==2)
     b48:	82 30       	cpi	r24, 0x02	; 2
     b4a:	09 f0       	breq	.+2      	; 0xb4e <__vector_3+0x7a>
     b4c:	bf c0       	rjmp	.+382    	; 0xccc <__vector_3+0x1f8>
	{
		switch(step)
     b4e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step>
     b52:	83 30       	cpi	r24, 0x03	; 3
     b54:	09 f4       	brne	.+2      	; 0xb58 <__vector_3+0x84>
     b56:	45 c0       	rjmp	.+138    	; 0xbe2 <__vector_3+0x10e>
     b58:	28 f4       	brcc	.+10     	; 0xb64 <__vector_3+0x90>
     b5a:	81 30       	cpi	r24, 0x01	; 1
     b5c:	51 f0       	breq	.+20     	; 0xb72 <__vector_3+0x9e>
     b5e:	82 30       	cpi	r24, 0x02	; 2
     b60:	d1 f0       	breq	.+52     	; 0xb96 <__vector_3+0xc2>
     b62:	2f c1       	rjmp	.+606    	; 0xdc2 <__vector_3+0x2ee>
     b64:	84 30       	cpi	r24, 0x04	; 4
     b66:	09 f4       	brne	.+2      	; 0xb6a <__vector_3+0x96>
     b68:	69 c0       	rjmp	.+210    	; 0xc3c <__vector_3+0x168>
     b6a:	85 30       	cpi	r24, 0x05	; 5
     b6c:	09 f4       	brne	.+2      	; 0xb70 <__vector_3+0x9c>
     b6e:	8a c0       	rjmp	.+276    	; 0xc84 <__vector_3+0x1b0>
     b70:	28 c1       	rjmp	.+592    	; 0xdc2 <__vector_3+0x2ee>
		{
			case 1:
			if (temp_year-1>=year)
     b72:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b76:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b7a:	01 97       	sbiw	r24, 0x01	; 1
     b7c:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <year>
     b80:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <year+0x1>
     b84:	82 17       	cp	r24, r18
     b86:	93 07       	cpc	r25, r19
     b88:	08 f4       	brcc	.+2      	; 0xb8c <__vector_3+0xb8>
     b8a:	1b c1       	rjmp	.+566    	; 0xdc2 <__vector_3+0x2ee>
			{
				temp_year--;
     b8c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b90:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     b94:	16 c1       	rjmp	.+556    	; 0xdc2 <__vector_3+0x2ee>
			}
			break;
			
			case 2:
			if (is_current_date==1)
     b96:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end>
     b9a:	81 30       	cpi	r24, 0x01	; 1
     b9c:	89 f4       	brne	.+34     	; 0xbc0 <__vector_3+0xec>
			{
				if (temp_arr[3]-1>=month)
     b9e:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <temp_arr+0x3>
     ba2:	24 2f       	mov	r18, r20
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	21 50       	subi	r18, 0x01	; 1
     ba8:	31 09       	sbc	r19, r1
     baa:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <month>
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	28 17       	cp	r18, r24
     bb2:	39 07       	cpc	r19, r25
     bb4:	0c f4       	brge	.+2      	; 0xbb8 <__vector_3+0xe4>
     bb6:	05 c1       	rjmp	.+522    	; 0xdc2 <__vector_3+0x2ee>
				{
					temp_arr[3]--;
     bb8:	41 50       	subi	r20, 0x01	; 1
     bba:	40 93 05 01 	sts	0x0105, r20	; 0x800105 <temp_arr+0x3>
     bbe:	01 c1       	rjmp	.+514    	; 0xdc2 <__vector_3+0x2ee>
				}
			}
			else
			{
				if (temp_arr[3]-1<=0)
     bc0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <temp_arr+0x3>
     bc4:	28 2f       	mov	r18, r24
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	21 50       	subi	r18, 0x01	; 1
     bca:	31 09       	sbc	r19, r1
     bcc:	12 16       	cp	r1, r18
     bce:	13 06       	cpc	r1, r19
     bd0:	24 f0       	brlt	.+8      	; 0xbda <__vector_3+0x106>
				{
					temp_arr[3]=12;
     bd2:	8c e0       	ldi	r24, 0x0C	; 12
     bd4:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_arr+0x3>
     bd8:	f4 c0       	rjmp	.+488    	; 0xdc2 <__vector_3+0x2ee>
				}
				else
				{
					temp_arr[3]--;
     bda:	81 50       	subi	r24, 0x01	; 1
     bdc:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_arr+0x3>
     be0:	f0 c0       	rjmp	.+480    	; 0xdc2 <__vector_3+0x2ee>
				}
			}
			break;
			
			case 3:
			if (is_current_date==1)
     be2:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end>
     be6:	81 30       	cpi	r24, 0x01	; 1
     be8:	89 f4       	brne	.+34     	; 0xc0c <__vector_3+0x138>
			{
				if (!(temp_arr[2]-1<day))
     bea:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <temp_arr+0x2>
     bee:	24 2f       	mov	r18, r20
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	21 50       	subi	r18, 0x01	; 1
     bf4:	31 09       	sbc	r19, r1
     bf6:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <day>
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	28 17       	cp	r18, r24
     bfe:	39 07       	cpc	r19, r25
     c00:	0c f4       	brge	.+2      	; 0xc04 <__vector_3+0x130>
     c02:	df c0       	rjmp	.+446    	; 0xdc2 <__vector_3+0x2ee>
				{
					temp_arr[2]--;
     c04:	41 50       	subi	r20, 0x01	; 1
     c06:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <temp_arr+0x2>
     c0a:	db c0       	rjmp	.+438    	; 0xdc2 <__vector_3+0x2ee>
				}
			}
			else
			{
				if (temp_arr[2]-1<=0)
     c0c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <temp_arr+0x2>
     c10:	28 2f       	mov	r18, r24
     c12:	30 e0       	ldi	r19, 0x00	; 0
     c14:	21 50       	subi	r18, 0x01	; 1
     c16:	31 09       	sbc	r19, r1
     c18:	12 16       	cp	r1, r18
     c1a:	13 06       	cpc	r1, r19
     c1c:	5c f0       	brlt	.+22     	; 0xc34 <__vector_3+0x160>
				{
					temp_arr[2]=month_day_count(temp_arr[3],temp_year);
     c1e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c22:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c26:	c2 e0       	ldi	r28, 0x02	; 2
     c28:	d1 e0       	ldi	r29, 0x01	; 1
     c2a:	8b 81       	ldd	r24, Y+3	; 0x03
     c2c:	90 e0       	ldi	r25, 0x00	; 0
     c2e:	06 db       	rcall	.-2548   	; 0x23c <month_day_count>
     c30:	8a 83       	std	Y+2, r24	; 0x02
     c32:	c7 c0       	rjmp	.+398    	; 0xdc2 <__vector_3+0x2ee>
				}
				else
				{
					temp_arr[2]--;
     c34:	81 50       	subi	r24, 0x01	; 1
     c36:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_arr+0x2>
     c3a:	c3 c0       	rjmp	.+390    	; 0xdc2 <__vector_3+0x2ee>
				}
			}
			break;

			case 4:
			if (is_current_date==1)
     c3c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end>
     c40:	81 30       	cpi	r24, 0x01	; 1
     c42:	89 f4       	brne	.+34     	; 0xc66 <__vector_3+0x192>
			{

				if (!(temp_arr[1]-1<hour))
     c44:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <temp_arr+0x1>
     c48:	24 2f       	mov	r18, r20
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	21 50       	subi	r18, 0x01	; 1
     c4e:	31 09       	sbc	r19, r1
     c50:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <hour>
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	28 17       	cp	r18, r24
     c58:	39 07       	cpc	r19, r25
     c5a:	0c f4       	brge	.+2      	; 0xc5e <__vector_3+0x18a>
     c5c:	b2 c0       	rjmp	.+356    	; 0xdc2 <__vector_3+0x2ee>
				{
					temp_arr[1]--;
     c5e:	41 50       	subi	r20, 0x01	; 1
     c60:	40 93 03 01 	sts	0x0103, r20	; 0x800103 <temp_arr+0x1>
     c64:	ae c0       	rjmp	.+348    	; 0xdc2 <__vector_3+0x2ee>
				}
			}
			else
			{
				if (temp_arr[1]-1<0)
     c66:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_arr+0x1>
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	21 50       	subi	r18, 0x01	; 1
     c70:	31 09       	sbc	r19, r1
     c72:	22 f4       	brpl	.+8      	; 0xc7c <__vector_3+0x1a8>
				{
					temp_arr[1]=23;
     c74:	87 e1       	ldi	r24, 0x17	; 23
     c76:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp_arr+0x1>
     c7a:	a3 c0       	rjmp	.+326    	; 0xdc2 <__vector_3+0x2ee>
				}
				else
				{
					temp_arr[1]--;
     c7c:	81 50       	subi	r24, 0x01	; 1
     c7e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp_arr+0x1>
     c82:	9f c0       	rjmp	.+318    	; 0xdc2 <__vector_3+0x2ee>
				}
			}
			break; 

			case 5:	
			if (is_current_date==1)
     c84:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end>
     c88:	81 30       	cpi	r24, 0x01	; 1
     c8a:	89 f4       	brne	.+34     	; 0xcae <__vector_3+0x1da>
			{

				if (!(temp_arr[0]-1<min))
     c8c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <temp_arr>
     c90:	24 2f       	mov	r18, r20
     c92:	30 e0       	ldi	r19, 0x00	; 0
     c94:	21 50       	subi	r18, 0x01	; 1
     c96:	31 09       	sbc	r19, r1
     c98:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <min>
     c9c:	90 e0       	ldi	r25, 0x00	; 0
     c9e:	28 17       	cp	r18, r24
     ca0:	39 07       	cpc	r19, r25
     ca2:	0c f4       	brge	.+2      	; 0xca6 <__vector_3+0x1d2>
     ca4:	8e c0       	rjmp	.+284    	; 0xdc2 <__vector_3+0x2ee>
				{
					temp_arr[0]--;
     ca6:	41 50       	subi	r20, 0x01	; 1
     ca8:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <temp_arr>
     cac:	8a c0       	rjmp	.+276    	; 0xdc2 <__vector_3+0x2ee>
				}
			}
			else
			{				
				if (temp_arr[0]-1<0)
     cae:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_arr>
     cb2:	28 2f       	mov	r18, r24
     cb4:	30 e0       	ldi	r19, 0x00	; 0
     cb6:	21 50       	subi	r18, 0x01	; 1
     cb8:	31 09       	sbc	r19, r1
     cba:	22 f4       	brpl	.+8      	; 0xcc4 <__vector_3+0x1f0>
				{
					temp_arr[0]=59;
     cbc:	8b e3       	ldi	r24, 0x3B	; 59
     cbe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_arr>
     cc2:	7f c0       	rjmp	.+254    	; 0xdc2 <__vector_3+0x2ee>
				}
				else
				{
					temp_arr[0]--;
     cc4:	81 50       	subi	r24, 0x01	; 1
     cc6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_arr>
     cca:	7b c0       	rjmp	.+246    	; 0xdc2 <__vector_3+0x2ee>
			break;

			default: break;
		}
	}
	else if (mode==3) // time setting mode for decreasing values
     ccc:	83 30       	cpi	r24, 0x03	; 3
     cce:	09 f0       	breq	.+2      	; 0xcd2 <__vector_3+0x1fe>
     cd0:	78 c0       	rjmp	.+240    	; 0xdc2 <__vector_3+0x2ee>
	{
		switch(step_time_set)
     cd2:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <step_time_set>
     cd6:	83 30       	cpi	r24, 0x03	; 3
     cd8:	49 f1       	breq	.+82     	; 0xd2c <__vector_3+0x258>
     cda:	28 f4       	brcc	.+10     	; 0xce6 <__vector_3+0x212>
     cdc:	81 30       	cpi	r24, 0x01	; 1
     cde:	59 f0       	breq	.+22     	; 0xcf6 <__vector_3+0x222>
     ce0:	82 30       	cpi	r24, 0x02	; 2
     ce2:	99 f0       	breq	.+38     	; 0xd0a <__vector_3+0x236>
     ce4:	6a c0       	rjmp	.+212    	; 0xdba <__vector_3+0x2e6>
     ce6:	85 30       	cpi	r24, 0x05	; 5
     ce8:	09 f4       	brne	.+2      	; 0xcec <__vector_3+0x218>
     cea:	47 c0       	rjmp	.+142    	; 0xd7a <__vector_3+0x2a6>
     cec:	b8 f1       	brcs	.+110    	; 0xd5c <__vector_3+0x288>
     cee:	86 30       	cpi	r24, 0x06	; 6
     cf0:	09 f4       	brne	.+2      	; 0xcf4 <__vector_3+0x220>
     cf2:	52 c0       	rjmp	.+164    	; 0xd98 <__vector_3+0x2c4>
     cf4:	62 c0       	rjmp	.+196    	; 0xdba <__vector_3+0x2e6>
		{
			case 1:
				year--;
     cf6:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <year>
     cfa:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <year+0x1>
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <year+0x1>
     d04:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <year>
			break;
     d08:	5c c0       	rjmp	.+184    	; 0xdc2 <__vector_3+0x2ee>
			
			case 2:
			if (month-1<=0)
     d0a:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <month>
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	21 50       	subi	r18, 0x01	; 1
     d14:	31 09       	sbc	r19, r1
     d16:	12 16       	cp	r1, r18
     d18:	13 06       	cpc	r1, r19
     d1a:	24 f0       	brlt	.+8      	; 0xd24 <__vector_3+0x250>
			{
				month=12;
     d1c:	8c e0       	ldi	r24, 0x0C	; 12
     d1e:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <month>
     d22:	4f c0       	rjmp	.+158    	; 0xdc2 <__vector_3+0x2ee>
			}
			else
			{
				month--;
     d24:	81 50       	subi	r24, 0x01	; 1
     d26:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <month>
     d2a:	4b c0       	rjmp	.+150    	; 0xdc2 <__vector_3+0x2ee>
			}
			break;
			
			case 3:
			if (day-1<=0)
     d2c:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <day>
     d30:	28 2f       	mov	r18, r24
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	21 50       	subi	r18, 0x01	; 1
     d36:	31 09       	sbc	r19, r1
     d38:	12 16       	cp	r1, r18
     d3a:	13 06       	cpc	r1, r19
     d3c:	5c f0       	brlt	.+22     	; 0xd54 <__vector_3+0x280>
			{
				day=month_day_count(month,year);
     d3e:	60 91 7e 02 	lds	r22, 0x027E	; 0x80027e <year>
     d42:	70 91 7f 02 	lds	r23, 0x027F	; 0x80027f <year+0x1>
     d46:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <month>
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	77 da       	rcall	.-2834   	; 0x23c <month_day_count>
     d4e:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <day>
     d52:	37 c0       	rjmp	.+110    	; 0xdc2 <__vector_3+0x2ee>
			}
			else
			{
				day--;
     d54:	81 50       	subi	r24, 0x01	; 1
     d56:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <day>
     d5a:	33 c0       	rjmp	.+102    	; 0xdc2 <__vector_3+0x2ee>
			}
			break;

			case 4:
			if (hour-1<0)
     d5c:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <hour>
     d60:	28 2f       	mov	r18, r24
     d62:	30 e0       	ldi	r19, 0x00	; 0
     d64:	21 50       	subi	r18, 0x01	; 1
     d66:	31 09       	sbc	r19, r1
     d68:	22 f4       	brpl	.+8      	; 0xd72 <__vector_3+0x29e>
			{
				hour=23;
     d6a:	87 e1       	ldi	r24, 0x17	; 23
     d6c:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <hour>
     d70:	28 c0       	rjmp	.+80     	; 0xdc2 <__vector_3+0x2ee>
			}
			else
			{
				hour--;
     d72:	81 50       	subi	r24, 0x01	; 1
     d74:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <hour>
     d78:	24 c0       	rjmp	.+72     	; 0xdc2 <__vector_3+0x2ee>
			}
			break;

			case 5:
			if (min-1<0)
     d7a:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <min>
     d7e:	28 2f       	mov	r18, r24
     d80:	30 e0       	ldi	r19, 0x00	; 0
     d82:	21 50       	subi	r18, 0x01	; 1
     d84:	31 09       	sbc	r19, r1
     d86:	22 f4       	brpl	.+8      	; 0xd90 <__vector_3+0x2bc>
			{
				min=59;
     d88:	8b e3       	ldi	r24, 0x3B	; 59
     d8a:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <min>
     d8e:	19 c0       	rjmp	.+50     	; 0xdc2 <__vector_3+0x2ee>
			}
			else
			{
				min--;
     d90:	81 50       	subi	r24, 0x01	; 1
     d92:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <min>
     d96:	15 c0       	rjmp	.+42     	; 0xdc2 <__vector_3+0x2ee>
			}
			break;

			case 6:
			if (week_day-1<1)
     d98:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <week_day>
     d9c:	28 2f       	mov	r18, r24
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	21 50       	subi	r18, 0x01	; 1
     da2:	31 09       	sbc	r19, r1
     da4:	12 16       	cp	r1, r18
     da6:	13 06       	cpc	r1, r19
     da8:	24 f0       	brlt	.+8      	; 0xdb2 <__vector_3+0x2de>
			{
				week_day=1;
     daa:	81 e0       	ldi	r24, 0x01	; 1
     dac:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <week_day>
     db0:	08 c0       	rjmp	.+16     	; 0xdc2 <__vector_3+0x2ee>
			} 
			else
			{
				week_day--;
     db2:	81 50       	subi	r24, 0x01	; 1
     db4:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <week_day>
			}
			break;
			default: LCD_Clear();
     db8:	04 c0       	rjmp	.+8      	; 0xdc2 <__vector_3+0x2ee>
					LCD_STR("STEP has incorrect value");
     dba:	d1 d9       	rcall	.-3166   	; 0x15e <LCD_Clear>
     dbc:	80 e9       	ldi	r24, 0x90	; 144
     dbe:	91 e0       	ldi	r25, 0x01	; 1
     dc0:	c0 d9       	rcall	.-3200   	; 0x142 <LCD_STR>
		 break;
		}
	}
}
     dc2:	ff 91       	pop	r31
     dc4:	ef 91       	pop	r30
     dc6:	df 91       	pop	r29
     dc8:	cf 91       	pop	r28
     dca:	bf 91       	pop	r27
     dcc:	af 91       	pop	r26
     dce:	9f 91       	pop	r25
     dd0:	8f 91       	pop	r24
     dd2:	7f 91       	pop	r23
     dd4:	6f 91       	pop	r22
     dd6:	5f 91       	pop	r21
     dd8:	4f 91       	pop	r20
     dda:	3f 91       	pop	r19
     ddc:	2f 91       	pop	r18
     dde:	0f 90       	pop	r0
     de0:	0b be       	out	0x3b, r0	; 59
     de2:	0f 90       	pop	r0
     de4:	0f be       	out	0x3f, r0	; 63
     de6:	0f 90       	pop	r0
     de8:	1f 90       	pop	r1
     dea:	18 95       	reti

00000dec <__vector_4>:

ISR(INT3_vect)
{
     dec:	1f 92       	push	r1
     dee:	0f 92       	push	r0
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	0f 92       	push	r0
     df4:	11 24       	eor	r1, r1
     df6:	0b b6       	in	r0, 0x3b	; 59
     df8:	0f 92       	push	r0
     dfa:	2f 93       	push	r18
     dfc:	3f 93       	push	r19
     dfe:	8f 93       	push	r24
     e00:	9f 93       	push	r25
     e02:	ef 93       	push	r30
     e04:	ff 93       	push	r31
	if (mode==0)
     e06:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <mode>
     e0a:	81 11       	cpse	r24, r1
     e0c:	04 c0       	rjmp	.+8      	; 0xe16 <__vector_4+0x2a>
	{
		mode=3; // time setting mode
     e0e:	83 e0       	ldi	r24, 0x03	; 3
     e10:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <mode>
     e14:	9a c0       	rjmp	.+308    	; 0xf4a <__vector_4+0x15e>
	}
	else if(mode==1)
     e16:	81 30       	cpi	r24, 0x01	; 1
     e18:	09 f4       	brne	.+2      	; 0xe1c <__vector_4+0x30>
     e1a:	97 c0       	rjmp	.+302    	; 0xf4a <__vector_4+0x15e>
	{
		// code for stopwatch
	}
	else if(mode==2)
     e1c:	82 30       	cpi	r24, 0x02	; 2
     e1e:	09 f0       	breq	.+2      	; 0xe22 <__vector_4+0x36>
     e20:	85 c0       	rjmp	.+266    	; 0xf2c <__vector_4+0x140>
	{
		step++;
     e22:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step>
     e26:	8f 5f       	subi	r24, 0xFF	; 255
     e28:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <step>
		switch(step)
     e2c:	83 30       	cpi	r24, 0x03	; 3
     e2e:	01 f1       	breq	.+64     	; 0xe70 <__vector_4+0x84>
     e30:	18 f4       	brcc	.+6      	; 0xe38 <__vector_4+0x4c>
     e32:	82 30       	cpi	r24, 0x02	; 2
     e34:	39 f0       	breq	.+14     	; 0xe44 <__vector_4+0x58>
     e36:	58 c0       	rjmp	.+176    	; 0xee8 <__vector_4+0xfc>
     e38:	84 30       	cpi	r24, 0x04	; 4
     e3a:	71 f1       	breq	.+92     	; 0xe98 <__vector_4+0xac>
     e3c:	85 30       	cpi	r24, 0x05	; 5
     e3e:	09 f4       	brne	.+2      	; 0xe42 <__vector_4+0x56>
     e40:	3f c0       	rjmp	.+126    	; 0xec0 <__vector_4+0xd4>
     e42:	52 c0       	rjmp	.+164    	; 0xee8 <__vector_4+0xfc>
		{
			case 2:
			if (temp_year==year)
     e44:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e48:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e4c:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <year>
     e50:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <year+0x1>
     e54:	28 17       	cp	r18, r24
     e56:	39 07       	cpc	r19, r25
     e58:	41 f4       	brne	.+16     	; 0xe6a <__vector_4+0x7e>
			{
				temp_arr[3]=month;
     e5a:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <month>
     e5e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_arr+0x3>
				is_current_date=1;
     e62:	81 e0       	ldi	r24, 0x01	; 1
     e64:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__data_end>
     e68:	70 c0       	rjmp	.+224    	; 0xf4a <__vector_4+0x15e>
			}
			else
			{
				is_current_date=0;
     e6a:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <__data_end>
     e6e:	6d c0       	rjmp	.+218    	; 0xf4a <__vector_4+0x15e>
			}

			break;

			case 3:
			if (temp_arr[3]==month && is_current_date==1)
     e70:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <temp_arr+0x3>
     e74:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <month>
     e78:	98 13       	cpse	r25, r24
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__vector_4+0xa6>
     e7c:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end>
     e80:	81 30       	cpi	r24, 0x01	; 1
     e82:	39 f4       	brne	.+14     	; 0xe92 <__vector_4+0xa6>
			{
				is_current_date=1;
     e84:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__data_end>
				temp_arr[2]=day;
     e88:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <day>
     e8c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_arr+0x2>
     e90:	5c c0       	rjmp	.+184    	; 0xf4a <__vector_4+0x15e>
			}
			else
			{
				is_current_date=0;
     e92:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <__data_end>
     e96:	59 c0       	rjmp	.+178    	; 0xf4a <__vector_4+0x15e>
			}
	
			break;
			
			case 4:
			if (temp_arr[2]==day && is_current_date==1)
     e98:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <temp_arr+0x2>
     e9c:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <day>
     ea0:	98 13       	cpse	r25, r24
     ea2:	0b c0       	rjmp	.+22     	; 0xeba <__vector_4+0xce>
     ea4:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end>
     ea8:	81 30       	cpi	r24, 0x01	; 1
     eaa:	39 f4       	brne	.+14     	; 0xeba <__vector_4+0xce>
			{
				is_current_date=1;
     eac:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__data_end>
				temp_arr[1]=hour;
     eb0:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <hour>
     eb4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp_arr+0x1>
     eb8:	48 c0       	rjmp	.+144    	; 0xf4a <__vector_4+0x15e>
			}
			else{is_current_date=0;}
     eba:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <__data_end>
     ebe:	45 c0       	rjmp	.+138    	; 0xf4a <__vector_4+0x15e>
			break;

			case 5:
			if (temp_arr[1]==hour && is_current_date==1)
     ec0:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_arr+0x1>
     ec4:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <hour>
     ec8:	98 13       	cpse	r25, r24
     eca:	0b c0       	rjmp	.+22     	; 0xee2 <__vector_4+0xf6>
     ecc:	80 91 6e 02 	lds	r24, 0x026E	; 0x80026e <__data_end>
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	39 f4       	brne	.+14     	; 0xee2 <__vector_4+0xf6>
			{
				is_current_date=1;
     ed4:	80 93 6e 02 	sts	0x026E, r24	; 0x80026e <__data_end>
				temp_arr[0]=min;
     ed8:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <min>
     edc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_arr>
     ee0:	34 c0       	rjmp	.+104    	; 0xf4a <__vector_4+0x15e>
			}
			else{is_current_date=0;}
     ee2:	10 92 6e 02 	sts	0x026E, r1	; 0x80026e <__data_end>
     ee6:	31 c0       	rjmp	.+98     	; 0xf4a <__vector_4+0x15e>
			break;
		}
		if (step>5)
     ee8:	86 30       	cpi	r24, 0x06	; 6
     eea:	78 f1       	brcs	.+94     	; 0xf4a <__vector_4+0x15e>
		{
			step=1; // this means end of time setting
     eec:	81 e0       	ldi	r24, 0x01	; 1
     eee:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <step>
			isset_alarm=1;
     ef2:	80 93 6f 02 	sts	0x026F, r24	; 0x80026f <isset_alarm>
				
			min_alarm=temp_arr[0];
     ef6:	e2 e0       	ldi	r30, 0x02	; 2
     ef8:	f1 e0       	ldi	r31, 0x01	; 1
     efa:	90 81       	ld	r25, Z
     efc:	90 93 73 02 	sts	0x0273, r25	; 0x800273 <min_alarm>
			hour_alarm=temp_arr[1];
     f00:	91 81       	ldd	r25, Z+1	; 0x01
     f02:	90 93 72 02 	sts	0x0272, r25	; 0x800272 <hour_alarm>
			day_alarm=temp_arr[2];
     f06:	92 81       	ldd	r25, Z+2	; 0x02
     f08:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <day_alarm>
			month_alarm=temp_arr[3];
     f0c:	93 81       	ldd	r25, Z+3	; 0x03
     f0e:	90 93 70 02 	sts	0x0270, r25	; 0x800270 <month_alarm>
			year_alarm=temp_year;
     f12:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     f16:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     f1a:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <year_alarm+0x1>
     f1e:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <year_alarm>
				
			// clearing temp variables
			for (uch i=0;i<4;i++)
			{
				temp_arr[i]=0;
     f22:	10 82       	st	Z, r1
     f24:	11 82       	std	Z+1, r1	; 0x01
				if (i>1)
				{
					temp_arr[i]=1;
     f26:	82 83       	std	Z+2, r24	; 0x02
     f28:	83 83       	std	Z+3, r24	; 0x03
     f2a:	0f c0       	rjmp	.+30     	; 0xf4a <__vector_4+0x15e>
				}
			}
		}
	}
	else if (mode==3)
     f2c:	83 30       	cpi	r24, 0x03	; 3
     f2e:	69 f4       	brne	.+26     	; 0xf4a <__vector_4+0x15e>
	{
		step_time_set++;
     f30:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <step_time_set>
     f34:	8f 5f       	subi	r24, 0xFF	; 255
	
		if (step_time_set>6)
     f36:	87 30       	cpi	r24, 0x07	; 7
     f38:	18 f4       	brcc	.+6      	; 0xf40 <__vector_4+0x154>
			}
		}
	}
	else if (mode==3)
	{
		step_time_set++;
     f3a:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <step_time_set>
     f3e:	05 c0       	rjmp	.+10     	; 0xf4a <__vector_4+0x15e>
	
		if (step_time_set>6)
		{
			step_time_set=1; // this means end of time setting
     f40:	81 e0       	ldi	r24, 0x01	; 1
     f42:	80 93 31 01 	sts	0x0131, r24	; 0x800131 <step_time_set>
			mode=0;
     f46:	10 92 74 02 	sts	0x0274, r1	; 0x800274 <mode>
		}
	}
}
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	9f 91       	pop	r25
     f50:	8f 91       	pop	r24
     f52:	3f 91       	pop	r19
     f54:	2f 91       	pop	r18
     f56:	0f 90       	pop	r0
     f58:	0b be       	out	0x3b, r0	; 59
     f5a:	0f 90       	pop	r0
     f5c:	0f be       	out	0x3f, r0	; 63
     f5e:	0f 90       	pop	r0
     f60:	1f 90       	pop	r1
     f62:	18 95       	reti

00000f64 <display_normal_mode>:

void display_normal_mode(void)
{
     f64:	0f 93       	push	r16
     f66:	1f 93       	push	r17
     f68:	cf 93       	push	r28
     f6a:	df 93       	push	r29
     f6c:	00 d0       	rcall	.+0      	; 0xf6e <display_normal_mode+0xa>
     f6e:	00 d0       	rcall	.+0      	; 0xf70 <display_normal_mode+0xc>
     f70:	00 d0       	rcall	.+0      	; 0xf72 <display_normal_mode+0xe>
     f72:	cd b7       	in	r28, 0x3d	; 61
     f74:	de b7       	in	r29, 0x3e	; 62
	char AM[] = "AM";
     f76:	81 e4       	ldi	r24, 0x41	; 65
     f78:	9d e4       	ldi	r25, 0x4D	; 77
     f7a:	9a 83       	std	Y+2, r25	; 0x02
     f7c:	89 83       	std	Y+1, r24	; 0x01
     f7e:	1b 82       	std	Y+3, r1	; 0x03
	char PM[] = "PM";
     f80:	80 e5       	ldi	r24, 0x50	; 80
     f82:	9d e4       	ldi	r25, 0x4D	; 77
     f84:	9d 83       	std	Y+5, r25	; 0x05
     f86:	8c 83       	std	Y+4, r24	; 0x04
     f88:	1e 82       	std	Y+6, r1	; 0x06
     f8a:	80 e8       	ldi	r24, 0x80	; 128
     f8c:	bc d8       	rcall	.-3720   	; 0x106 <LCD_Comm>
	
	// Displaying year
	LCD_pos(0,0);
	LCD_CHAR((year)/1000+'0');
     f8e:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <year>
     f92:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <year+0x1>
     f96:	36 95       	lsr	r19
     f98:	27 95       	ror	r18
     f9a:	36 95       	lsr	r19
     f9c:	27 95       	ror	r18
     f9e:	36 95       	lsr	r19
     fa0:	27 95       	ror	r18
     fa2:	a5 ec       	ldi	r26, 0xC5	; 197
     fa4:	b0 e2       	ldi	r27, 0x20	; 32
     fa6:	9f d5       	rcall	.+2878   	; 0x1ae6 <__umulhisi3>
     fa8:	92 95       	swap	r25
     faa:	82 95       	swap	r24
     fac:	8f 70       	andi	r24, 0x0F	; 15
     fae:	89 27       	eor	r24, r25
     fb0:	9f 70       	andi	r25, 0x0F	; 15
     fb2:	89 27       	eor	r24, r25
     fb4:	80 5d       	subi	r24, 0xD0	; 208
     fb6:	bd d8       	rcall	.-3718   	; 0x132 <LCD_CHAR>
	LCD_CHAR((year/100)%10+'0');
     fb8:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <year>
     fbc:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <year+0x1>
     fc0:	36 95       	lsr	r19
     fc2:	27 95       	ror	r18
     fc4:	36 95       	lsr	r19
     fc6:	27 95       	ror	r18
     fc8:	ab e7       	ldi	r26, 0x7B	; 123
     fca:	b4 e1       	ldi	r27, 0x14	; 20
     fcc:	8c d5       	rcall	.+2840   	; 0x1ae6 <__umulhisi3>
     fce:	ac 01       	movw	r20, r24
     fd0:	56 95       	lsr	r21
     fd2:	47 95       	ror	r20
     fd4:	9a 01       	movw	r18, r20
     fd6:	ad ec       	ldi	r26, 0xCD	; 205
     fd8:	bc ec       	ldi	r27, 0xCC	; 204
     fda:	85 d5       	rcall	.+2826   	; 0x1ae6 <__umulhisi3>
     fdc:	96 95       	lsr	r25
     fde:	87 95       	ror	r24
     fe0:	96 95       	lsr	r25
     fe2:	87 95       	ror	r24
     fe4:	96 95       	lsr	r25
     fe6:	87 95       	ror	r24
     fe8:	9c 01       	movw	r18, r24
     fea:	22 0f       	add	r18, r18
     fec:	33 1f       	adc	r19, r19
     fee:	88 0f       	add	r24, r24
     ff0:	99 1f       	adc	r25, r25
     ff2:	88 0f       	add	r24, r24
     ff4:	99 1f       	adc	r25, r25
     ff6:	88 0f       	add	r24, r24
     ff8:	99 1f       	adc	r25, r25
     ffa:	82 0f       	add	r24, r18
     ffc:	93 1f       	adc	r25, r19
     ffe:	9a 01       	movw	r18, r20
    1000:	28 1b       	sub	r18, r24
    1002:	39 0b       	sbc	r19, r25
    1004:	c9 01       	movw	r24, r18
    1006:	80 5d       	subi	r24, 0xD0	; 208
    1008:	94 d8       	rcall	.-3800   	; 0x132 <LCD_CHAR>
	LCD_CHAR((year/10)%10+'0');
    100a:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <year>
    100e:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <year+0x1>
    1012:	ad ec       	ldi	r26, 0xCD	; 205
    1014:	bc ec       	ldi	r27, 0xCC	; 204
    1016:	67 d5       	rcall	.+2766   	; 0x1ae6 <__umulhisi3>
    1018:	ac 01       	movw	r20, r24
    101a:	56 95       	lsr	r21
    101c:	47 95       	ror	r20
    101e:	56 95       	lsr	r21
    1020:	47 95       	ror	r20
    1022:	56 95       	lsr	r21
    1024:	47 95       	ror	r20
    1026:	9a 01       	movw	r18, r20
    1028:	5e d5       	rcall	.+2748   	; 0x1ae6 <__umulhisi3>
    102a:	96 95       	lsr	r25
    102c:	87 95       	ror	r24
    102e:	96 95       	lsr	r25
    1030:	87 95       	ror	r24
    1032:	96 95       	lsr	r25
    1034:	87 95       	ror	r24
    1036:	9c 01       	movw	r18, r24
    1038:	22 0f       	add	r18, r18
    103a:	33 1f       	adc	r19, r19
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	82 0f       	add	r24, r18
    104a:	93 1f       	adc	r25, r19
    104c:	9a 01       	movw	r18, r20
    104e:	28 1b       	sub	r18, r24
    1050:	39 0b       	sbc	r19, r25
    1052:	c9 01       	movw	r24, r18
    1054:	80 5d       	subi	r24, 0xD0	; 208
    1056:	6d d8       	rcall	.-3878   	; 0x132 <LCD_CHAR>
	LCD_CHAR((year)%10+'0');
    1058:	40 91 7e 02 	lds	r20, 0x027E	; 0x80027e <year>
    105c:	50 91 7f 02 	lds	r21, 0x027F	; 0x80027f <year+0x1>
    1060:	9a 01       	movw	r18, r20
    1062:	ad ec       	ldi	r26, 0xCD	; 205
    1064:	bc ec       	ldi	r27, 0xCC	; 204
    1066:	3f d5       	rcall	.+2686   	; 0x1ae6 <__umulhisi3>
    1068:	96 95       	lsr	r25
    106a:	87 95       	ror	r24
    106c:	96 95       	lsr	r25
    106e:	87 95       	ror	r24
    1070:	96 95       	lsr	r25
    1072:	87 95       	ror	r24
    1074:	9c 01       	movw	r18, r24
    1076:	22 0f       	add	r18, r18
    1078:	33 1f       	adc	r19, r19
    107a:	88 0f       	add	r24, r24
    107c:	99 1f       	adc	r25, r25
    107e:	88 0f       	add	r24, r24
    1080:	99 1f       	adc	r25, r25
    1082:	88 0f       	add	r24, r24
    1084:	99 1f       	adc	r25, r25
    1086:	82 0f       	add	r24, r18
    1088:	93 1f       	adc	r25, r19
    108a:	9a 01       	movw	r18, r20
    108c:	28 1b       	sub	r18, r24
    108e:	39 0b       	sbc	r19, r25
    1090:	c9 01       	movw	r24, r18
    1092:	80 5d       	subi	r24, 0xD0	; 208
    1094:	4e d8       	rcall	.-3940   	; 0x132 <LCD_CHAR>
    1096:	85 e8       	ldi	r24, 0x85	; 133
    1098:	36 d8       	rcall	.-3988   	; 0x106 <LCD_Comm>
    109a:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <day>
	
	
	// displaying day and month in form of "d/m"
	LCD_pos(5,0);
	if ((day/10)>0)
    109e:	8a 30       	cpi	r24, 0x0A	; 10
    10a0:	d0 f0       	brcs	.+52     	; 0x10d6 <display_normal_mode+0x172>
	{
		LCD_CHAR((day/10)+'0');
    10a2:	1d ec       	ldi	r17, 0xCD	; 205
    10a4:	81 9f       	mul	r24, r17
    10a6:	81 2d       	mov	r24, r1
    10a8:	11 24       	eor	r1, r1
    10aa:	86 95       	lsr	r24
    10ac:	86 95       	lsr	r24
    10ae:	86 95       	lsr	r24
    10b0:	80 5d       	subi	r24, 0xD0	; 208
    10b2:	3f d8       	rcall	.-3970   	; 0x132 <LCD_CHAR>
    10b4:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <day>
		LCD_CHAR((day%10)+'0');
    10b8:	81 9f       	mul	r24, r17
    10ba:	11 2d       	mov	r17, r1
    10bc:	11 24       	eor	r1, r1
    10be:	16 95       	lsr	r17
    10c0:	16 95       	lsr	r17
    10c2:	16 95       	lsr	r17
    10c4:	11 0f       	add	r17, r17
    10c6:	91 2f       	mov	r25, r17
    10c8:	99 0f       	add	r25, r25
    10ca:	99 0f       	add	r25, r25
    10cc:	19 0f       	add	r17, r25
    10ce:	81 1b       	sub	r24, r17
    10d0:	80 5d       	subi	r24, 0xD0	; 208
	}
	else
	{
		LCD_CHAR('0');
    10d2:	2f d8       	rcall	.-4002   	; 0x132 <LCD_CHAR>
    10d4:	06 c0       	rjmp	.+12     	; 0x10e2 <display_normal_mode+0x17e>
    10d6:	80 e3       	ldi	r24, 0x30	; 48
		LCD_CHAR((day)+'0');
    10d8:	2c d8       	rcall	.-4008   	; 0x132 <LCD_CHAR>
    10da:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <day>
    10de:	80 5d       	subi	r24, 0xD0	; 208
	}
	LCD_CHAR('/');
    10e0:	28 d8       	rcall	.-4016   	; 0x132 <LCD_CHAR>
    10e2:	8f e2       	ldi	r24, 0x2F	; 47
    10e4:	26 d8       	rcall	.-4020   	; 0x132 <LCD_CHAR>
	
	if ((month/10)>0)
    10e6:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <month>
    10ea:	8a 30       	cpi	r24, 0x0A	; 10
    10ec:	d0 f0       	brcs	.+52     	; 0x1122 <__stack+0x23>
	{
		LCD_CHAR((month/10)+'0');
    10ee:	1d ec       	ldi	r17, 0xCD	; 205
    10f0:	81 9f       	mul	r24, r17
    10f2:	81 2d       	mov	r24, r1
    10f4:	11 24       	eor	r1, r1
    10f6:	86 95       	lsr	r24
    10f8:	86 95       	lsr	r24
    10fa:	86 95       	lsr	r24
    10fc:	80 5d       	subi	r24, 0xD0	; 208
    10fe:	19 d8       	rcall	.-4046   	; 0x132 <LCD_CHAR>
		LCD_CHAR((month%10)+'0');
    1100:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <month>
    1104:	81 9f       	mul	r24, r17
    1106:	11 2d       	mov	r17, r1
    1108:	11 24       	eor	r1, r1
    110a:	16 95       	lsr	r17
    110c:	16 95       	lsr	r17
    110e:	16 95       	lsr	r17
    1110:	11 0f       	add	r17, r17
    1112:	91 2f       	mov	r25, r17
    1114:	99 0f       	add	r25, r25
    1116:	99 0f       	add	r25, r25
    1118:	19 0f       	add	r17, r25
    111a:	81 1b       	sub	r24, r17
    111c:	80 5d       	subi	r24, 0xD0	; 208
    111e:	09 d8       	rcall	.-4078   	; 0x132 <LCD_CHAR>
	}
	else
	{
		LCD_CHAR('0');
    1120:	06 c0       	rjmp	.+12     	; 0x112e <__stack+0x2f>
    1122:	80 e3       	ldi	r24, 0x30	; 48
    1124:	06 d8       	rcall	.-4084   	; 0x132 <LCD_CHAR>
		LCD_CHAR((month)+'0');
    1126:	80 91 76 02 	lds	r24, 0x0276	; 0x800276 <month>
    112a:	80 5d       	subi	r24, 0xD0	; 208
    112c:	02 d8       	rcall	.-4092   	; 0x132 <LCD_CHAR>
    112e:	8b e8       	ldi	r24, 0x8B	; 139
    1130:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	
	//////////////////////////////////////////////////////////////////////////
	
	// displaying week days
	LCD_pos(11,0);
	switch(week_day)
    1134:	e0 91 7c 02 	lds	r30, 0x027C	; 0x80027c <week_day>
    1138:	8e 2f       	mov	r24, r30
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	fc 01       	movw	r30, r24
    113e:	31 97       	sbiw	r30, 0x01	; 1
    1140:	e7 30       	cpi	r30, 0x07	; 7
    1142:	f1 05       	cpc	r31, r1
    1144:	28 f5       	brcc	.+74     	; 0x1190 <__stack+0x91>
    1146:	ea 5b       	subi	r30, 0xBA	; 186
    1148:	ff 4f       	sbci	r31, 0xFF	; 255
    114a:	c4 c4       	rjmp	.+2440   	; 0x1ad4 <__tablejump2__>
    114c:	89 ea       	ldi	r24, 0xA9	; 169
	{
		case 1: LCD_STR("Mon"); break;
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1154:	1d c0       	rjmp	.+58     	; 0x1190 <__stack+0x91>
    1156:	8d ea       	ldi	r24, 0xAD	; 173
		case 2: LCD_STR("Tue"); break;
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    115e:	18 c0       	rjmp	.+48     	; 0x1190 <__stack+0x91>
    1160:	81 eb       	ldi	r24, 0xB1	; 177
		case 3: LCD_STR("Wen"); break;
    1162:	91 e0       	ldi	r25, 0x01	; 1
    1164:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1168:	13 c0       	rjmp	.+38     	; 0x1190 <__stack+0x91>
    116a:	85 eb       	ldi	r24, 0xB5	; 181
		case 4: LCD_STR("Thu"); break;
    116c:	91 e0       	ldi	r25, 0x01	; 1
    116e:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1172:	0e c0       	rjmp	.+28     	; 0x1190 <__stack+0x91>
    1174:	89 eb       	ldi	r24, 0xB9	; 185
		case 5: LCD_STR("Fri"); break;
    1176:	91 e0       	ldi	r25, 0x01	; 1
    1178:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    117c:	09 c0       	rjmp	.+18     	; 0x1190 <__stack+0x91>
    117e:	8d eb       	ldi	r24, 0xBD	; 189
		case 6: LCD_STR("Sat"); break;
    1180:	91 e0       	ldi	r25, 0x01	; 1
    1182:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1186:	04 c0       	rjmp	.+8      	; 0x1190 <__stack+0x91>
    1188:	81 ec       	ldi	r24, 0xC1	; 193
		case 7: LCD_STR("Sun"); break;
    118a:	91 e0       	ldi	r25, 0x01	; 1
    118c:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1190:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <hour>
	}
	//////////////////////////////////////////////////////////////////////////
	
	// displaying hours
	if(hour>12)
    1194:	8d 30       	cpi	r24, 0x0D	; 13
    1196:	18 f1       	brcs	.+70     	; 0x11de <__stack+0xdf>
    1198:	80 ec       	ldi	r24, 0xC0	; 192
    119a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
    119e:	ce 01       	movw	r24, r28
	{
		LCD_pos(0,1);
		LCD_STR(PM);
    11a0:	04 96       	adiw	r24, 0x04	; 4
    11a2:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    11a6:	83 ec       	ldi	r24, 0xC3	; 195
    11a8:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		LCD_pos(3,1);
		LCD_CHAR((hour-12)/10+'0');
    11ac:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <hour>
    11b0:	90 e0       	ldi	r25, 0x00	; 0
    11b2:	0c 97       	sbiw	r24, 0x0c	; 12
    11b4:	0a e0       	ldi	r16, 0x0A	; 10
    11b6:	10 e0       	ldi	r17, 0x00	; 0
    11b8:	b8 01       	movw	r22, r16
    11ba:	79 d4       	rcall	.+2290   	; 0x1aae <__divmodhi4>
    11bc:	80 e3       	ldi	r24, 0x30	; 48
    11be:	86 0f       	add	r24, r22
    11c0:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((hour-12)%10+'0');
    11c4:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <hour>
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0c 97       	sbiw	r24, 0x0c	; 12
    11cc:	b8 01       	movw	r22, r16
    11ce:	6f d4       	rcall	.+2270   	; 0x1aae <__divmodhi4>
    11d0:	80 5d       	subi	r24, 0xD0	; 208
    11d2:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    11d6:	8a e3       	ldi	r24, 0x3A	; 58
		LCD_CHAR(':');
    11d8:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    11dc:	2a c0       	rjmp	.+84     	; 0x1232 <__stack+0x133>
    11de:	80 ec       	ldi	r24, 0xC0	; 192
    11e0:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
    11e4:	ce 01       	movw	r24, r28
		
	}
	else
	{
		LCD_pos(0,1);
		LCD_STR(AM);
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    11ec:	83 ec       	ldi	r24, 0xC3	; 195
    11ee:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
    11f2:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <hour>
		LCD_pos(3,1);
		LCD_CHAR((hour)/10+'0');
    11f6:	1d ec       	ldi	r17, 0xCD	; 205
    11f8:	81 9f       	mul	r24, r17
    11fa:	81 2d       	mov	r24, r1
    11fc:	11 24       	eor	r1, r1
    11fe:	86 95       	lsr	r24
    1200:	86 95       	lsr	r24
    1202:	86 95       	lsr	r24
    1204:	80 5d       	subi	r24, 0xD0	; 208
    1206:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    120a:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <hour>
		LCD_CHAR((hour)%10+'0');
    120e:	81 9f       	mul	r24, r17
    1210:	11 2d       	mov	r17, r1
    1212:	11 24       	eor	r1, r1
    1214:	16 95       	lsr	r17
    1216:	16 95       	lsr	r17
    1218:	16 95       	lsr	r17
    121a:	11 0f       	add	r17, r17
    121c:	91 2f       	mov	r25, r17
    121e:	99 0f       	add	r25, r25
    1220:	99 0f       	add	r25, r25
    1222:	19 0f       	add	r17, r25
    1224:	81 1b       	sub	r24, r17
    1226:	80 5d       	subi	r24, 0xD0	; 208
    1228:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    122c:	8a e3       	ldi	r24, 0x3A	; 58
		LCD_CHAR(':');
    122e:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1232:	86 ec       	ldi	r24, 0xC6	; 198
    1234:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
    1238:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <min>
	}
	
	// min displaying
	LCD_pos(6,1);
	LCD_CHAR((min/10)+'0');
    123c:	1d ec       	ldi	r17, 0xCD	; 205
    123e:	81 9f       	mul	r24, r17
    1240:	81 2d       	mov	r24, r1
    1242:	11 24       	eor	r1, r1
    1244:	86 95       	lsr	r24
    1246:	86 95       	lsr	r24
    1248:	86 95       	lsr	r24
    124a:	80 5d       	subi	r24, 0xD0	; 208
    124c:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1250:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <min>
	LCD_CHAR((min%10)+'0');
    1254:	81 9f       	mul	r24, r17
    1256:	91 2d       	mov	r25, r1
    1258:	11 24       	eor	r1, r1
    125a:	96 95       	lsr	r25
    125c:	96 95       	lsr	r25
    125e:	96 95       	lsr	r25
    1260:	99 0f       	add	r25, r25
    1262:	29 2f       	mov	r18, r25
    1264:	22 0f       	add	r18, r18
    1266:	22 0f       	add	r18, r18
    1268:	92 0f       	add	r25, r18
    126a:	89 1b       	sub	r24, r25
    126c:	80 5d       	subi	r24, 0xD0	; 208
    126e:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1272:	8a e3       	ldi	r24, 0x3A	; 58
	LCD_CHAR(':');
    1274:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1278:	89 ec       	ldi	r24, 0xC9	; 201
    127a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
    127e:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <sec>
	
	// sec displaying
	LCD_pos(9, 1);
	LCD_CHAR((sec/10)+'0');
    1282:	81 9f       	mul	r24, r17
    1284:	81 2d       	mov	r24, r1
    1286:	11 24       	eor	r1, r1
    1288:	86 95       	lsr	r24
    128a:	86 95       	lsr	r24
    128c:	86 95       	lsr	r24
    128e:	80 5d       	subi	r24, 0xD0	; 208
    1290:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1294:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <sec>
	LCD_CHAR((sec%10)+'0');
    1298:	81 9f       	mul	r24, r17
    129a:	11 2d       	mov	r17, r1
    129c:	11 24       	eor	r1, r1
    129e:	16 95       	lsr	r17
    12a0:	16 95       	lsr	r17
    12a2:	16 95       	lsr	r17
    12a4:	11 0f       	add	r17, r17
    12a6:	91 2f       	mov	r25, r17
    12a8:	99 0f       	add	r25, r25
    12aa:	99 0f       	add	r25, r25
    12ac:	19 0f       	add	r17, r25
    12ae:	81 1b       	sub	r24, r17
    12b0:	80 5d       	subi	r24, 0xD0	; 208
    12b2:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    12b6:	26 96       	adiw	r28, 0x06	; 6
	
}
    12b8:	0f b6       	in	r0, 0x3f	; 63
    12ba:	f8 94       	cli
    12bc:	de bf       	out	0x3e, r29	; 62
    12be:	0f be       	out	0x3f, r0	; 63
    12c0:	cd bf       	out	0x3d, r28	; 61
    12c2:	df 91       	pop	r29
    12c4:	cf 91       	pop	r28
    12c6:	1f 91       	pop	r17
    12c8:	0f 91       	pop	r16
    12ca:	08 95       	ret

000012cc <display_stop_watch>:
    12cc:	80 e8       	ldi	r24, 0x80	; 128
    12ce:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>

void display_stop_watch(void)
{
	// hour
	LCD_pos(0,0);
	LCD_CHAR((hour_stp_w)/10+'0');
    12d2:	20 91 82 02 	lds	r18, 0x0282	; 0x800282 <hour_stp_w>
    12d6:	30 91 83 02 	lds	r19, 0x0283	; 0x800283 <hour_stp_w+0x1>
    12da:	ad ec       	ldi	r26, 0xCD	; 205
    12dc:	bc ec       	ldi	r27, 0xCC	; 204
    12de:	03 d4       	rcall	.+2054   	; 0x1ae6 <__umulhisi3>
    12e0:	96 95       	lsr	r25
    12e2:	87 95       	ror	r24
    12e4:	96 95       	lsr	r25
    12e6:	87 95       	ror	r24
    12e8:	96 95       	lsr	r25
    12ea:	87 95       	ror	r24
    12ec:	80 5d       	subi	r24, 0xD0	; 208
    12ee:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR((hour_stp_w)%10+'0');
    12f2:	40 91 82 02 	lds	r20, 0x0282	; 0x800282 <hour_stp_w>
    12f6:	50 91 83 02 	lds	r21, 0x0283	; 0x800283 <hour_stp_w+0x1>
    12fa:	9a 01       	movw	r18, r20
    12fc:	ad ec       	ldi	r26, 0xCD	; 205
    12fe:	bc ec       	ldi	r27, 0xCC	; 204
    1300:	f2 d3       	rcall	.+2020   	; 0x1ae6 <__umulhisi3>
    1302:	96 95       	lsr	r25
    1304:	87 95       	ror	r24
    1306:	96 95       	lsr	r25
    1308:	87 95       	ror	r24
    130a:	96 95       	lsr	r25
    130c:	87 95       	ror	r24
    130e:	9c 01       	movw	r18, r24
    1310:	22 0f       	add	r18, r18
    1312:	33 1f       	adc	r19, r19
    1314:	88 0f       	add	r24, r24
    1316:	99 1f       	adc	r25, r25
    1318:	88 0f       	add	r24, r24
    131a:	99 1f       	adc	r25, r25
    131c:	88 0f       	add	r24, r24
    131e:	99 1f       	adc	r25, r25
    1320:	82 0f       	add	r24, r18
    1322:	93 1f       	adc	r25, r19
    1324:	9a 01       	movw	r18, r20
    1326:	28 1b       	sub	r18, r24
    1328:	39 0b       	sbc	r19, r25
    132a:	c9 01       	movw	r24, r18
    132c:	80 5d       	subi	r24, 0xD0	; 208
    132e:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR('h');
    1332:	88 e6       	ldi	r24, 0x68	; 104
    1334:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1338:	83 ec       	ldi	r24, 0xC3	; 195
    133a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	
	// min
	LCD_pos(3,1);
	LCD_CHAR((min_stp_w/10)+'0');
    133e:	20 91 77 02 	lds	r18, 0x0277	; 0x800277 <min_stp_w>
    1342:	30 91 78 02 	lds	r19, 0x0278	; 0x800278 <min_stp_w+0x1>
    1346:	ad ec       	ldi	r26, 0xCD	; 205
    1348:	bc ec       	ldi	r27, 0xCC	; 204
    134a:	cd d3       	rcall	.+1946   	; 0x1ae6 <__umulhisi3>
    134c:	96 95       	lsr	r25
    134e:	87 95       	ror	r24
    1350:	96 95       	lsr	r25
    1352:	87 95       	ror	r24
    1354:	96 95       	lsr	r25
    1356:	87 95       	ror	r24
    1358:	80 5d       	subi	r24, 0xD0	; 208
    135a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR((min_stp_w%10)+'0');
    135e:	40 91 77 02 	lds	r20, 0x0277	; 0x800277 <min_stp_w>
    1362:	50 91 78 02 	lds	r21, 0x0278	; 0x800278 <min_stp_w+0x1>
    1366:	9a 01       	movw	r18, r20
    1368:	ad ec       	ldi	r26, 0xCD	; 205
    136a:	bc ec       	ldi	r27, 0xCC	; 204
    136c:	bc d3       	rcall	.+1912   	; 0x1ae6 <__umulhisi3>
    136e:	96 95       	lsr	r25
    1370:	87 95       	ror	r24
    1372:	96 95       	lsr	r25
    1374:	87 95       	ror	r24
    1376:	96 95       	lsr	r25
    1378:	87 95       	ror	r24
    137a:	9c 01       	movw	r18, r24
    137c:	22 0f       	add	r18, r18
    137e:	33 1f       	adc	r19, r19
    1380:	88 0f       	add	r24, r24
    1382:	99 1f       	adc	r25, r25
    1384:	88 0f       	add	r24, r24
    1386:	99 1f       	adc	r25, r25
    1388:	88 0f       	add	r24, r24
    138a:	99 1f       	adc	r25, r25
    138c:	82 0f       	add	r24, r18
    138e:	93 1f       	adc	r25, r19
    1390:	9a 01       	movw	r18, r20
    1392:	28 1b       	sub	r18, r24
    1394:	39 0b       	sbc	r19, r25
    1396:	c9 01       	movw	r24, r18
    1398:	80 5d       	subi	r24, 0xD0	; 208
    139a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR(':');
    139e:	8a e3       	ldi	r24, 0x3A	; 58
    13a0:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    13a4:	86 ec       	ldi	r24, 0xC6	; 198
    13a6:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	
	// sec
	LCD_pos(6, 1);
	LCD_CHAR((sec_stp_w/10)+'0');
    13aa:	20 91 79 02 	lds	r18, 0x0279	; 0x800279 <sec_stp_w>
    13ae:	30 91 7a 02 	lds	r19, 0x027A	; 0x80027a <sec_stp_w+0x1>
    13b2:	ad ec       	ldi	r26, 0xCD	; 205
    13b4:	bc ec       	ldi	r27, 0xCC	; 204
    13b6:	97 d3       	rcall	.+1838   	; 0x1ae6 <__umulhisi3>
    13b8:	96 95       	lsr	r25
    13ba:	87 95       	ror	r24
    13bc:	96 95       	lsr	r25
    13be:	87 95       	ror	r24
    13c0:	96 95       	lsr	r25
    13c2:	87 95       	ror	r24
    13c4:	80 5d       	subi	r24, 0xD0	; 208
    13c6:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR((sec_stp_w%10)+'0');
    13ca:	40 91 79 02 	lds	r20, 0x0279	; 0x800279 <sec_stp_w>
    13ce:	50 91 7a 02 	lds	r21, 0x027A	; 0x80027a <sec_stp_w+0x1>
    13d2:	9a 01       	movw	r18, r20
    13d4:	ad ec       	ldi	r26, 0xCD	; 205
    13d6:	bc ec       	ldi	r27, 0xCC	; 204
    13d8:	86 d3       	rcall	.+1804   	; 0x1ae6 <__umulhisi3>
    13da:	96 95       	lsr	r25
    13dc:	87 95       	ror	r24
    13de:	96 95       	lsr	r25
    13e0:	87 95       	ror	r24
    13e2:	96 95       	lsr	r25
    13e4:	87 95       	ror	r24
    13e6:	9c 01       	movw	r18, r24
    13e8:	22 0f       	add	r18, r18
    13ea:	33 1f       	adc	r19, r19
    13ec:	88 0f       	add	r24, r24
    13ee:	99 1f       	adc	r25, r25
    13f0:	88 0f       	add	r24, r24
    13f2:	99 1f       	adc	r25, r25
    13f4:	88 0f       	add	r24, r24
    13f6:	99 1f       	adc	r25, r25
    13f8:	82 0f       	add	r24, r18
    13fa:	93 1f       	adc	r25, r19
    13fc:	9a 01       	movw	r18, r20
    13fe:	28 1b       	sub	r18, r24
    1400:	39 0b       	sbc	r19, r25
    1402:	c9 01       	movw	r24, r18
    1404:	80 5d       	subi	r24, 0xD0	; 208
    1406:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR(':');
    140a:	8a e3       	ldi	r24, 0x3A	; 58
    140c:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1410:	89 ec       	ldi	r24, 0xC9	; 201
    1412:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	
	//milliseconds
	LCD_pos(9, 1);
	LCD_CHAR((cnt_stp_w/10)+'0');
    1416:	20 91 84 02 	lds	r18, 0x0284	; 0x800284 <cnt_stp_w>
    141a:	30 91 85 02 	lds	r19, 0x0285	; 0x800285 <cnt_stp_w+0x1>
    141e:	ad ec       	ldi	r26, 0xCD	; 205
    1420:	bc ec       	ldi	r27, 0xCC	; 204
    1422:	61 d3       	rcall	.+1730   	; 0x1ae6 <__umulhisi3>
    1424:	96 95       	lsr	r25
    1426:	87 95       	ror	r24
    1428:	96 95       	lsr	r25
    142a:	87 95       	ror	r24
    142c:	96 95       	lsr	r25
    142e:	87 95       	ror	r24
    1430:	80 5d       	subi	r24, 0xD0	; 208
    1432:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR((cnt_stp_w%10)+'0');
    1436:	40 91 84 02 	lds	r20, 0x0284	; 0x800284 <cnt_stp_w>
    143a:	50 91 85 02 	lds	r21, 0x0285	; 0x800285 <cnt_stp_w+0x1>
    143e:	9a 01       	movw	r18, r20
    1440:	ad ec       	ldi	r26, 0xCD	; 205
    1442:	bc ec       	ldi	r27, 0xCC	; 204
    1444:	50 d3       	rcall	.+1696   	; 0x1ae6 <__umulhisi3>
    1446:	96 95       	lsr	r25
    1448:	87 95       	ror	r24
    144a:	96 95       	lsr	r25
    144c:	87 95       	ror	r24
    144e:	96 95       	lsr	r25
    1450:	87 95       	ror	r24
    1452:	9c 01       	movw	r18, r24
    1454:	22 0f       	add	r18, r18
    1456:	33 1f       	adc	r19, r19
    1458:	88 0f       	add	r24, r24
    145a:	99 1f       	adc	r25, r25
    145c:	88 0f       	add	r24, r24
    145e:	99 1f       	adc	r25, r25
    1460:	88 0f       	add	r24, r24
    1462:	99 1f       	adc	r25, r25
    1464:	82 0f       	add	r24, r18
    1466:	93 1f       	adc	r25, r19
    1468:	9a 01       	movw	r18, r20
    146a:	28 1b       	sub	r18, r24
    146c:	39 0b       	sbc	r19, r25
    146e:	c9 01       	movw	r24, r18
    1470:	80 5d       	subi	r24, 0xD0	; 208
    1472:	0c 94 99 00 	jmp	0x132	; 0x132 <LCD_CHAR>
    1476:	08 95       	ret

00001478 <display_alarm_time>:
	
}

void display_alarm_time(void)
{
    1478:	cf 93       	push	r28
	if (isset_alarm)
    147a:	80 91 6f 02 	lds	r24, 0x026F	; 0x80026f <isset_alarm>
    147e:	88 23       	and	r24, r24
    1480:	09 f4       	brne	.+2      	; 0x1484 <display_alarm_time+0xc>
    1482:	28 c1       	rjmp	.+592    	; 0x16d4 <display_alarm_time+0x25c>
    1484:	82 e8       	ldi	r24, 0x82	; 130
    1486:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	{
		LCD_pos(2,0);
		LCD_STR("ALARM IS ON");
    148a:	85 ec       	ldi	r24, 0xC5	; 197
    148c:	91 e0       	ldi	r25, 0x01	; 1
    148e:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1492:	80 ec       	ldi	r24, 0xC0	; 192
    1494:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		
		LCD_pos(0,1);
		LCD_CHAR((year_alarm)/1000+'0');
    1498:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <year_alarm>
    149c:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <year_alarm+0x1>
    14a0:	36 95       	lsr	r19
    14a2:	27 95       	ror	r18
    14a4:	36 95       	lsr	r19
    14a6:	27 95       	ror	r18
    14a8:	36 95       	lsr	r19
    14aa:	27 95       	ror	r18
    14ac:	a5 ec       	ldi	r26, 0xC5	; 197
    14ae:	b0 e2       	ldi	r27, 0x20	; 32
    14b0:	1a d3       	rcall	.+1588   	; 0x1ae6 <__umulhisi3>
    14b2:	92 95       	swap	r25
    14b4:	82 95       	swap	r24
    14b6:	8f 70       	andi	r24, 0x0F	; 15
    14b8:	89 27       	eor	r24, r25
    14ba:	9f 70       	andi	r25, 0x0F	; 15
    14bc:	89 27       	eor	r24, r25
    14be:	80 5d       	subi	r24, 0xD0	; 208
    14c0:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((year_alarm/100)%10+'0');
    14c4:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <year_alarm>
    14c8:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <year_alarm+0x1>
    14cc:	36 95       	lsr	r19
    14ce:	27 95       	ror	r18
    14d0:	36 95       	lsr	r19
    14d2:	27 95       	ror	r18
    14d4:	ab e7       	ldi	r26, 0x7B	; 123
    14d6:	b4 e1       	ldi	r27, 0x14	; 20
    14d8:	06 d3       	rcall	.+1548   	; 0x1ae6 <__umulhisi3>
    14da:	ac 01       	movw	r20, r24
    14dc:	56 95       	lsr	r21
    14de:	47 95       	ror	r20
    14e0:	9a 01       	movw	r18, r20
    14e2:	ad ec       	ldi	r26, 0xCD	; 205
    14e4:	bc ec       	ldi	r27, 0xCC	; 204
    14e6:	ff d2       	rcall	.+1534   	; 0x1ae6 <__umulhisi3>
    14e8:	96 95       	lsr	r25
    14ea:	87 95       	ror	r24
    14ec:	96 95       	lsr	r25
    14ee:	87 95       	ror	r24
    14f0:	96 95       	lsr	r25
    14f2:	87 95       	ror	r24
    14f4:	9c 01       	movw	r18, r24
    14f6:	22 0f       	add	r18, r18
    14f8:	33 1f       	adc	r19, r19
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	88 0f       	add	r24, r24
    1500:	99 1f       	adc	r25, r25
    1502:	88 0f       	add	r24, r24
    1504:	99 1f       	adc	r25, r25
    1506:	82 0f       	add	r24, r18
    1508:	93 1f       	adc	r25, r19
    150a:	9a 01       	movw	r18, r20
    150c:	28 1b       	sub	r18, r24
    150e:	39 0b       	sbc	r19, r25
    1510:	c9 01       	movw	r24, r18
    1512:	80 5d       	subi	r24, 0xD0	; 208
    1514:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((year_alarm/10)%10+'0');
    1518:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <year_alarm>
    151c:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <year_alarm+0x1>
    1520:	ad ec       	ldi	r26, 0xCD	; 205
    1522:	bc ec       	ldi	r27, 0xCC	; 204
    1524:	e0 d2       	rcall	.+1472   	; 0x1ae6 <__umulhisi3>
    1526:	ac 01       	movw	r20, r24
    1528:	56 95       	lsr	r21
    152a:	47 95       	ror	r20
    152c:	56 95       	lsr	r21
    152e:	47 95       	ror	r20
    1530:	56 95       	lsr	r21
    1532:	47 95       	ror	r20
    1534:	9a 01       	movw	r18, r20
    1536:	d7 d2       	rcall	.+1454   	; 0x1ae6 <__umulhisi3>
    1538:	96 95       	lsr	r25
    153a:	87 95       	ror	r24
    153c:	96 95       	lsr	r25
    153e:	87 95       	ror	r24
    1540:	96 95       	lsr	r25
    1542:	87 95       	ror	r24
    1544:	9c 01       	movw	r18, r24
    1546:	22 0f       	add	r18, r18
    1548:	33 1f       	adc	r19, r19
    154a:	88 0f       	add	r24, r24
    154c:	99 1f       	adc	r25, r25
    154e:	88 0f       	add	r24, r24
    1550:	99 1f       	adc	r25, r25
    1552:	88 0f       	add	r24, r24
    1554:	99 1f       	adc	r25, r25
    1556:	82 0f       	add	r24, r18
    1558:	93 1f       	adc	r25, r19
    155a:	9a 01       	movw	r18, r20
    155c:	28 1b       	sub	r18, r24
    155e:	39 0b       	sbc	r19, r25
    1560:	c9 01       	movw	r24, r18
    1562:	80 5d       	subi	r24, 0xD0	; 208
    1564:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((year_alarm)%10+'0');
    1568:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <year_alarm>
    156c:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <year_alarm+0x1>
    1570:	9a 01       	movw	r18, r20
    1572:	ad ec       	ldi	r26, 0xCD	; 205
    1574:	bc ec       	ldi	r27, 0xCC	; 204
    1576:	b7 d2       	rcall	.+1390   	; 0x1ae6 <__umulhisi3>
    1578:	96 95       	lsr	r25
    157a:	87 95       	ror	r24
    157c:	96 95       	lsr	r25
    157e:	87 95       	ror	r24
    1580:	96 95       	lsr	r25
    1582:	87 95       	ror	r24
    1584:	9c 01       	movw	r18, r24
    1586:	22 0f       	add	r18, r18
    1588:	33 1f       	adc	r19, r19
    158a:	88 0f       	add	r24, r24
    158c:	99 1f       	adc	r25, r25
    158e:	88 0f       	add	r24, r24
    1590:	99 1f       	adc	r25, r25
    1592:	88 0f       	add	r24, r24
    1594:	99 1f       	adc	r25, r25
    1596:	82 0f       	add	r24, r18
    1598:	93 1f       	adc	r25, r19
    159a:	9a 01       	movw	r18, r20
    159c:	28 1b       	sub	r18, r24
    159e:	39 0b       	sbc	r19, r25
    15a0:	c9 01       	movw	r24, r18
    15a2:	80 5d       	subi	r24, 0xD0	; 208
    15a4:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR(' ');
    15a8:	80 e2       	ldi	r24, 0x20	; 32
    15aa:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		if ((day_alarm/10)>0)
    15ae:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <day_alarm>
    15b2:	8a 30       	cpi	r24, 0x0A	; 10
    15b4:	e0 f0       	brcs	.+56     	; 0x15ee <display_alarm_time+0x176>
		{
			LCD_CHAR((day_alarm/10)+'0');
    15b6:	cd ec       	ldi	r28, 0xCD	; 205
    15b8:	8c 9f       	mul	r24, r28
    15ba:	81 2d       	mov	r24, r1
    15bc:	11 24       	eor	r1, r1
    15be:	86 95       	lsr	r24
    15c0:	86 95       	lsr	r24
    15c2:	86 95       	lsr	r24
    15c4:	80 5d       	subi	r24, 0xD0	; 208
    15c6:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
			LCD_CHAR((day_alarm%10)+'0');
    15ca:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <day_alarm>
    15ce:	8c 9f       	mul	r24, r28
    15d0:	c1 2d       	mov	r28, r1
    15d2:	11 24       	eor	r1, r1
    15d4:	c6 95       	lsr	r28
    15d6:	c6 95       	lsr	r28
    15d8:	c6 95       	lsr	r28
    15da:	cc 0f       	add	r28, r28
    15dc:	9c 2f       	mov	r25, r28
    15de:	99 0f       	add	r25, r25
    15e0:	99 0f       	add	r25, r25
    15e2:	c9 0f       	add	r28, r25
    15e4:	8c 1b       	sub	r24, r28
    15e6:	80 5d       	subi	r24, 0xD0	; 208
    15e8:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    15ec:	08 c0       	rjmp	.+16     	; 0x15fe <display_alarm_time+0x186>
		}
		else
		{
			LCD_CHAR('0');
    15ee:	80 e3       	ldi	r24, 0x30	; 48
    15f0:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
			LCD_CHAR((day_alarm)+'0');
    15f4:	80 91 71 02 	lds	r24, 0x0271	; 0x800271 <day_alarm>
    15f8:	80 5d       	subi	r24, 0xD0	; 208
    15fa:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		}
		LCD_CHAR('/');
    15fe:	8f e2       	ldi	r24, 0x2F	; 47
    1600:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		
		if ((month_alarm/10)>0)
    1604:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <month_alarm>
    1608:	8a 30       	cpi	r24, 0x0A	; 10
    160a:	e0 f0       	brcs	.+56     	; 0x1644 <display_alarm_time+0x1cc>
		{
			LCD_CHAR((month_alarm/10)+'0');
    160c:	cd ec       	ldi	r28, 0xCD	; 205
    160e:	8c 9f       	mul	r24, r28
    1610:	81 2d       	mov	r24, r1
    1612:	11 24       	eor	r1, r1
    1614:	86 95       	lsr	r24
    1616:	86 95       	lsr	r24
    1618:	86 95       	lsr	r24
    161a:	80 5d       	subi	r24, 0xD0	; 208
    161c:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
			LCD_CHAR((month_alarm%10)+'0');
    1620:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <month_alarm>
    1624:	8c 9f       	mul	r24, r28
    1626:	c1 2d       	mov	r28, r1
    1628:	11 24       	eor	r1, r1
    162a:	c6 95       	lsr	r28
    162c:	c6 95       	lsr	r28
    162e:	c6 95       	lsr	r28
    1630:	cc 0f       	add	r28, r28
    1632:	9c 2f       	mov	r25, r28
    1634:	99 0f       	add	r25, r25
    1636:	99 0f       	add	r25, r25
    1638:	c9 0f       	add	r28, r25
    163a:	8c 1b       	sub	r24, r28
    163c:	80 5d       	subi	r24, 0xD0	; 208
    163e:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1642:	08 c0       	rjmp	.+16     	; 0x1654 <display_alarm_time+0x1dc>
		}
		else
		{
			LCD_CHAR('0');
    1644:	80 e3       	ldi	r24, 0x30	; 48
    1646:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
			LCD_CHAR((month_alarm)+'0');
    164a:	80 91 70 02 	lds	r24, 0x0270	; 0x800270 <month_alarm>
    164e:	80 5d       	subi	r24, 0xD0	; 208
    1650:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		}
		LCD_CHAR(' ');
    1654:	80 e2       	ldi	r24, 0x20	; 32
    1656:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((hour_alarm)/10+'0');
    165a:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <hour_alarm>
    165e:	cd ec       	ldi	r28, 0xCD	; 205
    1660:	8c 9f       	mul	r24, r28
    1662:	81 2d       	mov	r24, r1
    1664:	11 24       	eor	r1, r1
    1666:	86 95       	lsr	r24
    1668:	86 95       	lsr	r24
    166a:	86 95       	lsr	r24
    166c:	80 5d       	subi	r24, 0xD0	; 208
    166e:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((hour_alarm)%10+'0');
    1672:	80 91 72 02 	lds	r24, 0x0272	; 0x800272 <hour_alarm>
    1676:	8c 9f       	mul	r24, r28
    1678:	91 2d       	mov	r25, r1
    167a:	11 24       	eor	r1, r1
    167c:	96 95       	lsr	r25
    167e:	96 95       	lsr	r25
    1680:	96 95       	lsr	r25
    1682:	99 0f       	add	r25, r25
    1684:	29 2f       	mov	r18, r25
    1686:	22 0f       	add	r18, r18
    1688:	22 0f       	add	r18, r18
    168a:	92 0f       	add	r25, r18
    168c:	89 1b       	sub	r24, r25
    168e:	80 5d       	subi	r24, 0xD0	; 208
    1690:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR(':');
    1694:	8a e3       	ldi	r24, 0x3A	; 58
    1696:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((min_alarm)/10+'0');
    169a:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <min_alarm>
    169e:	8c 9f       	mul	r24, r28
    16a0:	81 2d       	mov	r24, r1
    16a2:	11 24       	eor	r1, r1
    16a4:	86 95       	lsr	r24
    16a6:	86 95       	lsr	r24
    16a8:	86 95       	lsr	r24
    16aa:	80 5d       	subi	r24, 0xD0	; 208
    16ac:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((min_alarm)%10+'0');
    16b0:	80 91 73 02 	lds	r24, 0x0273	; 0x800273 <min_alarm>
    16b4:	8c 9f       	mul	r24, r28
    16b6:	c1 2d       	mov	r28, r1
    16b8:	11 24       	eor	r1, r1
    16ba:	c6 95       	lsr	r28
    16bc:	c6 95       	lsr	r28
    16be:	c6 95       	lsr	r28
    16c0:	cc 0f       	add	r28, r28
    16c2:	9c 2f       	mov	r25, r28
    16c4:	99 0f       	add	r25, r25
    16c6:	99 0f       	add	r25, r25
    16c8:	c9 0f       	add	r28, r25
    16ca:	8c 1b       	sub	r24, r28
    16cc:	80 5d       	subi	r24, 0xD0	; 208
    16ce:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    16d2:	02 c0       	rjmp	.+4      	; 0x16d8 <display_alarm_time+0x260>
		
	}
	else
	{
		alarm_clock_display();
    16d4:	0e 94 57 02 	call	0x4ae	; 0x4ae <alarm_clock_display>
	}
}
    16d8:	cf 91       	pop	r28
    16da:	08 95       	ret

000016dc <time_setup>:
void time_setup(void)
{
    16dc:	cf 93       	push	r28
	switch(step_time_set)
    16de:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <step_time_set>
    16e2:	83 30       	cpi	r24, 0x03	; 3
    16e4:	09 f4       	brne	.+2      	; 0x16e8 <time_setup+0xc>
    16e6:	b9 c0       	rjmp	.+370    	; 0x185a <time_setup+0x17e>
    16e8:	30 f4       	brcc	.+12     	; 0x16f6 <time_setup+0x1a>
    16ea:	81 30       	cpi	r24, 0x01	; 1
    16ec:	69 f0       	breq	.+26     	; 0x1708 <time_setup+0x2c>
    16ee:	82 30       	cpi	r24, 0x02	; 2
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <time_setup+0x18>
    16f2:	9d c0       	rjmp	.+314    	; 0x182e <time_setup+0x152>
    16f4:	3f c1       	rjmp	.+638    	; 0x1974 <time_setup+0x298>
    16f6:	85 30       	cpi	r24, 0x05	; 5
    16f8:	09 f4       	brne	.+2      	; 0x16fc <time_setup+0x20>
    16fa:	ff c0       	rjmp	.+510    	; 0x18fa <time_setup+0x21e>
    16fc:	08 f4       	brcc	.+2      	; 0x1700 <time_setup+0x24>
    16fe:	d5 c0       	rjmp	.+426    	; 0x18aa <time_setup+0x1ce>
    1700:	86 30       	cpi	r24, 0x06	; 6
    1702:	09 f4       	brne	.+2      	; 0x1706 <time_setup+0x2a>
    1704:	22 c1       	rjmp	.+580    	; 0x194a <time_setup+0x26e>
    1706:	36 c1       	rjmp	.+620    	; 0x1974 <time_setup+0x298>
    1708:	82 e8       	ldi	r24, 0x82	; 130
    170a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		{
		case 1:
		LCD_pos(2,0);
		LCD_STR("TIME | YEAR ");
    170e:	81 ed       	ldi	r24, 0xD1	; 209
    1710:	91 e0       	ldi	r25, 0x01	; 1
    1712:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1716:	86 ec       	ldi	r24, 0xC6	; 198
    1718:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		LCD_pos(6,1);
		LCD_CHAR((year)/1000+'0');
    171c:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <year>
    1720:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <year+0x1>
    1724:	36 95       	lsr	r19
    1726:	27 95       	ror	r18
    1728:	36 95       	lsr	r19
    172a:	27 95       	ror	r18
    172c:	36 95       	lsr	r19
    172e:	27 95       	ror	r18
    1730:	a5 ec       	ldi	r26, 0xC5	; 197
    1732:	b0 e2       	ldi	r27, 0x20	; 32
    1734:	d8 d1       	rcall	.+944    	; 0x1ae6 <__umulhisi3>
    1736:	92 95       	swap	r25
    1738:	82 95       	swap	r24
    173a:	8f 70       	andi	r24, 0x0F	; 15
    173c:	89 27       	eor	r24, r25
    173e:	9f 70       	andi	r25, 0x0F	; 15
    1740:	89 27       	eor	r24, r25
    1742:	80 5d       	subi	r24, 0xD0	; 208
    1744:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((year/100)%10+'0');
    1748:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <year>
    174c:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <year+0x1>
    1750:	36 95       	lsr	r19
    1752:	27 95       	ror	r18
    1754:	36 95       	lsr	r19
    1756:	27 95       	ror	r18
    1758:	ab e7       	ldi	r26, 0x7B	; 123
    175a:	b4 e1       	ldi	r27, 0x14	; 20
    175c:	c4 d1       	rcall	.+904    	; 0x1ae6 <__umulhisi3>
    175e:	ac 01       	movw	r20, r24
    1760:	56 95       	lsr	r21
    1762:	47 95       	ror	r20
    1764:	9a 01       	movw	r18, r20
    1766:	ad ec       	ldi	r26, 0xCD	; 205
    1768:	bc ec       	ldi	r27, 0xCC	; 204
    176a:	bd d1       	rcall	.+890    	; 0x1ae6 <__umulhisi3>
    176c:	96 95       	lsr	r25
    176e:	87 95       	ror	r24
    1770:	96 95       	lsr	r25
    1772:	87 95       	ror	r24
    1774:	96 95       	lsr	r25
    1776:	87 95       	ror	r24
    1778:	9c 01       	movw	r18, r24
    177a:	22 0f       	add	r18, r18
    177c:	33 1f       	adc	r19, r19
    177e:	88 0f       	add	r24, r24
    1780:	99 1f       	adc	r25, r25
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	82 0f       	add	r24, r18
    178c:	93 1f       	adc	r25, r19
    178e:	9a 01       	movw	r18, r20
    1790:	28 1b       	sub	r18, r24
    1792:	39 0b       	sbc	r19, r25
    1794:	c9 01       	movw	r24, r18
    1796:	80 5d       	subi	r24, 0xD0	; 208
    1798:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((year/10)%10+'0');
    179c:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <year>
    17a0:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <year+0x1>
    17a4:	ad ec       	ldi	r26, 0xCD	; 205
    17a6:	bc ec       	ldi	r27, 0xCC	; 204
    17a8:	9e d1       	rcall	.+828    	; 0x1ae6 <__umulhisi3>
    17aa:	ac 01       	movw	r20, r24
    17ac:	56 95       	lsr	r21
    17ae:	47 95       	ror	r20
    17b0:	56 95       	lsr	r21
    17b2:	47 95       	ror	r20
    17b4:	56 95       	lsr	r21
    17b6:	47 95       	ror	r20
    17b8:	9a 01       	movw	r18, r20
    17ba:	95 d1       	rcall	.+810    	; 0x1ae6 <__umulhisi3>
    17bc:	96 95       	lsr	r25
    17be:	87 95       	ror	r24
    17c0:	96 95       	lsr	r25
    17c2:	87 95       	ror	r24
    17c4:	96 95       	lsr	r25
    17c6:	87 95       	ror	r24
    17c8:	9c 01       	movw	r18, r24
    17ca:	22 0f       	add	r18, r18
    17cc:	33 1f       	adc	r19, r19
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	88 0f       	add	r24, r24
    17d8:	99 1f       	adc	r25, r25
    17da:	82 0f       	add	r24, r18
    17dc:	93 1f       	adc	r25, r19
    17de:	9a 01       	movw	r18, r20
    17e0:	28 1b       	sub	r18, r24
    17e2:	39 0b       	sbc	r19, r25
    17e4:	c9 01       	movw	r24, r18
    17e6:	80 5d       	subi	r24, 0xD0	; 208
    17e8:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((year)%10+'0');
    17ec:	40 91 7e 02 	lds	r20, 0x027E	; 0x80027e <year>
    17f0:	50 91 7f 02 	lds	r21, 0x027F	; 0x80027f <year+0x1>
    17f4:	9a 01       	movw	r18, r20
    17f6:	ad ec       	ldi	r26, 0xCD	; 205
    17f8:	bc ec       	ldi	r27, 0xCC	; 204
    17fa:	75 d1       	rcall	.+746    	; 0x1ae6 <__umulhisi3>
    17fc:	96 95       	lsr	r25
    17fe:	87 95       	ror	r24
    1800:	96 95       	lsr	r25
    1802:	87 95       	ror	r24
    1804:	96 95       	lsr	r25
    1806:	87 95       	ror	r24
    1808:	9c 01       	movw	r18, r24
    180a:	22 0f       	add	r18, r18
    180c:	33 1f       	adc	r19, r19
    180e:	88 0f       	add	r24, r24
    1810:	99 1f       	adc	r25, r25
    1812:	88 0f       	add	r24, r24
    1814:	99 1f       	adc	r25, r25
    1816:	88 0f       	add	r24, r24
    1818:	99 1f       	adc	r25, r25
    181a:	82 0f       	add	r24, r18
    181c:	93 1f       	adc	r25, r19
    181e:	9a 01       	movw	r18, r20
    1820:	28 1b       	sub	r18, r24
    1822:	39 0b       	sbc	r19, r25
    1824:	c9 01       	movw	r24, r18
    1826:	80 5d       	subi	r24, 0xD0	; 208
    1828:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		break;
    182c:	a3 c0       	rjmp	.+326    	; 0x1974 <time_setup+0x298>
    182e:	82 e8       	ldi	r24, 0x82	; 130
    1830:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		
		case 2:
		LCD_pos(2,0);
		LCD_STR("TIME | MONTH ");
    1834:	8e ed       	ldi	r24, 0xDE	; 222
    1836:	91 e0       	ldi	r25, 0x01	; 1
    1838:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    183c:	86 ec       	ldi	r24, 0xC6	; 198
    183e:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		LCD_pos(6,1);
		LCD_STR(month_arr[month-1]);
    1842:	e0 91 76 02 	lds	r30, 0x0276	; 0x800276 <month>
    1846:	f0 e0       	ldi	r31, 0x00	; 0
    1848:	ee 0f       	add	r30, r30
    184a:	ff 1f       	adc	r31, r31
    184c:	eb 5e       	subi	r30, 0xEB	; 235
    184e:	fe 4f       	sbci	r31, 0xFE	; 254
    1850:	80 81       	ld	r24, Z
    1852:	91 81       	ldd	r25, Z+1	; 0x01
    1854:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
		break;
    1858:	8d c0       	rjmp	.+282    	; 0x1974 <time_setup+0x298>
    185a:	82 e8       	ldi	r24, 0x82	; 130
    185c:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		
		case 3:
		LCD_pos(2,0);
		LCD_STR("TIME | DAY ");
    1860:	8c ee       	ldi	r24, 0xEC	; 236
    1862:	91 e0       	ldi	r25, 0x01	; 1
    1864:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1868:	87 ec       	ldi	r24, 0xC7	; 199
    186a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		LCD_pos(7,1);
		LCD_CHAR((day/10)+'0');
    186e:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <day>
    1872:	cd ec       	ldi	r28, 0xCD	; 205
    1874:	8c 9f       	mul	r24, r28
    1876:	81 2d       	mov	r24, r1
    1878:	11 24       	eor	r1, r1
    187a:	86 95       	lsr	r24
    187c:	86 95       	lsr	r24
    187e:	86 95       	lsr	r24
    1880:	80 5d       	subi	r24, 0xD0	; 208
    1882:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((day%10)+'0');
    1886:	80 91 81 02 	lds	r24, 0x0281	; 0x800281 <day>
    188a:	8c 9f       	mul	r24, r28
    188c:	c1 2d       	mov	r28, r1
    188e:	11 24       	eor	r1, r1
    1890:	c6 95       	lsr	r28
    1892:	c6 95       	lsr	r28
    1894:	c6 95       	lsr	r28
    1896:	cc 0f       	add	r28, r28
    1898:	9c 2f       	mov	r25, r28
    189a:	99 0f       	add	r25, r25
    189c:	99 0f       	add	r25, r25
    189e:	c9 0f       	add	r28, r25
    18a0:	8c 1b       	sub	r24, r28
    18a2:	80 5d       	subi	r24, 0xD0	; 208
    18a4:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		break;
    18a8:	65 c0       	rjmp	.+202    	; 0x1974 <time_setup+0x298>
    18aa:	82 e8       	ldi	r24, 0x82	; 130
    18ac:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		
		case 4:
		LCD_pos(2,0);
		LCD_STR("TIME | HOUR");
    18b0:	88 ef       	ldi	r24, 0xF8	; 248
    18b2:	91 e0       	ldi	r25, 0x01	; 1
    18b4:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    18b8:	87 ec       	ldi	r24, 0xC7	; 199
    18ba:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		LCD_pos(7,1);
		LCD_CHAR((hour/10)+'0');
    18be:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <hour>
    18c2:	cd ec       	ldi	r28, 0xCD	; 205
    18c4:	8c 9f       	mul	r24, r28
    18c6:	81 2d       	mov	r24, r1
    18c8:	11 24       	eor	r1, r1
    18ca:	86 95       	lsr	r24
    18cc:	86 95       	lsr	r24
    18ce:	86 95       	lsr	r24
    18d0:	80 5d       	subi	r24, 0xD0	; 208
    18d2:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((hour%10)+'0');
    18d6:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <hour>
    18da:	8c 9f       	mul	r24, r28
    18dc:	c1 2d       	mov	r28, r1
    18de:	11 24       	eor	r1, r1
    18e0:	c6 95       	lsr	r28
    18e2:	c6 95       	lsr	r28
    18e4:	c6 95       	lsr	r28
    18e6:	cc 0f       	add	r28, r28
    18e8:	9c 2f       	mov	r25, r28
    18ea:	99 0f       	add	r25, r25
    18ec:	99 0f       	add	r25, r25
    18ee:	c9 0f       	add	r28, r25
    18f0:	8c 1b       	sub	r24, r28
    18f2:	80 5d       	subi	r24, 0xD0	; 208
    18f4:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		break;
    18f8:	3d c0       	rjmp	.+122    	; 0x1974 <time_setup+0x298>
    18fa:	81 e8       	ldi	r24, 0x81	; 129
    18fc:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>

		case 5:
		LCD_pos(1,0);
		LCD_STR("TIME | MINUTE");
    1900:	84 e0       	ldi	r24, 0x04	; 4
    1902:	92 e0       	ldi	r25, 0x02	; 2
    1904:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1908:	86 ec       	ldi	r24, 0xC6	; 198
    190a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		LCD_pos(6,1);
		LCD_CHAR((min/10)+'0');
    190e:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <min>
    1912:	cd ec       	ldi	r28, 0xCD	; 205
    1914:	8c 9f       	mul	r24, r28
    1916:	81 2d       	mov	r24, r1
    1918:	11 24       	eor	r1, r1
    191a:	86 95       	lsr	r24
    191c:	86 95       	lsr	r24
    191e:	86 95       	lsr	r24
    1920:	80 5d       	subi	r24, 0xD0	; 208
    1922:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((min%10)+'0');
    1926:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <min>
    192a:	8c 9f       	mul	r24, r28
    192c:	c1 2d       	mov	r28, r1
    192e:	11 24       	eor	r1, r1
    1930:	c6 95       	lsr	r28
    1932:	c6 95       	lsr	r28
    1934:	c6 95       	lsr	r28
    1936:	cc 0f       	add	r28, r28
    1938:	9c 2f       	mov	r25, r28
    193a:	99 0f       	add	r25, r25
    193c:	99 0f       	add	r25, r25
    193e:	c9 0f       	add	r28, r25
    1940:	8c 1b       	sub	r24, r28
    1942:	80 5d       	subi	r24, 0xD0	; 208
    1944:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		break;
    1948:	15 c0       	rjmp	.+42     	; 0x1974 <time_setup+0x298>
    194a:	81 e8       	ldi	r24, 0x81	; 129
    194c:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		case 6:
		LCD_pos(1,0);
		LCD_STR("TIME | WEEKDAY");
    1950:	82 e1       	ldi	r24, 0x12	; 18
    1952:	92 e0       	ldi	r25, 0x02	; 2
    1954:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1958:	86 ec       	ldi	r24, 0xC6	; 198
    195a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		LCD_pos(6,1);
		LCD_STR(week_arr[week_day-1]);
    195e:	e0 91 7c 02 	lds	r30, 0x027C	; 0x80027c <week_day>
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	ee 0f       	add	r30, r30
    1966:	ff 1f       	adc	r31, r31
    1968:	e9 5f       	subi	r30, 0xF9	; 249
    196a:	fe 4f       	sbci	r31, 0xFE	; 254
    196c:	80 81       	ld	r24, Z
    196e:	91 81       	ldd	r25, Z+1	; 0x01
    1970:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
		case 7:
		break;
	}


}
    1974:	cf 91       	pop	r28
    1976:	08 95       	ret

00001978 <main>:

int main(void)
{
	cnt=0;
    1978:	10 92 75 02 	sts	0x0275, r1	; 0x800275 <cnt>
	sec=0;
    197c:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <sec>
	min=10;
    1980:	8a e0       	ldi	r24, 0x0A	; 10
    1982:	80 93 7d 02 	sts	0x027D, r24	; 0x80027d <min>
	hour=12;
    1986:	8c e0       	ldi	r24, 0x0C	; 12
    1988:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <hour>
	day = 15;
    198c:	8f e0       	ldi	r24, 0x0F	; 15
    198e:	80 93 81 02 	sts	0x0281, r24	; 0x800281 <day>
	week_day=5;
    1992:	85 e0       	ldi	r24, 0x05	; 5
    1994:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <week_day>
	month = 5;
    1998:	80 93 76 02 	sts	0x0276, r24	; 0x800276 <month>
	year = 2020;
    199c:	84 ee       	ldi	r24, 0xE4	; 228
    199e:	97 e0       	ldi	r25, 0x07	; 7
    19a0:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <year+0x1>
    19a4:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <year>
	
	init_timer();
    19a8:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <init_timer>
	interrupt_init();
    19ac:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <interrupt_init>
	
	// LCD init
	port_init();
    19b0:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <port_init>
	LCD_Init();
    19b4:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_Init>
	LCD_Clear();
    19b8:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
	LCD_Comm(0x0c);
    19bc:	8c e0       	ldi	r24, 0x0C	; 12
    19be:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
    19c2:	8c ec       	ldi	r24, 0xCC	; 204
    19c4:	9c e1       	ldi	r25, 0x1C	; 28
    19c6:	01 97       	sbiw	r24, 0x01	; 1
    19c8:	f1 f7       	brne	.-4      	; 0x19c6 <main+0x4e>
    19ca:	00 c0       	rjmp	.+0      	; 0x19cc <main+0x54>
    19cc:	00 00       	nop
	_delay_ms(2);
	char prev=mode;
	char prev_step = step;
    19ce:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <step>
	char prev_step_time= step_time_set;
    19d2:	f0 90 31 01 	lds	r15, 0x0131	; 0x800131 <step_time_set>
	char was_alarm_on =0;
    /* Replace with your application code */
    while (1) 
    {
		if(mode!=prev)
    19d6:	c0 91 74 02 	lds	r28, 0x0274	; 0x800274 <mode>
	LCD_Comm(0x0c);
	_delay_ms(2);
	char prev=mode;
	char prev_step = step;
	char prev_step_time= step_time_set;
	char was_alarm_on =0;
    19da:	d0 e0       	ldi	r29, 0x00	; 0
    19dc:	dd 24       	eor	r13, r13
    19de:	d3 94       	inc	r13
			was_alarm_on=1;
		}
		if (was_alarm_on==1 && alarm_clock_check_logic(min,hour,day,month,year)==0)
		{
			disable_alarm_clock();
			PORTB = 0xff;
    19e0:	bb 24       	eor	r11, r11
    19e2:	ba 94       	dec	r11
			_delay_ms(2);
			was_alarm_on=0;
    19e4:	c1 2c       	mov	r12, r1
    19e6:	0a c0       	rjmp	.+20     	; 0x19fc <main+0x84>
	char prev_step_time= step_time_set;
	char was_alarm_on =0;
    /* Replace with your application code */
    while (1) 
    {
		if(mode!=prev)
    19e8:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <mode>
    19ec:	c8 17       	cp	r28, r24
    19ee:	29 f0       	breq	.+10     	; 0x19fa <main+0x82>
		{
			LCD_Clear();
    19f0:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
			prev=mode;
    19f4:	c0 91 74 02 	lds	r28, 0x0274	; 0x800274 <mode>
    19f8:	01 c0       	rjmp	.+2      	; 0x19fc <main+0x84>
	char prev_step_time= step_time_set;
	char was_alarm_on =0;
    /* Replace with your application code */
    while (1) 
    {
		if(mode!=prev)
    19fa:	c8 2f       	mov	r28, r24
		{
			LCD_Clear();
			prev=mode;
		}
		if (alarm_clock_check_logic(min,hour,day,month,year)==1)
    19fc:	00 91 7e 02 	lds	r16, 0x027E	; 0x80027e <year>
    1a00:	10 91 7f 02 	lds	r17, 0x027F	; 0x80027f <year+0x1>
    1a04:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <month>
    1a08:	40 91 81 02 	lds	r20, 0x0281	; 0x800281 <day>
    1a0c:	60 91 7b 02 	lds	r22, 0x027B	; 0x80027b <hour>
    1a10:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <min>
    1a14:	0e 94 1b 02 	call	0x436	; 0x436 <alarm_clock_check_logic>
    1a18:	81 30       	cpi	r24, 0x01	; 1
    1a1a:	19 f4       	brne	.+6      	; 0x1a22 <main+0xaa>
		{
			led_blink();
    1a1c:	0e 94 41 02 	call	0x482	; 0x482 <led_blink>
    1a20:	02 c0       	rjmp	.+4      	; 0x1a26 <main+0xae>
			was_alarm_on=1;
		}
		if (was_alarm_on==1 && alarm_clock_check_logic(min,hour,day,month,year)==0)
    1a22:	d1 30       	cpi	r29, 0x01	; 1
    1a24:	e1 f4       	brne	.+56     	; 0x1a5e <main+0xe6>
    1a26:	00 91 7e 02 	lds	r16, 0x027E	; 0x80027e <year>
    1a2a:	10 91 7f 02 	lds	r17, 0x027F	; 0x80027f <year+0x1>
    1a2e:	20 91 76 02 	lds	r18, 0x0276	; 0x800276 <month>
    1a32:	40 91 81 02 	lds	r20, 0x0281	; 0x800281 <day>
    1a36:	60 91 7b 02 	lds	r22, 0x027B	; 0x80027b <hour>
    1a3a:	80 91 7d 02 	lds	r24, 0x027D	; 0x80027d <min>
    1a3e:	0e 94 1b 02 	call	0x436	; 0x436 <alarm_clock_check_logic>
    1a42:	81 11       	cpse	r24, r1
    1a44:	0b c0       	rjmp	.+22     	; 0x1a5c <main+0xe4>
		{
			disable_alarm_clock();
    1a46:	0e 94 51 01 	call	0x2a2	; 0x2a2 <disable_alarm_clock>
			PORTB = 0xff;
    1a4a:	b8 ba       	out	0x18, r11	; 24
    1a4c:	8c ec       	ldi	r24, 0xCC	; 204
    1a4e:	9c e1       	ldi	r25, 0x1C	; 28
    1a50:	01 97       	sbiw	r24, 0x01	; 1
    1a52:	f1 f7       	brne	.-4      	; 0x1a50 <main+0xd8>
    1a54:	00 c0       	rjmp	.+0      	; 0x1a56 <main+0xde>
    1a56:	00 00       	nop
			_delay_ms(2);
			was_alarm_on=0;
    1a58:	dc 2d       	mov	r29, r12
    1a5a:	01 c0       	rjmp	.+2      	; 0x1a5e <main+0xe6>
    1a5c:	dd 2d       	mov	r29, r13
		}
		switch(mode)
    1a5e:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <mode>
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	41 f0       	breq	.+16     	; 0x1a76 <main+0xfe>
    1a66:	28 f0       	brcs	.+10     	; 0x1a72 <main+0xfa>
    1a68:	82 30       	cpi	r24, 0x02	; 2
    1a6a:	39 f0       	breq	.+14     	; 0x1a7a <main+0x102>
    1a6c:	83 30       	cpi	r24, 0x03	; 3
    1a6e:	89 f0       	breq	.+34     	; 0x1a92 <main+0x11a>
    1a70:	1c c0       	rjmp	.+56     	; 0x1aaa <main+0x132>
		{
			case 0: display_normal_mode();break;
    1a72:	78 da       	rcall	.-2832   	; 0xf64 <display_normal_mode>
    1a74:	b9 cf       	rjmp	.-142    	; 0x19e8 <main+0x70>
			case 1: display_stop_watch(); break;
    1a76:	2a dc       	rcall	.-1964   	; 0x12cc <display_stop_watch>
    1a78:	b7 cf       	rjmp	.-146    	; 0x19e8 <main+0x70>
    1a7a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step>
			case 2:	
			if (prev_step!=step)
    1a7e:	8e 15       	cp	r24, r14
    1a80:	31 f0       	breq	.+12     	; 0x1a8e <main+0x116>
    1a82:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
			{
				LCD_Clear();
    1a86:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <cursor_home>
				cursor_home();
    1a8a:	e0 90 06 01 	lds	r14, 0x0106	; 0x800106 <step>
				prev_step=step;
			}
			display_alarm_time();
    1a8e:	f4 dc       	rcall	.-1560   	; 0x1478 <display_alarm_time>
    1a90:	ab cf       	rjmp	.-170    	; 0x19e8 <main+0x70>
			break;
    1a92:	80 91 31 01 	lds	r24, 0x0131	; 0x800131 <step_time_set>

			case 3:
				if (prev_step_time!=step_time_set)
    1a96:	8f 15       	cp	r24, r15
    1a98:	31 f0       	breq	.+12     	; 0x1aa6 <main+0x12e>
    1a9a:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
				{
					LCD_Clear();
    1a9e:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <cursor_home>
					cursor_home();
					prev_step_time=step_time_set;
    1aa2:	f0 90 31 01 	lds	r15, 0x0131	; 0x800131 <step_time_set>
				}
				time_setup();
    1aa6:	1a de       	rcall	.-972    	; 0x16dc <time_setup>
			break;
    1aa8:	9f cf       	rjmp	.-194    	; 0x19e8 <main+0x70>
			default: display_normal_mode(); break;
    1aaa:	5c da       	rcall	.-2888   	; 0xf64 <display_normal_mode>
    1aac:	9d cf       	rjmp	.-198    	; 0x19e8 <main+0x70>

00001aae <__divmodhi4>:
    1aae:	97 fb       	bst	r25, 7
    1ab0:	07 2e       	mov	r0, r23
    1ab2:	16 f4       	brtc	.+4      	; 0x1ab8 <__divmodhi4+0xa>
    1ab4:	00 94       	com	r0
    1ab6:	06 d0       	rcall	.+12     	; 0x1ac4 <__divmodhi4_neg1>
    1ab8:	77 fd       	sbrc	r23, 7
    1aba:	08 d0       	rcall	.+16     	; 0x1acc <__divmodhi4_neg2>
    1abc:	23 d0       	rcall	.+70     	; 0x1b04 <__udivmodhi4>
    1abe:	07 fc       	sbrc	r0, 7
    1ac0:	05 d0       	rcall	.+10     	; 0x1acc <__divmodhi4_neg2>
    1ac2:	3e f4       	brtc	.+14     	; 0x1ad2 <__divmodhi4_exit>

00001ac4 <__divmodhi4_neg1>:
    1ac4:	90 95       	com	r25
    1ac6:	81 95       	neg	r24
    1ac8:	9f 4f       	sbci	r25, 0xFF	; 255
    1aca:	08 95       	ret

00001acc <__divmodhi4_neg2>:
    1acc:	70 95       	com	r23
    1ace:	61 95       	neg	r22
    1ad0:	7f 4f       	sbci	r23, 0xFF	; 255

00001ad2 <__divmodhi4_exit>:
    1ad2:	08 95       	ret

00001ad4 <__tablejump2__>:
    1ad4:	ee 0f       	add	r30, r30
    1ad6:	ff 1f       	adc	r31, r31
    1ad8:	00 24       	eor	r0, r0
    1ada:	00 1c       	adc	r0, r0
    1adc:	0b be       	out	0x3b, r0	; 59
    1ade:	07 90       	elpm	r0, Z+
    1ae0:	f6 91       	elpm	r31, Z
    1ae2:	e0 2d       	mov	r30, r0
    1ae4:	09 94       	ijmp

00001ae6 <__umulhisi3>:
    1ae6:	a2 9f       	mul	r26, r18
    1ae8:	b0 01       	movw	r22, r0
    1aea:	b3 9f       	mul	r27, r19
    1aec:	c0 01       	movw	r24, r0
    1aee:	a3 9f       	mul	r26, r19
    1af0:	70 0d       	add	r23, r0
    1af2:	81 1d       	adc	r24, r1
    1af4:	11 24       	eor	r1, r1
    1af6:	91 1d       	adc	r25, r1
    1af8:	b2 9f       	mul	r27, r18
    1afa:	70 0d       	add	r23, r0
    1afc:	81 1d       	adc	r24, r1
    1afe:	11 24       	eor	r1, r1
    1b00:	91 1d       	adc	r25, r1
    1b02:	08 95       	ret

00001b04 <__udivmodhi4>:
    1b04:	aa 1b       	sub	r26, r26
    1b06:	bb 1b       	sub	r27, r27
    1b08:	51 e1       	ldi	r21, 0x11	; 17
    1b0a:	07 c0       	rjmp	.+14     	; 0x1b1a <__udivmodhi4_ep>

00001b0c <__udivmodhi4_loop>:
    1b0c:	aa 1f       	adc	r26, r26
    1b0e:	bb 1f       	adc	r27, r27
    1b10:	a6 17       	cp	r26, r22
    1b12:	b7 07       	cpc	r27, r23
    1b14:	10 f0       	brcs	.+4      	; 0x1b1a <__udivmodhi4_ep>
    1b16:	a6 1b       	sub	r26, r22
    1b18:	b7 0b       	sbc	r27, r23

00001b1a <__udivmodhi4_ep>:
    1b1a:	88 1f       	adc	r24, r24
    1b1c:	99 1f       	adc	r25, r25
    1b1e:	5a 95       	dec	r21
    1b20:	a9 f7       	brne	.-22     	; 0x1b0c <__udivmodhi4_loop>
    1b22:	80 95       	com	r24
    1b24:	90 95       	com	r25
    1b26:	bc 01       	movw	r22, r24
    1b28:	cd 01       	movw	r24, r26
    1b2a:	08 95       	ret

00001b2c <_exit>:
    1b2c:	f8 94       	cli

00001b2e <__stop_program>:
    1b2e:	ff cf       	rjmp	.-2      	; 0x1b2e <__stop_program>
