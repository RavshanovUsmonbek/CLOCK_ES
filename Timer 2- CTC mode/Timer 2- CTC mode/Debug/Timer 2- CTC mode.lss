
Timer 2- CTC mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  000013a6  0000143a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000013a6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000017  008001da  008001da  00001514  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001514  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f0f  00000000  00000000  00001688  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a44  00000000  00000000  00003597  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e39  00000000  00000000  00003fdb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000038c  00000000  00000000  00004e14  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000677  00000000  00000000  000051a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000112a  00000000  00000000  00005817  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00006941  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	ab c3       	rjmp	.+1878   	; 0x75c <__vector_1>
       6:	00 00       	nop
       8:	53 c4       	rjmp	.+2214   	; 0x8b0 <__vector_2>
       a:	00 00       	nop
       c:	7f c4       	rjmp	.+2302   	; 0x90c <__vector_3>
       e:	00 00       	nop
      10:	36 c5       	rjmp	.+2668   	; 0xa7e <__vector_4>
      12:	00 00       	nop
      14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
      32:	00 00       	nop
      34:	51 c0       	rjmp	.+162    	; 0xd8 <__bad_interrupt>
      36:	00 00       	nop
      38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	61 c3       	rjmp	.+1730   	; 0x700 <__vector_15>
      3e:	00 00       	nop
      40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
      42:	00 00       	nop
      44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
      46:	00 00       	nop
      48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
      62:	00 00       	nop
      64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
      66:	00 00       	nop
      68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	78 06       	cpc	r7, r24
      8e:	7c 06       	cpc	r7, r28
      90:	80 06       	cpc	r8, r16
      92:	84 06       	cpc	r8, r20
      94:	88 06       	cpc	r8, r24
      96:	8c 06       	cpc	r8, r28
      98:	90 06       	cpc	r9, r16

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e1       	ldi	r29, 0x10	; 16
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e6 ea       	ldi	r30, 0xA6	; 166
      ae:	f3 e1       	ldi	r31, 0x13	; 19
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	aa 3d       	cpi	r26, 0xDA	; 218
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	aa ed       	ldi	r26, 0xDA	; 218
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a1 3f       	cpi	r26, 0xF1	; 241
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 0b 09 	call	0x1216	; 0x1216 <main>
      d4:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <_exit>

000000d8 <__bad_interrupt>:
      d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <LCD_Data>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      da:	e5 e6       	ldi	r30, 0x65	; 101
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	90 81       	ld	r25, Z
      e0:	94 60       	ori	r25, 0x04	; 4
      e2:	90 83       	st	Z, r25
      e4:	90 81       	ld	r25, Z
      e6:	9d 7f       	andi	r25, 0xFD	; 253
      e8:	90 83       	st	Z, r25
      ea:	90 81       	ld	r25, Z
      ec:	91 60       	ori	r25, 0x01	; 1
      ee:	90 83       	st	Z, r25
      f0:	96 ef       	ldi	r25, 0xF6	; 246
      f2:	9a 95       	dec	r25
      f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_Data+0x18>
      f6:	8b bb       	out	0x1b, r24	; 27
      f8:	86 ef       	ldi	r24, 0xF6	; 246
      fa:	8a 95       	dec	r24
      fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Data+0x20>
      fe:	80 81       	ld	r24, Z
     100:	8e 7f       	andi	r24, 0xFE	; 254
     102:	80 83       	st	Z, r24
     104:	08 95       	ret

00000106 <LCD_Comm>:
     106:	e5 e6       	ldi	r30, 0x65	; 101
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	90 81       	ld	r25, Z
     10c:	9b 7f       	andi	r25, 0xFB	; 251
     10e:	90 83       	st	Z, r25
     110:	90 81       	ld	r25, Z
     112:	9d 7f       	andi	r25, 0xFD	; 253
     114:	90 83       	st	Z, r25
     116:	90 81       	ld	r25, Z
     118:	91 60       	ori	r25, 0x01	; 1
     11a:	90 83       	st	Z, r25
     11c:	96 ef       	ldi	r25, 0xF6	; 246
     11e:	9a 95       	dec	r25
     120:	f1 f7       	brne	.-4      	; 0x11e <LCD_Comm+0x18>
     122:	8b bb       	out	0x1b, r24	; 27
     124:	86 ef       	ldi	r24, 0xF6	; 246
     126:	8a 95       	dec	r24
     128:	f1 f7       	brne	.-4      	; 0x126 <LCD_Comm+0x20>
     12a:	80 81       	ld	r24, Z
     12c:	8e 7f       	andi	r24, 0xFE	; 254
     12e:	80 83       	st	Z, r24
     130:	08 95       	ret

00000132 <LCD_CHAR>:
     132:	d3 df       	rcall	.-90     	; 0xda <LCD_Data>
     134:	8c ec       	ldi	r24, 0xCC	; 204
     136:	9c e1       	ldi	r25, 0x1C	; 28
     138:	01 97       	sbiw	r24, 0x01	; 1
     13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_CHAR+0x6>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_CHAR+0xc>
     13e:	00 00       	nop
     140:	08 95       	ret

00000142 <LCD_STR>:
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	ec 01       	movw	r28, r24
     148:	88 81       	ld	r24, Y
     14a:	88 23       	and	r24, r24
     14c:	29 f0       	breq	.+10     	; 0x158 <LCD_STR+0x16>
     14e:	21 96       	adiw	r28, 0x01	; 1
     150:	f0 df       	rcall	.-32     	; 0x132 <LCD_CHAR>
     152:	89 91       	ld	r24, Y+
     154:	81 11       	cpse	r24, r1
     156:	fc cf       	rjmp	.-8      	; 0x150 <LCD_STR+0xe>
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <LCD_Clear>:
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Comm>
     162:	8c ec       	ldi	r24, 0xCC	; 204
     164:	9c e1       	ldi	r25, 0x1C	; 28
     166:	01 97       	sbiw	r24, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <LCD_Clear+0x8>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_Clear+0xe>
     16c:	00 00       	nop
     16e:	08 95       	ret

00000170 <LCD_Init>:
     170:	88 e3       	ldi	r24, 0x38	; 56
     172:	c9 df       	rcall	.-110    	; 0x106 <LCD_Comm>
     174:	8c ec       	ldi	r24, 0xCC	; 204
     176:	9c e1       	ldi	r25, 0x1C	; 28
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_Init+0x8>
     17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Init+0xe>
     17e:	00 00       	nop
     180:	88 e3       	ldi	r24, 0x38	; 56
     182:	c1 df       	rcall	.-126    	; 0x106 <LCD_Comm>
     184:	8c ec       	ldi	r24, 0xCC	; 204
     186:	9c e1       	ldi	r25, 0x1C	; 28
     188:	01 97       	sbiw	r24, 0x01	; 1
     18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_Init+0x18>
     18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_Init+0x1e>
     18e:	00 00       	nop
     190:	88 e3       	ldi	r24, 0x38	; 56
     192:	b9 df       	rcall	.-142    	; 0x106 <LCD_Comm>
     194:	8c ec       	ldi	r24, 0xCC	; 204
     196:	9c e1       	ldi	r25, 0x1C	; 28
     198:	01 97       	sbiw	r24, 0x01	; 1
     19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_Init+0x28>
     19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_Init+0x2e>
     19e:	00 00       	nop
     1a0:	8e e0       	ldi	r24, 0x0E	; 14
     1a2:	b1 df       	rcall	.-158    	; 0x106 <LCD_Comm>
     1a4:	8c ec       	ldi	r24, 0xCC	; 204
     1a6:	9c e1       	ldi	r25, 0x1C	; 28
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_Init+0x38>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_Init+0x3e>
     1ae:	00 00       	nop
     1b0:	86 e0       	ldi	r24, 0x06	; 6
     1b2:	a9 df       	rcall	.-174    	; 0x106 <LCD_Comm>
     1b4:	8c ec       	ldi	r24, 0xCC	; 204
     1b6:	9c e1       	ldi	r25, 0x1C	; 28
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_Init+0x48>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_Init+0x4e>
     1be:	00 00       	nop
     1c0:	ce cf       	rjmp	.-100    	; 0x15e <LCD_Clear>
     1c2:	08 95       	ret

000001c4 <cursor_home>:

	}	
}

void cursor_home(void) {
	LCD_Comm(0x02); 
     1c4:	82 e0       	ldi	r24, 0x02	; 2
     1c6:	9f df       	rcall	.-194    	; 0x106 <LCD_Comm>
     1c8:	8c ec       	ldi	r24, 0xCC	; 204
     1ca:	9c e1       	ldi	r25, 0x1C	; 28
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <cursor_home+0x8>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <cursor_home+0xe>
     1d2:	00 00       	nop
     1d4:	08 95       	ret

000001d6 <init_timer>:
ui temp_year=2020;
/////////////////////////////////////////////////////////////////

void init_timer()
{
	TIMSK = 0x02; // output compare interrupt enabled
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	87 bf       	out	0x37, r24	; 55
	TCCR0 = 0x0f; // CTC mode, prescale 1024
     1da:	8f e0       	ldi	r24, 0x0F	; 15
     1dc:	83 bf       	out	0x33, r24	; 51
	OCR0 = 143;
     1de:	8f e8       	ldi	r24, 0x8F	; 143
     1e0:	81 bf       	out	0x31, r24	; 49
     1e2:	08 95       	ret

000001e4 <port_init>:
}
void port_init()
{
	DDRA = 0xff; // lcd port configuration of DDRA and DDRG
     1e4:	8f ef       	ldi	r24, 0xFF	; 255
     1e6:	8a bb       	out	0x1a, r24	; 26
	DDRG = 0x0f;
     1e8:	9f e0       	ldi	r25, 0x0F	; 15
     1ea:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRB = 0xff; // making PORTB as an output port for leds
     1ee:	87 bb       	out	0x17, r24	; 23
	PORTB= 0xff;
     1f0:	88 bb       	out	0x18, r24	; 24
	DDRD = 0x00; // making PORTD as an input port for recieving signals form switches
     1f2:	11 ba       	out	0x11, r1	; 17
     1f4:	08 95       	ret

000001f6 <interrupt_init>:
}
void interrupt_init(void)
{
	EIMSK=0xff; // enabling all interrupts
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	89 bf       	out	0x39, r24	; 57
	EICRA=0xaa;// enabling falling edge trigger for all interrupts
     1fa:	8a ea       	ldi	r24, 0xAA	; 170
     1fc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB=0xaa; 
     200:	8a bf       	out	0x3a, r24	; 58
	sei();   // setting global interrupt on
     202:	78 94       	sei
     204:	08 95       	ret

00000206 <is_leap_year>:
}
char is_leap_year(int y) // utility function for determining leap year
{
     206:	9c 01       	movw	r18, r24
	if(y % 4 == 0)
     208:	83 70       	andi	r24, 0x03	; 3
     20a:	99 27       	eor	r25, r25
     20c:	89 2b       	or	r24, r25
     20e:	91 f4       	brne	.+36     	; 0x234 <is_leap_year+0x2e>
	{
		//Nested if else
		if( y % 100 == 0)
     210:	c9 01       	movw	r24, r18
     212:	64 e6       	ldi	r22, 0x64	; 100
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	0e 94 92 09 	call	0x1324	; 0x1324 <__divmodhi4>
     21a:	89 2b       	or	r24, r25
     21c:	69 f4       	brne	.+26     	; 0x238 <is_leap_year+0x32>
		{
			if ( y % 400 == 0)
				return 1;
     21e:	c9 01       	movw	r24, r18
     220:	60 e9       	ldi	r22, 0x90	; 144
     222:	71 e0       	ldi	r23, 0x01	; 1
     224:	0e 94 92 09 	call	0x1324	; 0x1324 <__divmodhi4>
     228:	9c 01       	movw	r18, r24
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	23 2b       	or	r18, r19
     22e:	29 f0       	breq	.+10     	; 0x23a <is_leap_year+0x34>
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	08 95       	ret
		}
		else
			return 1;
	}
	else
		return 0;
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	08 95       	ret
				return 1;
			else
				return 0;
		}
		else
			return 1;
     238:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return 0;
}
     23a:	08 95       	ret

0000023c <month_day_count>:
int month_day_count(ui month, ui year)
{
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	68 97       	sbiw	r28, 0x18	; 24
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
     254:	8c 01       	movw	r16, r24
	ui const month_days[]={31,28,31,30,31,30,31,31,30,31,30,31};
     256:	98 e1       	ldi	r25, 0x18	; 24
     258:	e3 e2       	ldi	r30, 0x23	; 35
     25a:	f1 e0       	ldi	r31, 0x01	; 1
     25c:	de 01       	movw	r26, r28
     25e:	11 96       	adiw	r26, 0x01	; 1
     260:	01 90       	ld	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	9a 95       	dec	r25
     266:	e1 f7       	brne	.-8      	; 0x260 <month_day_count+0x24>
	if (month==2 && is_leap_year(year))
     268:	02 30       	cpi	r16, 0x02	; 2
     26a:	11 05       	cpc	r17, r1
     26c:	21 f4       	brne	.+8      	; 0x276 <month_day_count+0x3a>
     26e:	cb 01       	movw	r24, r22
     270:	ca df       	rcall	.-108    	; 0x206 <is_leap_year>
     272:	81 11       	cpse	r24, r1
     274:	09 c0       	rjmp	.+18     	; 0x288 <month_day_count+0x4c>
	{
		return 29;
	}
	return month_days[month-1];
     276:	f8 01       	movw	r30, r16
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	ee 0f       	add	r30, r30
     27c:	ff 1f       	adc	r31, r31
     27e:	ec 0f       	add	r30, r28
     280:	fd 1f       	adc	r31, r29
     282:	81 81       	ldd	r24, Z+1	; 0x01
     284:	92 81       	ldd	r25, Z+2	; 0x02
     286:	02 c0       	rjmp	.+4      	; 0x28c <month_day_count+0x50>
int month_day_count(ui month, ui year)
{
	ui const month_days[]={31,28,31,30,31,30,31,31,30,31,30,31};
	if (month==2 && is_leap_year(year))
	{
		return 29;
     288:	8d e1       	ldi	r24, 0x1D	; 29
     28a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return month_days[month-1];
}
     28c:	68 96       	adiw	r28, 0x18	; 24
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	de bf       	out	0x3e, r29	; 62
     294:	0f be       	out	0x3f, r0	; 63
     296:	cd bf       	out	0x3d, r28	; 61
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	08 95       	ret

000002a2 <disable_alarm_clock>:
void disable_alarm_clock(void)
{
			min_alarm=0;
     2a2:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <min_alarm>
			hour_alarm=0;
     2a6:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <hour_alarm>
			day_alarm=0;
     2aa:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <day_alarm>
			month_alarm=0;
     2ae:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <month_alarm>
			year_alarm=0;
     2b2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <year_alarm+0x1>
     2b6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <year_alarm>
			step=1;
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <step>
			isset_alarm=0;
     2c0:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
			temp_year=year;
     2c4:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <year>
     2c8:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <year+0x1>
     2cc:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2d0:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			// clearing temp variables
			for (uch i=0;i<4;i++)
			{
				temp_arr[i]=0;
     2d4:	e2 e0       	ldi	r30, 0x02	; 2
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	10 82       	st	Z, r1
     2da:	11 82       	std	Z+1, r1	; 0x01
				if (i>1)
				{
					temp_arr[i]=1;
     2dc:	82 83       	std	Z+2, r24	; 0x02
     2de:	83 83       	std	Z+3, r24	; 0x03
     2e0:	08 95       	ret

000002e2 <normal_clock_logic>:
				}
			}
}
void normal_clock_logic(void)
{
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
	cnt++;
     2e8:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <cnt>
     2ec:	8f 5f       	subi	r24, 0xFF	; 255
	if(cnt==100)
     2ee:	84 36       	cpi	r24, 0x64	; 100
     2f0:	19 f0       	breq	.+6      	; 0x2f8 <normal_clock_logic+0x16>
				}
			}
}
void normal_clock_logic(void)
{
	cnt++;
     2f2:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <cnt>
     2f6:	54 c0       	rjmp	.+168    	; 0x3a0 <normal_clock_logic+0xbe>
	if(cnt==100)
	{
		cnt=0;
     2f8:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <cnt>
		sec++;
     2fc:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <sec>
     300:	8f 5f       	subi	r24, 0xFF	; 255
     302:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <sec>
		if (sec>=60)
     306:	8c 33       	cpi	r24, 0x3C	; 60
     308:	38 f0       	brcs	.+14     	; 0x318 <normal_clock_logic+0x36>
		{
			min++;
     30a:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <min>
     30e:	8f 5f       	subi	r24, 0xFF	; 255
     310:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <min>
			sec=0;
     314:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <sec>
		}
		if (min>=60)
     318:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <min>
     31c:	8c 33       	cpi	r24, 0x3C	; 60
     31e:	38 f0       	brcs	.+14     	; 0x32e <normal_clock_logic+0x4c>
		{
			hour++;
     320:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <hour>
     324:	8f 5f       	subi	r24, 0xFF	; 255
     326:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <hour>
			min = 0;
     32a:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <min>
		}
		if(hour>=24)
     32e:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <hour>
     332:	88 31       	cpi	r24, 0x18	; 24
     334:	60 f0       	brcs	.+24     	; 0x34e <normal_clock_logic+0x6c>
		{
			day++;
     336:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <day>
     33a:	8f 5f       	subi	r24, 0xFF	; 255
     33c:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <day>
			week_day++;
     340:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <week_day>
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <week_day>
			hour = 0;
     34a:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <hour>
		}
		if (week_day>=8)
     34e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <week_day>
     352:	88 30       	cpi	r24, 0x08	; 8
     354:	18 f0       	brcs	.+6      	; 0x35c <normal_clock_logic+0x7a>
		{
			week_day=1;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <week_day>
		}
		if(day>month_day_count(month,year))
     35c:	c0 91 e9 01 	lds	r28, 0x01E9	; 0x8001e9 <year>
     360:	d0 91 ea 01 	lds	r29, 0x01EA	; 0x8001ea <year+0x1>
     364:	10 91 e1 01 	lds	r17, 0x01E1	; 0x8001e1 <month>
     368:	be 01       	movw	r22, r28
     36a:	81 2f       	mov	r24, r17
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	66 df       	rcall	.-308    	; 0x23c <month_day_count>
     370:	20 91 ec 01 	lds	r18, 0x01EC	; 0x8001ec <day>
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	82 17       	cp	r24, r18
     378:	93 07       	cpc	r25, r19
     37a:	34 f4       	brge	.+12     	; 0x388 <normal_clock_logic+0xa6>
		{
			month++;
     37c:	1f 5f       	subi	r17, 0xFF	; 255
     37e:	10 93 e1 01 	sts	0x01E1, r17	; 0x8001e1 <month>
			day = 1;
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <day>
		}
		if(month>12)
     388:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <month>
     38c:	8d 30       	cpi	r24, 0x0D	; 13
     38e:	40 f0       	brcs	.+16     	; 0x3a0 <normal_clock_logic+0xbe>
		{
			year++;
     390:	21 96       	adiw	r28, 0x01	; 1
     392:	d0 93 ea 01 	sts	0x01EA, r29	; 0x8001ea <year+0x1>
     396:	c0 93 e9 01 	sts	0x01E9, r28	; 0x8001e9 <year>
			month = 1;
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <month>
		}
	}
}
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	08 95       	ret

000003a8 <stop_watch_logic>:
void stop_watch_logic(void)
{
	cnt_stp_w++;
     3a8:	80 91 ef 01 	lds	r24, 0x01EF	; 0x8001ef <cnt_stp_w>
     3ac:	90 91 f0 01 	lds	r25, 0x01F0	; 0x8001f0 <cnt_stp_w+0x1>
     3b0:	01 96       	adiw	r24, 0x01	; 1
	if(cnt_stp_w>=100)
     3b2:	84 36       	cpi	r24, 0x64	; 100
     3b4:	91 05       	cpc	r25, r1
     3b6:	28 f4       	brcc	.+10     	; 0x3c2 <stop_watch_logic+0x1a>
		}
	}
}
void stop_watch_logic(void)
{
	cnt_stp_w++;
     3b8:	90 93 f0 01 	sts	0x01F0, r25	; 0x8001f0 <cnt_stp_w+0x1>
     3bc:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <cnt_stp_w>
     3c0:	08 95       	ret
	if(cnt_stp_w>=100)
	{
		cnt_stp_w=0;
     3c2:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <cnt_stp_w+0x1>
     3c6:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <cnt_stp_w>
		sec_stp_w++;
     3ca:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <sec_stp_w>
     3ce:	90 91 e5 01 	lds	r25, 0x01E5	; 0x8001e5 <sec_stp_w+0x1>
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	90 93 e5 01 	sts	0x01E5, r25	; 0x8001e5 <sec_stp_w+0x1>
     3d8:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <sec_stp_w>
		if (sec_stp_w>=60)
     3dc:	cc 97       	sbiw	r24, 0x3c	; 60
     3de:	68 f0       	brcs	.+26     	; 0x3fa <stop_watch_logic+0x52>
		{
			min_stp_w++;
     3e0:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <min_stp_w>
     3e4:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <min_stp_w+0x1>
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	90 93 e3 01 	sts	0x01E3, r25	; 0x8001e3 <min_stp_w+0x1>
     3ee:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <min_stp_w>
			sec_stp_w=0;
     3f2:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <sec_stp_w+0x1>
     3f6:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <sec_stp_w>
		}
		if (min_stp_w>=60)
     3fa:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <min_stp_w>
     3fe:	90 91 e3 01 	lds	r25, 0x01E3	; 0x8001e3 <min_stp_w+0x1>
     402:	cc 97       	sbiw	r24, 0x3c	; 60
     404:	68 f0       	brcs	.+26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		{
			hour_stp_w++;
     406:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <hour_stp_w>
     40a:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <hour_stp_w+0x1>
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	90 93 ee 01 	sts	0x01EE, r25	; 0x8001ee <hour_stp_w+0x1>
     414:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <hour_stp_w>
			min_stp_w = 0;
     418:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <min_stp_w+0x1>
     41c:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <min_stp_w>
		}
		if(hour_stp_w>=24)
     420:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <hour_stp_w>
     424:	90 91 ee 01 	lds	r25, 0x01EE	; 0x8001ee <hour_stp_w+0x1>
     428:	48 97       	sbiw	r24, 0x18	; 24
     42a:	20 f0       	brcs	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		{
			hour_stp_w = 0;
     42c:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <hour_stp_w+0x1>
     430:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <hour_stp_w>
     434:	08 95       	ret

00000436 <alarm_clock_check_logic>:
		}
	}
}
uch alarm_clock_check_logic(uch min, uch hour, uch day, uch month, ui year)
{
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
	if(min_alarm==min && hour_alarm==hour && day_alarm==day && month_alarm==month && year_alarm==year)
     43a:	90 91 de 01 	lds	r25, 0x01DE	; 0x8001de <min_alarm>
     43e:	98 13       	cpse	r25, r24
     440:	16 c0       	rjmp	.+44     	; 0x46e <alarm_clock_check_logic+0x38>
     442:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <hour_alarm>
     446:	86 13       	cpse	r24, r22
     448:	14 c0       	rjmp	.+40     	; 0x472 <alarm_clock_check_logic+0x3c>
     44a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <day_alarm>
     44e:	84 13       	cpse	r24, r20
     450:	12 c0       	rjmp	.+36     	; 0x476 <alarm_clock_check_logic+0x40>
     452:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <month_alarm>
     456:	82 13       	cpse	r24, r18
     458:	10 c0       	rjmp	.+32     	; 0x47a <alarm_clock_check_logic+0x44>
	{
		return 1;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <year_alarm>
     460:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <year_alarm+0x1>
     464:	20 17       	cp	r18, r16
     466:	31 07       	cpc	r19, r17
     468:	49 f0       	breq	.+18     	; 0x47c <alarm_clock_check_logic+0x46>
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	07 c0       	rjmp	.+14     	; 0x47c <alarm_clock_check_logic+0x46>
	}
	return 0;
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	05 c0       	rjmp	.+10     	; 0x47c <alarm_clock_check_logic+0x46>
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	03 c0       	rjmp	.+6      	; 0x47c <alarm_clock_check_logic+0x46>
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	01 c0       	rjmp	.+2      	; 0x47c <alarm_clock_check_logic+0x46>
     47a:	80 e0       	ldi	r24, 0x00	; 0
}
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <led_blink>:
void led_blink(void)  // led on and off all bits for INT1
{
	PORTB = 0xff;
     482:	8f ef       	ldi	r24, 0xFF	; 255
     484:	88 bb       	out	0x18, r24	; 24
     486:	2f ef       	ldi	r18, 0xFF	; 255
     488:	8f e7       	ldi	r24, 0x7F	; 127
     48a:	9d e0       	ldi	r25, 0x0D	; 13
     48c:	21 50       	subi	r18, 0x01	; 1
     48e:	80 40       	sbci	r24, 0x00	; 0
     490:	90 40       	sbci	r25, 0x00	; 0
     492:	e1 f7       	brne	.-8      	; 0x48c <led_blink+0xa>
     494:	00 c0       	rjmp	.+0      	; 0x496 <led_blink+0x14>
     496:	00 00       	nop
	_delay_ms(300);
	PORTB = 0x00;
     498:	18 ba       	out	0x18, r1	; 24
     49a:	2f ef       	ldi	r18, 0xFF	; 255
     49c:	8f e7       	ldi	r24, 0x7F	; 127
     49e:	9d e0       	ldi	r25, 0x0D	; 13
     4a0:	21 50       	subi	r18, 0x01	; 1
     4a2:	80 40       	sbci	r24, 0x00	; 0
     4a4:	90 40       	sbci	r25, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <led_blink+0x1e>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <led_blink+0x28>
     4aa:	00 00       	nop
     4ac:	08 95       	ret

000004ae <alarm_clock_display>:
	_delay_ms(300);
}
void alarm_clock_display(void)
{
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
	if (!isset_alarm)
     4b4:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     4b8:	81 11       	cpse	r24, r1
     4ba:	1e c1       	rjmp	.+572    	; 0x6f8 <alarm_clock_display+0x24a>
	{
		switch(step)
     4bc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step>
     4c0:	83 30       	cpi	r24, 0x03	; 3
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <alarm_clock_display+0x18>
     4c4:	57 c0       	rjmp	.+174    	; 0x574 <alarm_clock_display+0xc6>
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <alarm_clock_display+0x24>
     4c8:	81 30       	cpi	r24, 0x01	; 1
     4ca:	51 f0       	breq	.+20     	; 0x4e0 <alarm_clock_display+0x32>
     4cc:	82 30       	cpi	r24, 0x02	; 2
     4ce:	69 f1       	breq	.+90     	; 0x52a <alarm_clock_display+0x7c>
     4d0:	13 c1       	rjmp	.+550    	; 0x6f8 <alarm_clock_display+0x24a>
     4d2:	84 30       	cpi	r24, 0x04	; 4
     4d4:	09 f4       	brne	.+2      	; 0x4d8 <alarm_clock_display+0x2a>
     4d6:	60 c0       	rjmp	.+192    	; 0x598 <alarm_clock_display+0xea>
     4d8:	85 30       	cpi	r24, 0x05	; 5
     4da:	09 f4       	brne	.+2      	; 0x4de <alarm_clock_display+0x30>
     4dc:	e9 c0       	rjmp	.+466    	; 0x6b0 <alarm_clock_display+0x202>
     4de:	0c c1       	rjmp	.+536    	; 0x6f8 <alarm_clock_display+0x24a>
	}
}

void LCD_pos(unsigned char row, unsigned char col)
{
	LCD_Comm(0x80|(row+col*0x40)); 
     4e0:	81 e8       	ldi	r24, 0x81	; 129
     4e2:	11 de       	rcall	.-990    	; 0x106 <LCD_Comm>
		{
			case 1:
			LCD_pos(1,0);
			LCD_STR("ALARM | MINUTE");
     4e4:	8b e3       	ldi	r24, 0x3B	; 59
     4e6:	91 e0       	ldi	r25, 0x01	; 1
     4e8:	2c de       	rcall	.-936    	; 0x142 <LCD_STR>
     4ea:	86 ec       	ldi	r24, 0xC6	; 198
     4ec:	0c de       	rcall	.-1000   	; 0x106 <LCD_Comm>
     4ee:	02 e0       	ldi	r16, 0x02	; 2
			LCD_pos(6,1);
			LCD_CHAR((temp_arr[0]/10)+'0');
     4f0:	11 e0       	ldi	r17, 0x01	; 1
     4f2:	f8 01       	movw	r30, r16
     4f4:	80 81       	ld	r24, Z
     4f6:	cd ec       	ldi	r28, 0xCD	; 205
     4f8:	8c 9f       	mul	r24, r28
     4fa:	81 2d       	mov	r24, r1
     4fc:	11 24       	eor	r1, r1
     4fe:	86 95       	lsr	r24
     500:	86 95       	lsr	r24
     502:	86 95       	lsr	r24
     504:	80 5d       	subi	r24, 0xD0	; 208
     506:	15 de       	rcall	.-982    	; 0x132 <LCD_CHAR>
     508:	f8 01       	movw	r30, r16
			LCD_CHAR((temp_arr[0]%10)+'0');
     50a:	80 81       	ld	r24, Z
     50c:	8c 9f       	mul	r24, r28
     50e:	c1 2d       	mov	r28, r1
     510:	11 24       	eor	r1, r1
     512:	c6 95       	lsr	r28
     514:	c6 95       	lsr	r28
     516:	c6 95       	lsr	r28
     518:	cc 0f       	add	r28, r28
     51a:	9c 2f       	mov	r25, r28
     51c:	99 0f       	add	r25, r25
     51e:	99 0f       	add	r25, r25
     520:	c9 0f       	add	r28, r25
     522:	8c 1b       	sub	r24, r28
     524:	80 5d       	subi	r24, 0xD0	; 208
     526:	05 de       	rcall	.-1014   	; 0x132 <LCD_CHAR>
     528:	e7 c0       	rjmp	.+462    	; 0x6f8 <alarm_clock_display+0x24a>
     52a:	82 e8       	ldi	r24, 0x82	; 130
			break;
			
			case 2:
			LCD_pos(2,0);
			LCD_STR("ALARM | HOUR");
     52c:	ec dd       	rcall	.-1064   	; 0x106 <LCD_Comm>
     52e:	8a e4       	ldi	r24, 0x4A	; 74
     530:	91 e0       	ldi	r25, 0x01	; 1
     532:	07 de       	rcall	.-1010   	; 0x142 <LCD_STR>
     534:	87 ec       	ldi	r24, 0xC7	; 199
     536:	e7 dd       	rcall	.-1074   	; 0x106 <LCD_Comm>
     538:	02 e0       	ldi	r16, 0x02	; 2
			LCD_pos(7,1);
			LCD_CHAR((temp_arr[1]/10)+'0');
     53a:	11 e0       	ldi	r17, 0x01	; 1
     53c:	f8 01       	movw	r30, r16
     53e:	81 81       	ldd	r24, Z+1	; 0x01
     540:	cd ec       	ldi	r28, 0xCD	; 205
     542:	8c 9f       	mul	r24, r28
     544:	81 2d       	mov	r24, r1
     546:	11 24       	eor	r1, r1
     548:	86 95       	lsr	r24
     54a:	86 95       	lsr	r24
     54c:	86 95       	lsr	r24
     54e:	80 5d       	subi	r24, 0xD0	; 208
     550:	f0 dd       	rcall	.-1056   	; 0x132 <LCD_CHAR>
     552:	f8 01       	movw	r30, r16
			LCD_CHAR((temp_arr[1]%10)+'0');
     554:	81 81       	ldd	r24, Z+1	; 0x01
     556:	8c 9f       	mul	r24, r28
     558:	c1 2d       	mov	r28, r1
     55a:	11 24       	eor	r1, r1
     55c:	c6 95       	lsr	r28
     55e:	c6 95       	lsr	r28
     560:	c6 95       	lsr	r28
     562:	cc 0f       	add	r28, r28
     564:	9c 2f       	mov	r25, r28
     566:	99 0f       	add	r25, r25
     568:	99 0f       	add	r25, r25
     56a:	c9 0f       	add	r28, r25
     56c:	8c 1b       	sub	r24, r28
     56e:	80 5d       	subi	r24, 0xD0	; 208
			break;
     570:	e0 dd       	rcall	.-1088   	; 0x132 <LCD_CHAR>
     572:	c2 c0       	rjmp	.+388    	; 0x6f8 <alarm_clock_display+0x24a>
     574:	82 e8       	ldi	r24, 0x82	; 130
     576:	c7 dd       	rcall	.-1138   	; 0x106 <LCD_Comm>
			
			case 3:
			LCD_pos(2,0);
			LCD_STR("ALARM | MONTH ");
     578:	87 e5       	ldi	r24, 0x57	; 87
     57a:	91 e0       	ldi	r25, 0x01	; 1
     57c:	e2 dd       	rcall	.-1084   	; 0x142 <LCD_STR>
     57e:	86 ec       	ldi	r24, 0xC6	; 198
     580:	c2 dd       	rcall	.-1148   	; 0x106 <LCD_Comm>
			LCD_pos(6,1);
			LCD_STR(month_arr[temp_arr[3]-1]);
     582:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <temp_arr+0x3>
     586:	f0 e0       	ldi	r31, 0x00	; 0
     588:	ee 0f       	add	r30, r30
     58a:	ff 1f       	adc	r31, r31
     58c:	e9 5f       	subi	r30, 0xF9	; 249
     58e:	fe 4f       	sbci	r31, 0xFE	; 254
     590:	80 81       	ld	r24, Z
     592:	91 81       	ldd	r25, Z+1	; 0x01
			break;
     594:	d6 dd       	rcall	.-1108   	; 0x142 <LCD_STR>
     596:	b0 c0       	rjmp	.+352    	; 0x6f8 <alarm_clock_display+0x24a>
     598:	82 e8       	ldi	r24, 0x82	; 130
     59a:	b5 dd       	rcall	.-1174   	; 0x106 <LCD_Comm>
			
			case 4:
			LCD_pos(2,0);
			LCD_STR("ALARM | YEAR ");
     59c:	86 e6       	ldi	r24, 0x66	; 102
     59e:	91 e0       	ldi	r25, 0x01	; 1
     5a0:	d0 dd       	rcall	.-1120   	; 0x142 <LCD_STR>
     5a2:	86 ec       	ldi	r24, 0xC6	; 198
     5a4:	b0 dd       	rcall	.-1184   	; 0x106 <LCD_Comm>
     5a6:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_pos(6,1);
			LCD_CHAR((temp_year)/1000+'0');
     5aa:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5ae:	36 95       	lsr	r19
     5b0:	27 95       	ror	r18
     5b2:	36 95       	lsr	r19
     5b4:	27 95       	ror	r18
     5b6:	36 95       	lsr	r19
     5b8:	27 95       	ror	r18
     5ba:	a5 ec       	ldi	r26, 0xC5	; 197
     5bc:	b0 e2       	ldi	r27, 0x20	; 32
     5be:	ce d6       	rcall	.+3484   	; 0x135c <__umulhisi3>
     5c0:	92 95       	swap	r25
     5c2:	82 95       	swap	r24
     5c4:	8f 70       	andi	r24, 0x0F	; 15
     5c6:	89 27       	eor	r24, r25
     5c8:	9f 70       	andi	r25, 0x0F	; 15
     5ca:	89 27       	eor	r24, r25
     5cc:	80 5d       	subi	r24, 0xD0	; 208
     5ce:	b1 dd       	rcall	.-1182   	; 0x132 <LCD_CHAR>
     5d0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_CHAR((temp_year/100)%10+'0');
     5d4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5d8:	36 95       	lsr	r19
     5da:	27 95       	ror	r18
     5dc:	36 95       	lsr	r19
     5de:	27 95       	ror	r18
     5e0:	ab e7       	ldi	r26, 0x7B	; 123
     5e2:	b4 e1       	ldi	r27, 0x14	; 20
     5e4:	bb d6       	rcall	.+3446   	; 0x135c <__umulhisi3>
     5e6:	ac 01       	movw	r20, r24
     5e8:	56 95       	lsr	r21
     5ea:	47 95       	ror	r20
     5ec:	9a 01       	movw	r18, r20
     5ee:	ad ec       	ldi	r26, 0xCD	; 205
     5f0:	bc ec       	ldi	r27, 0xCC	; 204
     5f2:	b4 d6       	rcall	.+3432   	; 0x135c <__umulhisi3>
     5f4:	96 95       	lsr	r25
     5f6:	87 95       	ror	r24
     5f8:	96 95       	lsr	r25
     5fa:	87 95       	ror	r24
     5fc:	96 95       	lsr	r25
     5fe:	87 95       	ror	r24
     600:	9c 01       	movw	r18, r24
     602:	22 0f       	add	r18, r18
     604:	33 1f       	adc	r19, r19
     606:	88 0f       	add	r24, r24
     608:	99 1f       	adc	r25, r25
     60a:	88 0f       	add	r24, r24
     60c:	99 1f       	adc	r25, r25
     60e:	88 0f       	add	r24, r24
     610:	99 1f       	adc	r25, r25
     612:	82 0f       	add	r24, r18
     614:	93 1f       	adc	r25, r19
     616:	9a 01       	movw	r18, r20
     618:	28 1b       	sub	r18, r24
     61a:	39 0b       	sbc	r19, r25
     61c:	c9 01       	movw	r24, r18
     61e:	80 5d       	subi	r24, 0xD0	; 208
     620:	88 dd       	rcall	.-1264   	; 0x132 <LCD_CHAR>
     622:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_CHAR((temp_year/10)%10+'0');
     626:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     62a:	ad ec       	ldi	r26, 0xCD	; 205
     62c:	bc ec       	ldi	r27, 0xCC	; 204
     62e:	96 d6       	rcall	.+3372   	; 0x135c <__umulhisi3>
     630:	ac 01       	movw	r20, r24
     632:	56 95       	lsr	r21
     634:	47 95       	ror	r20
     636:	56 95       	lsr	r21
     638:	47 95       	ror	r20
     63a:	56 95       	lsr	r21
     63c:	47 95       	ror	r20
     63e:	9a 01       	movw	r18, r20
     640:	8d d6       	rcall	.+3354   	; 0x135c <__umulhisi3>
     642:	96 95       	lsr	r25
     644:	87 95       	ror	r24
     646:	96 95       	lsr	r25
     648:	87 95       	ror	r24
     64a:	96 95       	lsr	r25
     64c:	87 95       	ror	r24
     64e:	9c 01       	movw	r18, r24
     650:	22 0f       	add	r18, r18
     652:	33 1f       	adc	r19, r19
     654:	88 0f       	add	r24, r24
     656:	99 1f       	adc	r25, r25
     658:	88 0f       	add	r24, r24
     65a:	99 1f       	adc	r25, r25
     65c:	88 0f       	add	r24, r24
     65e:	99 1f       	adc	r25, r25
     660:	82 0f       	add	r24, r18
     662:	93 1f       	adc	r25, r19
     664:	fa 01       	movw	r30, r20
     666:	e8 1b       	sub	r30, r24
     668:	f9 0b       	sbc	r31, r25
     66a:	cf 01       	movw	r24, r30
     66c:	80 5d       	subi	r24, 0xD0	; 208
     66e:	61 dd       	rcall	.-1342   	; 0x132 <LCD_CHAR>
     670:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_CHAR((temp_year)%10+'0');
     674:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     678:	9a 01       	movw	r18, r20
     67a:	ad ec       	ldi	r26, 0xCD	; 205
     67c:	bc ec       	ldi	r27, 0xCC	; 204
     67e:	6e d6       	rcall	.+3292   	; 0x135c <__umulhisi3>
     680:	96 95       	lsr	r25
     682:	87 95       	ror	r24
     684:	96 95       	lsr	r25
     686:	87 95       	ror	r24
     688:	96 95       	lsr	r25
     68a:	87 95       	ror	r24
     68c:	9c 01       	movw	r18, r24
     68e:	22 0f       	add	r18, r18
     690:	33 1f       	adc	r19, r19
     692:	88 0f       	add	r24, r24
     694:	99 1f       	adc	r25, r25
     696:	88 0f       	add	r24, r24
     698:	99 1f       	adc	r25, r25
     69a:	88 0f       	add	r24, r24
     69c:	99 1f       	adc	r25, r25
     69e:	82 0f       	add	r24, r18
     6a0:	93 1f       	adc	r25, r19
     6a2:	9a 01       	movw	r18, r20
     6a4:	28 1b       	sub	r18, r24
     6a6:	39 0b       	sbc	r19, r25
     6a8:	c9 01       	movw	r24, r18
     6aa:	80 5d       	subi	r24, 0xD0	; 208
			break;
     6ac:	42 dd       	rcall	.-1404   	; 0x132 <LCD_CHAR>
     6ae:	24 c0       	rjmp	.+72     	; 0x6f8 <alarm_clock_display+0x24a>
     6b0:	82 e8       	ldi	r24, 0x82	; 130
     6b2:	29 dd       	rcall	.-1454   	; 0x106 <LCD_Comm>
			case 5:
			LCD_pos(2,0);
			LCD_STR("ALARM | DAY ");
     6b4:	84 e7       	ldi	r24, 0x74	; 116
     6b6:	91 e0       	ldi	r25, 0x01	; 1
     6b8:	44 dd       	rcall	.-1400   	; 0x142 <LCD_STR>
     6ba:	87 ec       	ldi	r24, 0xC7	; 199
     6bc:	24 dd       	rcall	.-1464   	; 0x106 <LCD_Comm>
     6be:	02 e0       	ldi	r16, 0x02	; 2
			LCD_pos(7,1);
			LCD_CHAR((temp_arr[2]/10)+'0');
     6c0:	11 e0       	ldi	r17, 0x01	; 1
     6c2:	f8 01       	movw	r30, r16
     6c4:	82 81       	ldd	r24, Z+2	; 0x02
     6c6:	cd ec       	ldi	r28, 0xCD	; 205
     6c8:	8c 9f       	mul	r24, r28
     6ca:	81 2d       	mov	r24, r1
     6cc:	11 24       	eor	r1, r1
     6ce:	86 95       	lsr	r24
     6d0:	86 95       	lsr	r24
     6d2:	86 95       	lsr	r24
     6d4:	80 5d       	subi	r24, 0xD0	; 208
     6d6:	2d dd       	rcall	.-1446   	; 0x132 <LCD_CHAR>
     6d8:	f8 01       	movw	r30, r16
     6da:	82 81       	ldd	r24, Z+2	; 0x02
			LCD_CHAR((temp_arr[2]%10)+'0');
     6dc:	8c 9f       	mul	r24, r28
     6de:	c1 2d       	mov	r28, r1
     6e0:	11 24       	eor	r1, r1
     6e2:	c6 95       	lsr	r28
     6e4:	c6 95       	lsr	r28
     6e6:	c6 95       	lsr	r28
     6e8:	cc 0f       	add	r28, r28
     6ea:	9c 2f       	mov	r25, r28
     6ec:	99 0f       	add	r25, r25
     6ee:	99 0f       	add	r25, r25
     6f0:	c9 0f       	add	r28, r25
     6f2:	8c 1b       	sub	r24, r28
     6f4:	80 5d       	subi	r24, 0xD0	; 208
     6f6:	1d dd       	rcall	.-1478   	; 0x132 <LCD_CHAR>
     6f8:	cf 91       	pop	r28
     6fa:	1f 91       	pop	r17
     6fc:	0f 91       	pop	r16
			break;
			case 7:
			break;
		}
	}
}
     6fe:	08 95       	ret

00000700 <__vector_15>:
     700:	1f 92       	push	r1
     702:	0f 92       	push	r0
     704:	0f b6       	in	r0, 0x3f	; 63

ISR(TIMER0_COMP_vect)
{
     706:	0f 92       	push	r0
     708:	11 24       	eor	r1, r1
     70a:	0b b6       	in	r0, 0x3b	; 59
     70c:	0f 92       	push	r0
     70e:	2f 93       	push	r18
     710:	3f 93       	push	r19
     712:	4f 93       	push	r20
     714:	5f 93       	push	r21
     716:	6f 93       	push	r22
     718:	7f 93       	push	r23
     71a:	8f 93       	push	r24
     71c:	9f 93       	push	r25
     71e:	af 93       	push	r26
     720:	bf 93       	push	r27
     722:	ef 93       	push	r30
     724:	ff 93       	push	r31
	if(!is_stopped)
     726:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <is_stopped>
     72a:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <is_stopped+0x1>
     72e:	89 2b       	or	r24, r25
     730:	09 f4       	brne	.+2      	; 0x734 <__vector_15+0x34>
		stop_watch_logic();
     732:	3a de       	rcall	.-908    	; 0x3a8 <stop_watch_logic>
		
	normal_clock_logic();
     734:	d6 dd       	rcall	.-1108   	; 0x2e2 <normal_clock_logic>
     736:	ff 91       	pop	r31
}
     738:	ef 91       	pop	r30
     73a:	bf 91       	pop	r27
     73c:	af 91       	pop	r26
     73e:	9f 91       	pop	r25
     740:	8f 91       	pop	r24
     742:	7f 91       	pop	r23
     744:	6f 91       	pop	r22
     746:	5f 91       	pop	r21
     748:	4f 91       	pop	r20
     74a:	3f 91       	pop	r19
     74c:	2f 91       	pop	r18
     74e:	0f 90       	pop	r0
     750:	0b be       	out	0x3b, r0	; 59
     752:	0f 90       	pop	r0
     754:	0f be       	out	0x3f, r0	; 63
     756:	0f 90       	pop	r0
     758:	1f 90       	pop	r1
     75a:	18 95       	reti

0000075c <__vector_1>:
     75c:	1f 92       	push	r1

ISR(INT0_vect)
{
     75e:	0f 92       	push	r0
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	0f 92       	push	r0
     764:	11 24       	eor	r1, r1
     766:	0b b6       	in	r0, 0x3b	; 59
     768:	0f 92       	push	r0
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	cf 93       	push	r28
     780:	ef 93       	push	r30
     782:	ff 93       	push	r31
	if(mode==0)
     784:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <mode>
     788:	81 11       	cpse	r24, r1
     78a:	14 c0       	rjmp	.+40     	; 0x7b4 <__vector_1+0x58>
	{
		mode = 1; // setting up stop_watch mode
     78c:	81 e0       	ldi	r24, 0x01	; 1
     78e:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <mode>
		cnt_stp_w=0;
     792:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <cnt_stp_w+0x1>
     796:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <cnt_stp_w>
		sec_stp_w=0;
     79a:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <sec_stp_w+0x1>
     79e:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <sec_stp_w>
		min_stp_w=0;
     7a2:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <min_stp_w+0x1>
     7a6:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <min_stp_w>
		hour_stp_w=0;
     7aa:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <hour_stp_w+0x1>
     7ae:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <hour_stp_w>
     7b2:	6a c0       	rjmp	.+212    	; 0x888 <__vector_1+0x12c>
	}
	else if(mode==1) // stopwatch
     7b4:	81 30       	cpi	r24, 0x01	; 1
     7b6:	49 f4       	brne	.+18     	; 0x7ca <__vector_1+0x6e>
	{
		mode = 0;
     7b8:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <mode>
		is_stopped=1;
     7bc:	81 e0       	ldi	r24, 0x01	; 1
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <is_stopped+0x1>
     7c4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <is_stopped>
     7c8:	5f c0       	rjmp	.+190    	; 0x888 <__vector_1+0x12c>
	}
	else if(mode==2) // alarm clock
     7ca:	82 30       	cpi	r24, 0x02	; 2
     7cc:	09 f0       	breq	.+2      	; 0x7d0 <__vector_1+0x74>
     7ce:	5c c0       	rjmp	.+184    	; 0x888 <__vector_1+0x12c>
	{
		switch(step)
     7d0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step>
     7d4:	83 30       	cpi	r24, 0x03	; 3
     7d6:	39 f1       	breq	.+78     	; 0x826 <__vector_1+0xca>
     7d8:	28 f4       	brcc	.+10     	; 0x7e4 <__vector_1+0x88>
     7da:	81 30       	cpi	r24, 0x01	; 1
     7dc:	41 f0       	breq	.+16     	; 0x7ee <__vector_1+0x92>
     7de:	82 30       	cpi	r24, 0x02	; 2
     7e0:	a1 f0       	breq	.+40     	; 0x80a <__vector_1+0xae>
     7e2:	52 c0       	rjmp	.+164    	; 0x888 <__vector_1+0x12c>
     7e4:	84 30       	cpi	r24, 0x04	; 4
     7e6:	71 f1       	breq	.+92     	; 0x844 <__vector_1+0xe8>
     7e8:	85 30       	cpi	r24, 0x05	; 5
     7ea:	b1 f1       	breq	.+108    	; 0x858 <__vector_1+0xfc>
     7ec:	4d c0       	rjmp	.+154    	; 0x888 <__vector_1+0x12c>
		{
			case 1:
			if (temp_arr[0]+1>=60)
     7ee:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_arr>
     7f2:	82 2f       	mov	r24, r18
     7f4:	90 e0       	ldi	r25, 0x00	; 0
     7f6:	01 96       	adiw	r24, 0x01	; 1
     7f8:	cc 97       	sbiw	r24, 0x3c	; 60
     7fa:	1c f0       	brlt	.+6      	; 0x802 <__vector_1+0xa6>
			{
				temp_arr[0]=0;
     7fc:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <temp_arr>
     800:	43 c0       	rjmp	.+134    	; 0x888 <__vector_1+0x12c>
			}
			else
			{
				temp_arr[0]++;
     802:	2f 5f       	subi	r18, 0xFF	; 255
     804:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <temp_arr>
     808:	3f c0       	rjmp	.+126    	; 0x888 <__vector_1+0x12c>
			}
			break;
			
			case 2:
			if (temp_arr[1]+1>=24)
     80a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <temp_arr+0x1>
     80e:	82 2f       	mov	r24, r18
     810:	90 e0       	ldi	r25, 0x00	; 0
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	48 97       	sbiw	r24, 0x18	; 24
     816:	1c f0       	brlt	.+6      	; 0x81e <__vector_1+0xc2>
			{
				temp_arr[1]=0;
     818:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <temp_arr+0x1>
     81c:	35 c0       	rjmp	.+106    	; 0x888 <__vector_1+0x12c>
			}
			else
			{
				temp_arr[1]++;
     81e:	2f 5f       	subi	r18, 0xFF	; 255
     820:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <temp_arr+0x1>
     824:	31 c0       	rjmp	.+98     	; 0x888 <__vector_1+0x12c>
			}
			break;
			
			case 3:
			if (temp_arr[3]+1>12)
     826:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <temp_arr+0x3>
     82a:	82 2f       	mov	r24, r18
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	01 96       	adiw	r24, 0x01	; 1
     830:	0d 97       	sbiw	r24, 0x0d	; 13
     832:	24 f0       	brlt	.+8      	; 0x83c <__vector_1+0xe0>
			{
				temp_arr[3]=1;
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_arr+0x3>
     83a:	26 c0       	rjmp	.+76     	; 0x888 <__vector_1+0x12c>
			}
			else
			{
				temp_arr[3]++;
     83c:	2f 5f       	subi	r18, 0xFF	; 255
     83e:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <temp_arr+0x3>
     842:	22 c0       	rjmp	.+68     	; 0x888 <__vector_1+0x12c>
			}
			break;
			
			case 4: temp_year++;
     844:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     848:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     852:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
     856:	18 c0       	rjmp	.+48     	; 0x888 <__vector_1+0x12c>
			
			case 5:	
			if (temp_arr[2]+1>month_day_count(temp_arr[3], temp_year))
     858:	e2 e0       	ldi	r30, 0x02	; 2
     85a:	f1 e0       	ldi	r31, 0x01	; 1
     85c:	c2 81       	ldd	r28, Z+2	; 0x02
     85e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     862:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     866:	83 81       	ldd	r24, Z+3	; 0x03
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	e8 dc       	rcall	.-1584   	; 0x23c <month_day_count>
     86c:	2c 2f       	mov	r18, r28
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	2f 5f       	subi	r18, 0xFF	; 255
     872:	3f 4f       	sbci	r19, 0xFF	; 255
     874:	82 17       	cp	r24, r18
     876:	93 07       	cpc	r25, r19
     878:	24 f4       	brge	.+8      	; 0x882 <__vector_1+0x126>
			{
				temp_arr[2]=1;
     87a:	81 e0       	ldi	r24, 0x01	; 1
     87c:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_arr+0x2>
     880:	03 c0       	rjmp	.+6      	; 0x888 <__vector_1+0x12c>
			}
			else
			{
				temp_arr[2]++;
     882:	cf 5f       	subi	r28, 0xFF	; 255
     884:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <temp_arr+0x2>
			break;
			default: break;
		}
		
	}
}
     888:	ff 91       	pop	r31
     88a:	ef 91       	pop	r30
     88c:	cf 91       	pop	r28
     88e:	bf 91       	pop	r27
     890:	af 91       	pop	r26
     892:	9f 91       	pop	r25
     894:	8f 91       	pop	r24
     896:	7f 91       	pop	r23
     898:	6f 91       	pop	r22
     89a:	5f 91       	pop	r21
     89c:	4f 91       	pop	r20
     89e:	3f 91       	pop	r19
     8a0:	2f 91       	pop	r18
     8a2:	0f 90       	pop	r0
     8a4:	0b be       	out	0x3b, r0	; 59
     8a6:	0f 90       	pop	r0
     8a8:	0f be       	out	0x3f, r0	; 63
     8aa:	0f 90       	pop	r0
     8ac:	1f 90       	pop	r1
     8ae:	18 95       	reti

000008b0 <__vector_2>:

ISR(INT1_vect)
{
     8b0:	1f 92       	push	r1
     8b2:	0f 92       	push	r0
     8b4:	0f b6       	in	r0, 0x3f	; 63
     8b6:	0f 92       	push	r0
     8b8:	11 24       	eor	r1, r1
     8ba:	8f 93       	push	r24
     8bc:	9f 93       	push	r25
	if(mode==1) // stop and go button for stopwatch 
     8be:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <mode>
     8c2:	81 30       	cpi	r24, 0x01	; 1
     8c4:	91 f4       	brne	.+36     	; 0x8ea <__vector_2+0x3a>
	{
		if (!is_stopped)
     8c6:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <is_stopped>
     8ca:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <is_stopped+0x1>
     8ce:	89 2b       	or	r24, r25
     8d0:	39 f4       	brne	.+14     	; 0x8e0 <__vector_2+0x30>
			is_stopped = 1;
     8d2:	81 e0       	ldi	r24, 0x01	; 1
     8d4:	90 e0       	ldi	r25, 0x00	; 0
     8d6:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <is_stopped+0x1>
     8da:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <is_stopped>
     8de:	0f c0       	rjmp	.+30     	; 0x8fe <__vector_2+0x4e>
		else
			is_stopped=0;
     8e0:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <is_stopped+0x1>
     8e4:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <is_stopped>
     8e8:	0a c0       	rjmp	.+20     	; 0x8fe <__vector_2+0x4e>
	}
	else if(mode==0)
     8ea:	81 11       	cpse	r24, r1
     8ec:	04 c0       	rjmp	.+8      	; 0x8f6 <__vector_2+0x46>
	{
		mode=2;
     8ee:	82 e0       	ldi	r24, 0x02	; 2
     8f0:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <mode>
     8f4:	04 c0       	rjmp	.+8      	; 0x8fe <__vector_2+0x4e>
	}
	else if(mode==2)
     8f6:	82 30       	cpi	r24, 0x02	; 2
     8f8:	11 f4       	brne	.+4      	; 0x8fe <__vector_2+0x4e>
	{
		mode=0;
     8fa:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <mode>
	}
}
     8fe:	9f 91       	pop	r25
     900:	8f 91       	pop	r24
     902:	0f 90       	pop	r0
     904:	0f be       	out	0x3f, r0	; 63
     906:	0f 90       	pop	r0
     908:	1f 90       	pop	r1
     90a:	18 95       	reti

0000090c <__vector_3>:

ISR(INT2_vect)
{
     90c:	1f 92       	push	r1
     90e:	0f 92       	push	r0
     910:	0f b6       	in	r0, 0x3f	; 63
     912:	0f 92       	push	r0
     914:	11 24       	eor	r1, r1
     916:	0b b6       	in	r0, 0x3b	; 59
     918:	0f 92       	push	r0
     91a:	2f 93       	push	r18
     91c:	3f 93       	push	r19
     91e:	4f 93       	push	r20
     920:	5f 93       	push	r21
     922:	6f 93       	push	r22
     924:	7f 93       	push	r23
     926:	8f 93       	push	r24
     928:	9f 93       	push	r25
     92a:	af 93       	push	r26
     92c:	bf 93       	push	r27
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	ef 93       	push	r30
     934:	ff 93       	push	r31
	if(mode==1)// reset button for stopwatch
     936:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <mode>
     93a:	81 30       	cpi	r24, 0x01	; 1
     93c:	e9 f4       	brne	.+58     	; 0x978 <__vector_3+0x6c>
	{
		if(!is_stopped)
     93e:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <is_stopped>
     942:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <is_stopped+0x1>
     946:	89 2b       	or	r24, r25
     948:	31 f4       	brne	.+12     	; 0x956 <__vector_3+0x4a>
			is_stopped=1;
     94a:	81 e0       	ldi	r24, 0x01	; 1
     94c:	90 e0       	ldi	r25, 0x00	; 0
     94e:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <is_stopped+0x1>
     952:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <is_stopped>

		cnt_stp_w=0;
     956:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <cnt_stp_w+0x1>
     95a:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <cnt_stp_w>
		sec_stp_w=0;
     95e:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <sec_stp_w+0x1>
     962:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <sec_stp_w>
		min_stp_w=0;
     966:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <min_stp_w+0x1>
     96a:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <min_stp_w>
		hour_stp_w=0;
     96e:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <hour_stp_w+0x1>
     972:	10 92 ed 01 	sts	0x01ED, r1	; 0x8001ed <hour_stp_w>
     976:	6e c0       	rjmp	.+220    	; 0xa54 <__vector_3+0x148>
	}
	else if(mode==0)
     978:	81 11       	cpse	r24, r1
     97a:	02 c0       	rjmp	.+4      	; 0x980 <__vector_3+0x74>
	{
		disable_alarm_clock();
     97c:	92 dc       	rcall	.-1756   	; 0x2a2 <disable_alarm_clock>
     97e:	6a c0       	rjmp	.+212    	; 0xa54 <__vector_3+0x148>
	}
	else if(mode==2)
     980:	82 30       	cpi	r24, 0x02	; 2
     982:	09 f0       	breq	.+2      	; 0x986 <__vector_3+0x7a>
     984:	67 c0       	rjmp	.+206    	; 0xa54 <__vector_3+0x148>
	{
		switch(step)
     986:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step>
     98a:	83 30       	cpi	r24, 0x03	; 3
     98c:	51 f1       	breq	.+84     	; 0x9e2 <__vector_3+0xd6>
     98e:	28 f4       	brcc	.+10     	; 0x99a <__vector_3+0x8e>
     990:	81 30       	cpi	r24, 0x01	; 1
     992:	49 f0       	breq	.+18     	; 0x9a6 <__vector_3+0x9a>
     994:	82 30       	cpi	r24, 0x02	; 2
     996:	b1 f0       	breq	.+44     	; 0x9c4 <__vector_3+0xb8>
     998:	5d c0       	rjmp	.+186    	; 0xa54 <__vector_3+0x148>
     99a:	84 30       	cpi	r24, 0x04	; 4
     99c:	99 f1       	breq	.+102    	; 0xa04 <__vector_3+0xf8>
     99e:	85 30       	cpi	r24, 0x05	; 5
     9a0:	09 f4       	brne	.+2      	; 0x9a4 <__vector_3+0x98>
     9a2:	41 c0       	rjmp	.+130    	; 0xa26 <__vector_3+0x11a>
     9a4:	57 c0       	rjmp	.+174    	; 0xa54 <__vector_3+0x148>
		{
			case 1:if (temp_arr[0]-1<0)
     9a6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_arr>
     9aa:	28 2f       	mov	r18, r24
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	21 50       	subi	r18, 0x01	; 1
     9b0:	31 09       	sbc	r19, r1
     9b2:	22 f4       	brpl	.+8      	; 0x9bc <__vector_3+0xb0>
			{
				temp_arr[0]=59;
     9b4:	8b e3       	ldi	r24, 0x3B	; 59
     9b6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_arr>
     9ba:	4c c0       	rjmp	.+152    	; 0xa54 <__vector_3+0x148>
			}
			else
			{
				temp_arr[0]--;
     9bc:	81 50       	subi	r24, 0x01	; 1
     9be:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_arr>
     9c2:	48 c0       	rjmp	.+144    	; 0xa54 <__vector_3+0x148>
			}
			break;
			
			case 2:if (temp_arr[1]-1<0)
     9c4:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_arr+0x1>
     9c8:	28 2f       	mov	r18, r24
     9ca:	30 e0       	ldi	r19, 0x00	; 0
     9cc:	21 50       	subi	r18, 0x01	; 1
     9ce:	31 09       	sbc	r19, r1
     9d0:	22 f4       	brpl	.+8      	; 0x9da <__vector_3+0xce>
			{
				temp_arr[1]=23;
     9d2:	87 e1       	ldi	r24, 0x17	; 23
     9d4:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp_arr+0x1>
     9d8:	3d c0       	rjmp	.+122    	; 0xa54 <__vector_3+0x148>
			}
			else
			{
				temp_arr[1]--;
     9da:	81 50       	subi	r24, 0x01	; 1
     9dc:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp_arr+0x1>
     9e0:	39 c0       	rjmp	.+114    	; 0xa54 <__vector_3+0x148>
			}
			break;
			
			case 3:if (temp_arr[3]-1<=0)
     9e2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <temp_arr+0x3>
     9e6:	28 2f       	mov	r18, r24
     9e8:	30 e0       	ldi	r19, 0x00	; 0
     9ea:	21 50       	subi	r18, 0x01	; 1
     9ec:	31 09       	sbc	r19, r1
     9ee:	12 16       	cp	r1, r18
     9f0:	13 06       	cpc	r1, r19
     9f2:	24 f0       	brlt	.+8      	; 0x9fc <__vector_3+0xf0>
			{
				temp_arr[3]=12;
     9f4:	8c e0       	ldi	r24, 0x0C	; 12
     9f6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_arr+0x3>
     9fa:	2c c0       	rjmp	.+88     	; 0xa54 <__vector_3+0x148>
			}
			else
			{
				temp_arr[3]--;
     9fc:	81 50       	subi	r24, 0x01	; 1
     9fe:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_arr+0x3>
     a02:	28 c0       	rjmp	.+80     	; 0xa54 <__vector_3+0x148>
			}
			break;
			
			case 4: if (temp_year-1>=year)
     a04:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a08:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a0c:	01 97       	sbiw	r24, 0x01	; 1
     a0e:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <year>
     a12:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <year+0x1>
     a16:	82 17       	cp	r24, r18
     a18:	93 07       	cpc	r25, r19
     a1a:	e0 f0       	brcs	.+56     	; 0xa54 <__vector_3+0x148>
					{
						temp_year--;
     a1c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a20:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     a24:	17 c0       	rjmp	.+46     	; 0xa54 <__vector_3+0x148>
					}
					break;
			case 5:	if (temp_arr[2]-1<=0)
     a26:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <temp_arr+0x2>
     a2a:	28 2f       	mov	r18, r24
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	21 50       	subi	r18, 0x01	; 1
     a30:	31 09       	sbc	r19, r1
     a32:	12 16       	cp	r1, r18
     a34:	13 06       	cpc	r1, r19
     a36:	5c f0       	brlt	.+22     	; 0xa4e <__vector_3+0x142>
			{
				temp_arr[2]=month_day_count(temp_arr[3],temp_year);
     a38:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a3c:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a40:	c2 e0       	ldi	r28, 0x02	; 2
     a42:	d1 e0       	ldi	r29, 0x01	; 1
     a44:	8b 81       	ldd	r24, Y+3	; 0x03
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	f9 db       	rcall	.-2062   	; 0x23c <month_day_count>
     a4a:	8a 83       	std	Y+2, r24	; 0x02
     a4c:	03 c0       	rjmp	.+6      	; 0xa54 <__vector_3+0x148>
			}
			else
			{
				temp_arr[2]--;
     a4e:	81 50       	subi	r24, 0x01	; 1
     a50:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_arr+0x2>
			}
			break;
			default: break;
		}
	}
}
     a54:	ff 91       	pop	r31
     a56:	ef 91       	pop	r30
     a58:	df 91       	pop	r29
     a5a:	cf 91       	pop	r28
     a5c:	bf 91       	pop	r27
     a5e:	af 91       	pop	r26
     a60:	9f 91       	pop	r25
     a62:	8f 91       	pop	r24
     a64:	7f 91       	pop	r23
     a66:	6f 91       	pop	r22
     a68:	5f 91       	pop	r21
     a6a:	4f 91       	pop	r20
     a6c:	3f 91       	pop	r19
     a6e:	2f 91       	pop	r18
     a70:	0f 90       	pop	r0
     a72:	0b be       	out	0x3b, r0	; 59
     a74:	0f 90       	pop	r0
     a76:	0f be       	out	0x3f, r0	; 63
     a78:	0f 90       	pop	r0
     a7a:	1f 90       	pop	r1
     a7c:	18 95       	reti

00000a7e <__vector_4>:

ISR(INT3_vect)
{
     a7e:	1f 92       	push	r1
     a80:	0f 92       	push	r0
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	0f 92       	push	r0
     a86:	11 24       	eor	r1, r1
     a88:	0b b6       	in	r0, 0x3b	; 59
     a8a:	0f 92       	push	r0
     a8c:	2f 93       	push	r18
     a8e:	3f 93       	push	r19
     a90:	8f 93       	push	r24
     a92:	9f 93       	push	r25
     a94:	ef 93       	push	r30
     a96:	ff 93       	push	r31
	if (mode==0)
     a98:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <mode>
     a9c:	82 30       	cpi	r24, 0x02	; 2
     a9e:	41 f5       	brne	.+80     	; 0xaf0 <__vector_4+0x72>
	{
		// code for stopwatch
	}
	else if(mode==2)
	{
		step++;
     aa0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step>
     aa4:	8f 5f       	subi	r24, 0xFF	; 255
		if (step>5)
     aa6:	86 30       	cpi	r24, 0x06	; 6
     aa8:	18 f4       	brcc	.+6      	; 0xab0 <__vector_4+0x32>
	{
		// code for stopwatch
	}
	else if(mode==2)
	{
		step++;
     aaa:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <step>
     aae:	20 c0       	rjmp	.+64     	; 0xaf0 <__vector_4+0x72>
		if (step>5)
		{
			step=7; // this means end of time setting
     ab0:	87 e0       	ldi	r24, 0x07	; 7
     ab2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <step>
			isset_alarm=1;
     ab6:	81 e0       	ldi	r24, 0x01	; 1
     ab8:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
				
			min_alarm=temp_arr[0];
     abc:	e2 e0       	ldi	r30, 0x02	; 2
     abe:	f1 e0       	ldi	r31, 0x01	; 1
     ac0:	90 81       	ld	r25, Z
     ac2:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <min_alarm>
			hour_alarm=temp_arr[1];
     ac6:	91 81       	ldd	r25, Z+1	; 0x01
     ac8:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <hour_alarm>
			day_alarm=temp_arr[2];
     acc:	92 81       	ldd	r25, Z+2	; 0x02
     ace:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <day_alarm>
			month_alarm=temp_arr[3];
     ad2:	93 81       	ldd	r25, Z+3	; 0x03
     ad4:	90 93 db 01 	sts	0x01DB, r25	; 0x8001db <month_alarm>
			year_alarm=temp_year;
     ad8:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     adc:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ae0:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <year_alarm+0x1>
     ae4:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <year_alarm>
				
			// clearing temp variables
			for (uch i=0;i<4;i++)
			{
				temp_arr[i]=0;
     ae8:	10 82       	st	Z, r1
     aea:	11 82       	std	Z+1, r1	; 0x01
				if (i>1)
				{
					temp_arr[i]=1;
     aec:	82 83       	std	Z+2, r24	; 0x02
     aee:	83 83       	std	Z+3, r24	; 0x03
				}
			}
		}
	}
}
     af0:	ff 91       	pop	r31
     af2:	ef 91       	pop	r30
     af4:	9f 91       	pop	r25
     af6:	8f 91       	pop	r24
     af8:	3f 91       	pop	r19
     afa:	2f 91       	pop	r18
     afc:	0f 90       	pop	r0
     afe:	0b be       	out	0x3b, r0	; 59
     b00:	0f 90       	pop	r0
     b02:	0f be       	out	0x3f, r0	; 63
     b04:	0f 90       	pop	r0
     b06:	1f 90       	pop	r1
     b08:	18 95       	reti

00000b0a <display_normal_mode>:

void display_normal_mode(void)
{
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	00 d0       	rcall	.+0      	; 0xb14 <display_normal_mode+0xa>
     b14:	00 d0       	rcall	.+0      	; 0xb16 <display_normal_mode+0xc>
     b16:	00 d0       	rcall	.+0      	; 0xb18 <display_normal_mode+0xe>
     b18:	cd b7       	in	r28, 0x3d	; 61
     b1a:	de b7       	in	r29, 0x3e	; 62
	char AM[] = "AM";
     b1c:	81 e4       	ldi	r24, 0x41	; 65
     b1e:	9d e4       	ldi	r25, 0x4D	; 77
     b20:	9a 83       	std	Y+2, r25	; 0x02
     b22:	89 83       	std	Y+1, r24	; 0x01
     b24:	1b 82       	std	Y+3, r1	; 0x03
	char PM[] = "PM";
     b26:	80 e5       	ldi	r24, 0x50	; 80
     b28:	9d e4       	ldi	r25, 0x4D	; 77
     b2a:	9d 83       	std	Y+5, r25	; 0x05
     b2c:	8c 83       	std	Y+4, r24	; 0x04
     b2e:	1e 82       	std	Y+6, r1	; 0x06
     b30:	80 e8       	ldi	r24, 0x80	; 128
     b32:	e9 da       	rcall	.-2606   	; 0x106 <LCD_Comm>
	
	// Displaying year
	LCD_pos(0,0);
	LCD_CHAR((year)/1000+'0');
     b34:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <year>
     b38:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <year+0x1>
     b3c:	36 95       	lsr	r19
     b3e:	27 95       	ror	r18
     b40:	36 95       	lsr	r19
     b42:	27 95       	ror	r18
     b44:	36 95       	lsr	r19
     b46:	27 95       	ror	r18
     b48:	a5 ec       	ldi	r26, 0xC5	; 197
     b4a:	b0 e2       	ldi	r27, 0x20	; 32
     b4c:	07 d4       	rcall	.+2062   	; 0x135c <__umulhisi3>
     b4e:	92 95       	swap	r25
     b50:	82 95       	swap	r24
     b52:	8f 70       	andi	r24, 0x0F	; 15
     b54:	89 27       	eor	r24, r25
     b56:	9f 70       	andi	r25, 0x0F	; 15
     b58:	89 27       	eor	r24, r25
     b5a:	80 5d       	subi	r24, 0xD0	; 208
     b5c:	ea da       	rcall	.-2604   	; 0x132 <LCD_CHAR>
	LCD_CHAR((year/100)%10+'0');
     b5e:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <year>
     b62:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <year+0x1>
     b66:	36 95       	lsr	r19
     b68:	27 95       	ror	r18
     b6a:	36 95       	lsr	r19
     b6c:	27 95       	ror	r18
     b6e:	ab e7       	ldi	r26, 0x7B	; 123
     b70:	b4 e1       	ldi	r27, 0x14	; 20
     b72:	f4 d3       	rcall	.+2024   	; 0x135c <__umulhisi3>
     b74:	ac 01       	movw	r20, r24
     b76:	56 95       	lsr	r21
     b78:	47 95       	ror	r20
     b7a:	9a 01       	movw	r18, r20
     b7c:	ad ec       	ldi	r26, 0xCD	; 205
     b7e:	bc ec       	ldi	r27, 0xCC	; 204
     b80:	ed d3       	rcall	.+2010   	; 0x135c <__umulhisi3>
     b82:	96 95       	lsr	r25
     b84:	87 95       	ror	r24
     b86:	96 95       	lsr	r25
     b88:	87 95       	ror	r24
     b8a:	96 95       	lsr	r25
     b8c:	87 95       	ror	r24
     b8e:	9c 01       	movw	r18, r24
     b90:	22 0f       	add	r18, r18
     b92:	33 1f       	adc	r19, r19
     b94:	88 0f       	add	r24, r24
     b96:	99 1f       	adc	r25, r25
     b98:	88 0f       	add	r24, r24
     b9a:	99 1f       	adc	r25, r25
     b9c:	88 0f       	add	r24, r24
     b9e:	99 1f       	adc	r25, r25
     ba0:	82 0f       	add	r24, r18
     ba2:	93 1f       	adc	r25, r19
     ba4:	9a 01       	movw	r18, r20
     ba6:	28 1b       	sub	r18, r24
     ba8:	39 0b       	sbc	r19, r25
     baa:	c9 01       	movw	r24, r18
     bac:	80 5d       	subi	r24, 0xD0	; 208
     bae:	c1 da       	rcall	.-2686   	; 0x132 <LCD_CHAR>
	LCD_CHAR((year/10)%10+'0');
     bb0:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <year>
     bb4:	30 91 ea 01 	lds	r19, 0x01EA	; 0x8001ea <year+0x1>
     bb8:	ad ec       	ldi	r26, 0xCD	; 205
     bba:	bc ec       	ldi	r27, 0xCC	; 204
     bbc:	cf d3       	rcall	.+1950   	; 0x135c <__umulhisi3>
     bbe:	ac 01       	movw	r20, r24
     bc0:	56 95       	lsr	r21
     bc2:	47 95       	ror	r20
     bc4:	56 95       	lsr	r21
     bc6:	47 95       	ror	r20
     bc8:	56 95       	lsr	r21
     bca:	47 95       	ror	r20
     bcc:	9a 01       	movw	r18, r20
     bce:	c6 d3       	rcall	.+1932   	; 0x135c <__umulhisi3>
     bd0:	96 95       	lsr	r25
     bd2:	87 95       	ror	r24
     bd4:	96 95       	lsr	r25
     bd6:	87 95       	ror	r24
     bd8:	96 95       	lsr	r25
     bda:	87 95       	ror	r24
     bdc:	9c 01       	movw	r18, r24
     bde:	22 0f       	add	r18, r18
     be0:	33 1f       	adc	r19, r19
     be2:	88 0f       	add	r24, r24
     be4:	99 1f       	adc	r25, r25
     be6:	88 0f       	add	r24, r24
     be8:	99 1f       	adc	r25, r25
     bea:	88 0f       	add	r24, r24
     bec:	99 1f       	adc	r25, r25
     bee:	82 0f       	add	r24, r18
     bf0:	93 1f       	adc	r25, r19
     bf2:	9a 01       	movw	r18, r20
     bf4:	28 1b       	sub	r18, r24
     bf6:	39 0b       	sbc	r19, r25
     bf8:	c9 01       	movw	r24, r18
     bfa:	80 5d       	subi	r24, 0xD0	; 208
     bfc:	9a da       	rcall	.-2764   	; 0x132 <LCD_CHAR>
	LCD_CHAR((year)%10+'0');
     bfe:	40 91 e9 01 	lds	r20, 0x01E9	; 0x8001e9 <year>
     c02:	50 91 ea 01 	lds	r21, 0x01EA	; 0x8001ea <year+0x1>
     c06:	9a 01       	movw	r18, r20
     c08:	ad ec       	ldi	r26, 0xCD	; 205
     c0a:	bc ec       	ldi	r27, 0xCC	; 204
     c0c:	a7 d3       	rcall	.+1870   	; 0x135c <__umulhisi3>
     c0e:	96 95       	lsr	r25
     c10:	87 95       	ror	r24
     c12:	96 95       	lsr	r25
     c14:	87 95       	ror	r24
     c16:	96 95       	lsr	r25
     c18:	87 95       	ror	r24
     c1a:	9c 01       	movw	r18, r24
     c1c:	22 0f       	add	r18, r18
     c1e:	33 1f       	adc	r19, r19
     c20:	88 0f       	add	r24, r24
     c22:	99 1f       	adc	r25, r25
     c24:	88 0f       	add	r24, r24
     c26:	99 1f       	adc	r25, r25
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	82 0f       	add	r24, r18
     c2e:	93 1f       	adc	r25, r19
     c30:	9a 01       	movw	r18, r20
     c32:	28 1b       	sub	r18, r24
     c34:	39 0b       	sbc	r19, r25
     c36:	c9 01       	movw	r24, r18
     c38:	80 5d       	subi	r24, 0xD0	; 208
     c3a:	7b da       	rcall	.-2826   	; 0x132 <LCD_CHAR>
     c3c:	85 e8       	ldi	r24, 0x85	; 133
     c3e:	63 da       	rcall	.-2874   	; 0x106 <LCD_Comm>
     c40:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <day>
	
	
	// displaying day and month in form of "d/m"
	LCD_pos(5,0);
	if ((day/10)>0)
     c44:	8a 30       	cpi	r24, 0x0A	; 10
     c46:	d0 f0       	brcs	.+52     	; 0xc7c <display_normal_mode+0x172>
	{
		LCD_CHAR((day/10)+'0');
     c48:	1d ec       	ldi	r17, 0xCD	; 205
     c4a:	81 9f       	mul	r24, r17
     c4c:	81 2d       	mov	r24, r1
     c4e:	11 24       	eor	r1, r1
     c50:	86 95       	lsr	r24
     c52:	86 95       	lsr	r24
     c54:	86 95       	lsr	r24
     c56:	80 5d       	subi	r24, 0xD0	; 208
     c58:	6c da       	rcall	.-2856   	; 0x132 <LCD_CHAR>
     c5a:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <day>
		LCD_CHAR((day%10)+'0');
     c5e:	81 9f       	mul	r24, r17
     c60:	11 2d       	mov	r17, r1
     c62:	11 24       	eor	r1, r1
     c64:	16 95       	lsr	r17
     c66:	16 95       	lsr	r17
     c68:	16 95       	lsr	r17
     c6a:	11 0f       	add	r17, r17
     c6c:	91 2f       	mov	r25, r17
     c6e:	99 0f       	add	r25, r25
     c70:	99 0f       	add	r25, r25
     c72:	19 0f       	add	r17, r25
     c74:	81 1b       	sub	r24, r17
     c76:	80 5d       	subi	r24, 0xD0	; 208
	}
	else
	{
		LCD_CHAR('0');
     c78:	5c da       	rcall	.-2888   	; 0x132 <LCD_CHAR>
     c7a:	06 c0       	rjmp	.+12     	; 0xc88 <display_normal_mode+0x17e>
     c7c:	80 e3       	ldi	r24, 0x30	; 48
		LCD_CHAR((day)+'0');
     c7e:	59 da       	rcall	.-2894   	; 0x132 <LCD_CHAR>
     c80:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <day>
     c84:	80 5d       	subi	r24, 0xD0	; 208
	}
	LCD_CHAR('/');
     c86:	55 da       	rcall	.-2902   	; 0x132 <LCD_CHAR>
     c88:	8f e2       	ldi	r24, 0x2F	; 47
     c8a:	53 da       	rcall	.-2906   	; 0x132 <LCD_CHAR>
	
	if ((month/10)>0)
     c8c:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <month>
     c90:	8a 30       	cpi	r24, 0x0A	; 10
     c92:	d0 f0       	brcs	.+52     	; 0xcc8 <display_normal_mode+0x1be>
	{
		LCD_CHAR((month/10)+'0');
     c94:	1d ec       	ldi	r17, 0xCD	; 205
     c96:	81 9f       	mul	r24, r17
     c98:	81 2d       	mov	r24, r1
     c9a:	11 24       	eor	r1, r1
     c9c:	86 95       	lsr	r24
     c9e:	86 95       	lsr	r24
     ca0:	86 95       	lsr	r24
     ca2:	80 5d       	subi	r24, 0xD0	; 208
     ca4:	46 da       	rcall	.-2932   	; 0x132 <LCD_CHAR>
		LCD_CHAR((month%10)+'0');
     ca6:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <month>
     caa:	81 9f       	mul	r24, r17
     cac:	11 2d       	mov	r17, r1
     cae:	11 24       	eor	r1, r1
     cb0:	16 95       	lsr	r17
     cb2:	16 95       	lsr	r17
     cb4:	16 95       	lsr	r17
     cb6:	11 0f       	add	r17, r17
     cb8:	91 2f       	mov	r25, r17
     cba:	99 0f       	add	r25, r25
     cbc:	99 0f       	add	r25, r25
     cbe:	19 0f       	add	r17, r25
     cc0:	81 1b       	sub	r24, r17
     cc2:	80 5d       	subi	r24, 0xD0	; 208
	}
	else
	{
		LCD_CHAR('0');
     cc4:	36 da       	rcall	.-2964   	; 0x132 <LCD_CHAR>
     cc6:	06 c0       	rjmp	.+12     	; 0xcd4 <display_normal_mode+0x1ca>
		LCD_CHAR((month)+'0');
     cc8:	80 e3       	ldi	r24, 0x30	; 48
     cca:	33 da       	rcall	.-2970   	; 0x132 <LCD_CHAR>
     ccc:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <month>
     cd0:	80 5d       	subi	r24, 0xD0	; 208
     cd2:	2f da       	rcall	.-2978   	; 0x132 <LCD_CHAR>
     cd4:	8b e8       	ldi	r24, 0x8B	; 139
	
	//////////////////////////////////////////////////////////////////////////
	
	// displaying week days
	LCD_pos(11,0);
	switch(week_day)
     cd6:	17 da       	rcall	.-3026   	; 0x106 <LCD_Comm>
     cd8:	e0 91 e7 01 	lds	r30, 0x01E7	; 0x8001e7 <week_day>
     cdc:	8e 2f       	mov	r24, r30
     cde:	90 e0       	ldi	r25, 0x00	; 0
     ce0:	fc 01       	movw	r30, r24
     ce2:	31 97       	sbiw	r30, 0x01	; 1
     ce4:	e7 30       	cpi	r30, 0x07	; 7
     ce6:	f1 05       	cpc	r31, r1
     ce8:	f0 f4       	brcc	.+60     	; 0xd26 <display_normal_mode+0x21c>
	{
		case 1: LCD_STR("Mon"); break;
     cea:	ea 5b       	subi	r30, 0xBA	; 186
     cec:	ff 4f       	sbci	r31, 0xFF	; 255
     cee:	2d c3       	rjmp	.+1626   	; 0x134a <__tablejump2__>
     cf0:	81 e8       	ldi	r24, 0x81	; 129
		case 2: LCD_STR("Tue"); break;
     cf2:	91 e0       	ldi	r25, 0x01	; 1
     cf4:	26 da       	rcall	.-2996   	; 0x142 <LCD_STR>
     cf6:	17 c0       	rjmp	.+46     	; 0xd26 <display_normal_mode+0x21c>
     cf8:	85 e8       	ldi	r24, 0x85	; 133
		case 3: LCD_STR("Wen"); break;
     cfa:	91 e0       	ldi	r25, 0x01	; 1
     cfc:	22 da       	rcall	.-3004   	; 0x142 <LCD_STR>
     cfe:	13 c0       	rjmp	.+38     	; 0xd26 <display_normal_mode+0x21c>
     d00:	89 e8       	ldi	r24, 0x89	; 137
		case 4: LCD_STR("Thu"); break;
     d02:	91 e0       	ldi	r25, 0x01	; 1
     d04:	1e da       	rcall	.-3012   	; 0x142 <LCD_STR>
     d06:	0f c0       	rjmp	.+30     	; 0xd26 <display_normal_mode+0x21c>
     d08:	8d e8       	ldi	r24, 0x8D	; 141
     d0a:	91 e0       	ldi	r25, 0x01	; 1
		case 5: LCD_STR("Fri"); break;
     d0c:	1a da       	rcall	.-3020   	; 0x142 <LCD_STR>
     d0e:	0b c0       	rjmp	.+22     	; 0xd26 <display_normal_mode+0x21c>
     d10:	81 e9       	ldi	r24, 0x91	; 145
     d12:	91 e0       	ldi	r25, 0x01	; 1
		case 6: LCD_STR("Sat"); break;
     d14:	16 da       	rcall	.-3028   	; 0x142 <LCD_STR>
     d16:	07 c0       	rjmp	.+14     	; 0xd26 <display_normal_mode+0x21c>
     d18:	85 e9       	ldi	r24, 0x95	; 149
     d1a:	91 e0       	ldi	r25, 0x01	; 1
		case 7: LCD_STR("Sun"); break;
     d1c:	12 da       	rcall	.-3036   	; 0x142 <LCD_STR>
     d1e:	03 c0       	rjmp	.+6      	; 0xd26 <display_normal_mode+0x21c>
     d20:	89 e9       	ldi	r24, 0x99	; 153
	}
	//////////////////////////////////////////////////////////////////////////
	
	// displaying hours
	if(hour>12)
     d22:	91 e0       	ldi	r25, 0x01	; 1
     d24:	0e da       	rcall	.-3044   	; 0x142 <LCD_STR>
     d26:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <hour>
     d2a:	8d 30       	cpi	r24, 0x0D	; 13
	{
		LCD_pos(0,1);
		LCD_STR(PM);
     d2c:	e8 f0       	brcs	.+58     	; 0xd68 <display_normal_mode+0x25e>
     d2e:	80 ec       	ldi	r24, 0xC0	; 192
     d30:	ea d9       	rcall	.-3116   	; 0x106 <LCD_Comm>
     d32:	ce 01       	movw	r24, r28
     d34:	04 96       	adiw	r24, 0x04	; 4
		LCD_pos(3,1);
		LCD_CHAR((hour-12)/10+'0');
     d36:	05 da       	rcall	.-3062   	; 0x142 <LCD_STR>
     d38:	83 ec       	ldi	r24, 0xC3	; 195
     d3a:	e5 d9       	rcall	.-3126   	; 0x106 <LCD_Comm>
     d3c:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <hour>
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0c 97       	sbiw	r24, 0x0c	; 12
     d44:	0a e0       	ldi	r16, 0x0A	; 10
     d46:	10 e0       	ldi	r17, 0x00	; 0
     d48:	b8 01       	movw	r22, r16
     d4a:	ec d2       	rcall	.+1496   	; 0x1324 <__divmodhi4>
     d4c:	80 e3       	ldi	r24, 0x30	; 48
		LCD_CHAR((hour-12)%10+'0');
     d4e:	86 0f       	add	r24, r22
     d50:	f0 d9       	rcall	.-3104   	; 0x132 <LCD_CHAR>
     d52:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <hour>
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	0c 97       	sbiw	r24, 0x0c	; 12
     d5a:	b8 01       	movw	r22, r16
     d5c:	e3 d2       	rcall	.+1478   	; 0x1324 <__divmodhi4>
     d5e:	80 5d       	subi	r24, 0xD0	; 208
		LCD_CHAR(':');
     d60:	e8 d9       	rcall	.-3120   	; 0x132 <LCD_CHAR>
     d62:	8a e3       	ldi	r24, 0x3A	; 58
     d64:	e6 d9       	rcall	.-3124   	; 0x132 <LCD_CHAR>
     d66:	24 c0       	rjmp	.+72     	; 0xdb0 <display_normal_mode+0x2a6>
     d68:	80 ec       	ldi	r24, 0xC0	; 192
     d6a:	cd d9       	rcall	.-3174   	; 0x106 <LCD_Comm>
		
	}
	else
	{
		LCD_pos(0,1);
		LCD_STR(AM);
     d6c:	ce 01       	movw	r24, r28
     d6e:	01 96       	adiw	r24, 0x01	; 1
     d70:	e8 d9       	rcall	.-3120   	; 0x142 <LCD_STR>
     d72:	83 ec       	ldi	r24, 0xC3	; 195
     d74:	c8 d9       	rcall	.-3184   	; 0x106 <LCD_Comm>
     d76:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <hour>
		LCD_pos(3,1);
		LCD_CHAR((hour)/10+'0');
     d7a:	1d ec       	ldi	r17, 0xCD	; 205
     d7c:	81 9f       	mul	r24, r17
     d7e:	81 2d       	mov	r24, r1
     d80:	11 24       	eor	r1, r1
     d82:	86 95       	lsr	r24
     d84:	86 95       	lsr	r24
     d86:	86 95       	lsr	r24
     d88:	80 5d       	subi	r24, 0xD0	; 208
     d8a:	d3 d9       	rcall	.-3162   	; 0x132 <LCD_CHAR>
     d8c:	80 91 e6 01 	lds	r24, 0x01E6	; 0x8001e6 <hour>
		LCD_CHAR((hour)%10+'0');
     d90:	81 9f       	mul	r24, r17
     d92:	11 2d       	mov	r17, r1
     d94:	11 24       	eor	r1, r1
     d96:	16 95       	lsr	r17
     d98:	16 95       	lsr	r17
     d9a:	16 95       	lsr	r17
     d9c:	11 0f       	add	r17, r17
     d9e:	91 2f       	mov	r25, r17
     da0:	99 0f       	add	r25, r25
     da2:	99 0f       	add	r25, r25
     da4:	19 0f       	add	r17, r25
     da6:	81 1b       	sub	r24, r17
     da8:	80 5d       	subi	r24, 0xD0	; 208
     daa:	c3 d9       	rcall	.-3194   	; 0x132 <LCD_CHAR>
		LCD_CHAR(':');
     dac:	8a e3       	ldi	r24, 0x3A	; 58
     dae:	c1 d9       	rcall	.-3198   	; 0x132 <LCD_CHAR>
     db0:	86 ec       	ldi	r24, 0xC6	; 198
     db2:	a9 d9       	rcall	.-3246   	; 0x106 <LCD_Comm>
     db4:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <min>
	}
	
	// min displaying
	LCD_pos(6,1);
	LCD_CHAR((min/10)+'0');
     db8:	1d ec       	ldi	r17, 0xCD	; 205
     dba:	81 9f       	mul	r24, r17
     dbc:	81 2d       	mov	r24, r1
     dbe:	11 24       	eor	r1, r1
     dc0:	86 95       	lsr	r24
     dc2:	86 95       	lsr	r24
     dc4:	86 95       	lsr	r24
     dc6:	80 5d       	subi	r24, 0xD0	; 208
     dc8:	b4 d9       	rcall	.-3224   	; 0x132 <LCD_CHAR>
     dca:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <min>
	LCD_CHAR((min%10)+'0');
     dce:	81 9f       	mul	r24, r17
     dd0:	91 2d       	mov	r25, r1
     dd2:	11 24       	eor	r1, r1
     dd4:	96 95       	lsr	r25
     dd6:	96 95       	lsr	r25
     dd8:	96 95       	lsr	r25
     dda:	99 0f       	add	r25, r25
     ddc:	29 2f       	mov	r18, r25
     dde:	22 0f       	add	r18, r18
     de0:	22 0f       	add	r18, r18
     de2:	92 0f       	add	r25, r18
     de4:	89 1b       	sub	r24, r25
     de6:	80 5d       	subi	r24, 0xD0	; 208
     de8:	a4 d9       	rcall	.-3256   	; 0x132 <LCD_CHAR>
     dea:	8a e3       	ldi	r24, 0x3A	; 58
     dec:	a2 d9       	rcall	.-3260   	; 0x132 <LCD_CHAR>
	LCD_CHAR(':');
     dee:	89 ec       	ldi	r24, 0xC9	; 201
     df0:	8a d9       	rcall	.-3308   	; 0x106 <LCD_Comm>
     df2:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <sec>
     df6:	81 9f       	mul	r24, r17
     df8:	81 2d       	mov	r24, r1
	
	// sec displaying
	LCD_pos(9, 1);
	LCD_CHAR((sec/10)+'0');
     dfa:	11 24       	eor	r1, r1
     dfc:	86 95       	lsr	r24
     dfe:	86 95       	lsr	r24
     e00:	86 95       	lsr	r24
     e02:	80 5d       	subi	r24, 0xD0	; 208
     e04:	96 d9       	rcall	.-3284   	; 0x132 <LCD_CHAR>
     e06:	80 91 eb 01 	lds	r24, 0x01EB	; 0x8001eb <sec>
     e0a:	81 9f       	mul	r24, r17
     e0c:	11 2d       	mov	r17, r1
     e0e:	11 24       	eor	r1, r1
	LCD_CHAR((sec%10)+'0');
     e10:	16 95       	lsr	r17
     e12:	16 95       	lsr	r17
     e14:	16 95       	lsr	r17
     e16:	11 0f       	add	r17, r17
     e18:	91 2f       	mov	r25, r17
     e1a:	99 0f       	add	r25, r25
     e1c:	99 0f       	add	r25, r25
     e1e:	19 0f       	add	r17, r25
     e20:	81 1b       	sub	r24, r17
     e22:	80 5d       	subi	r24, 0xD0	; 208
     e24:	86 d9       	rcall	.-3316   	; 0x132 <LCD_CHAR>
     e26:	26 96       	adiw	r28, 0x06	; 6
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
	
}
     e32:	df 91       	pop	r29
     e34:	cf 91       	pop	r28
     e36:	1f 91       	pop	r17
     e38:	0f 91       	pop	r16
     e3a:	08 95       	ret

00000e3c <display_stop_watch>:
     e3c:	80 e8       	ldi	r24, 0x80	; 128
     e3e:	63 d9       	rcall	.-3386   	; 0x106 <LCD_Comm>
     e40:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <hour_stp_w>
     e44:	30 91 ee 01 	lds	r19, 0x01EE	; 0x8001ee <hour_stp_w+0x1>

void display_stop_watch(void)
{
	// hour
	LCD_pos(0,0);
	LCD_CHAR((hour_stp_w)/10+'0');
     e48:	ad ec       	ldi	r26, 0xCD	; 205
     e4a:	bc ec       	ldi	r27, 0xCC	; 204
     e4c:	87 d2       	rcall	.+1294   	; 0x135c <__umulhisi3>
     e4e:	96 95       	lsr	r25
     e50:	87 95       	ror	r24
     e52:	96 95       	lsr	r25
     e54:	87 95       	ror	r24
     e56:	96 95       	lsr	r25
     e58:	87 95       	ror	r24
     e5a:	80 5d       	subi	r24, 0xD0	; 208
     e5c:	6a d9       	rcall	.-3372   	; 0x132 <LCD_CHAR>
	LCD_CHAR((hour_stp_w)%10+'0');
     e5e:	40 91 ed 01 	lds	r20, 0x01ED	; 0x8001ed <hour_stp_w>
     e62:	50 91 ee 01 	lds	r21, 0x01EE	; 0x8001ee <hour_stp_w+0x1>
     e66:	9a 01       	movw	r18, r20
     e68:	ad ec       	ldi	r26, 0xCD	; 205
     e6a:	bc ec       	ldi	r27, 0xCC	; 204
     e6c:	77 d2       	rcall	.+1262   	; 0x135c <__umulhisi3>
     e6e:	96 95       	lsr	r25
     e70:	87 95       	ror	r24
     e72:	96 95       	lsr	r25
     e74:	87 95       	ror	r24
     e76:	96 95       	lsr	r25
     e78:	87 95       	ror	r24
     e7a:	9c 01       	movw	r18, r24
     e7c:	22 0f       	add	r18, r18
     e7e:	33 1f       	adc	r19, r19
     e80:	88 0f       	add	r24, r24
     e82:	99 1f       	adc	r25, r25
     e84:	88 0f       	add	r24, r24
     e86:	99 1f       	adc	r25, r25
     e88:	88 0f       	add	r24, r24
     e8a:	99 1f       	adc	r25, r25
     e8c:	82 0f       	add	r24, r18
     e8e:	93 1f       	adc	r25, r19
     e90:	9a 01       	movw	r18, r20
     e92:	28 1b       	sub	r18, r24
     e94:	39 0b       	sbc	r19, r25
     e96:	c9 01       	movw	r24, r18
     e98:	80 5d       	subi	r24, 0xD0	; 208
	LCD_CHAR('h');
     e9a:	4b d9       	rcall	.-3434   	; 0x132 <LCD_CHAR>
     e9c:	88 e6       	ldi	r24, 0x68	; 104
     e9e:	49 d9       	rcall	.-3438   	; 0x132 <LCD_CHAR>
     ea0:	83 ec       	ldi	r24, 0xC3	; 195
     ea2:	31 d9       	rcall	.-3486   	; 0x106 <LCD_Comm>
	
	// min
	LCD_pos(3,1);
	LCD_CHAR((min_stp_w/10)+'0');
     ea4:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <min_stp_w>
     ea8:	30 91 e3 01 	lds	r19, 0x01E3	; 0x8001e3 <min_stp_w+0x1>
     eac:	ad ec       	ldi	r26, 0xCD	; 205
     eae:	bc ec       	ldi	r27, 0xCC	; 204
     eb0:	55 d2       	rcall	.+1194   	; 0x135c <__umulhisi3>
     eb2:	96 95       	lsr	r25
     eb4:	87 95       	ror	r24
     eb6:	96 95       	lsr	r25
     eb8:	87 95       	ror	r24
     eba:	96 95       	lsr	r25
     ebc:	87 95       	ror	r24
     ebe:	80 5d       	subi	r24, 0xD0	; 208
     ec0:	38 d9       	rcall	.-3472   	; 0x132 <LCD_CHAR>
	LCD_CHAR((min_stp_w%10)+'0');
     ec2:	40 91 e2 01 	lds	r20, 0x01E2	; 0x8001e2 <min_stp_w>
     ec6:	50 91 e3 01 	lds	r21, 0x01E3	; 0x8001e3 <min_stp_w+0x1>
     eca:	9a 01       	movw	r18, r20
     ecc:	ad ec       	ldi	r26, 0xCD	; 205
     ece:	bc ec       	ldi	r27, 0xCC	; 204
     ed0:	45 d2       	rcall	.+1162   	; 0x135c <__umulhisi3>
     ed2:	96 95       	lsr	r25
     ed4:	87 95       	ror	r24
     ed6:	96 95       	lsr	r25
     ed8:	87 95       	ror	r24
     eda:	96 95       	lsr	r25
     edc:	87 95       	ror	r24
     ede:	9c 01       	movw	r18, r24
     ee0:	22 0f       	add	r18, r18
     ee2:	33 1f       	adc	r19, r19
     ee4:	88 0f       	add	r24, r24
     ee6:	99 1f       	adc	r25, r25
     ee8:	88 0f       	add	r24, r24
     eea:	99 1f       	adc	r25, r25
     eec:	88 0f       	add	r24, r24
     eee:	99 1f       	adc	r25, r25
     ef0:	82 0f       	add	r24, r18
     ef2:	93 1f       	adc	r25, r19
     ef4:	9a 01       	movw	r18, r20
     ef6:	28 1b       	sub	r18, r24
     ef8:	39 0b       	sbc	r19, r25
     efa:	c9 01       	movw	r24, r18
     efc:	80 5d       	subi	r24, 0xD0	; 208
	LCD_CHAR(':');
     efe:	19 d9       	rcall	.-3534   	; 0x132 <LCD_CHAR>
     f00:	8a e3       	ldi	r24, 0x3A	; 58
     f02:	17 d9       	rcall	.-3538   	; 0x132 <LCD_CHAR>
     f04:	86 ec       	ldi	r24, 0xC6	; 198
     f06:	ff d8       	rcall	.-3586   	; 0x106 <LCD_Comm>
     f08:	20 91 e4 01 	lds	r18, 0x01E4	; 0x8001e4 <sec_stp_w>
	
	// sec
	LCD_pos(6, 1);
	LCD_CHAR((sec_stp_w/10)+'0');
     f0c:	30 91 e5 01 	lds	r19, 0x01E5	; 0x8001e5 <sec_stp_w+0x1>
     f10:	ad ec       	ldi	r26, 0xCD	; 205
     f12:	bc ec       	ldi	r27, 0xCC	; 204
     f14:	23 d2       	rcall	.+1094   	; 0x135c <__umulhisi3>
     f16:	96 95       	lsr	r25
     f18:	87 95       	ror	r24
     f1a:	96 95       	lsr	r25
     f1c:	87 95       	ror	r24
     f1e:	96 95       	lsr	r25
     f20:	87 95       	ror	r24
     f22:	80 5d       	subi	r24, 0xD0	; 208
     f24:	06 d9       	rcall	.-3572   	; 0x132 <LCD_CHAR>
     f26:	40 91 e4 01 	lds	r20, 0x01E4	; 0x8001e4 <sec_stp_w>
	LCD_CHAR((sec_stp_w%10)+'0');
     f2a:	50 91 e5 01 	lds	r21, 0x01E5	; 0x8001e5 <sec_stp_w+0x1>
     f2e:	9a 01       	movw	r18, r20
     f30:	ad ec       	ldi	r26, 0xCD	; 205
     f32:	bc ec       	ldi	r27, 0xCC	; 204
     f34:	13 d2       	rcall	.+1062   	; 0x135c <__umulhisi3>
     f36:	96 95       	lsr	r25
     f38:	87 95       	ror	r24
     f3a:	96 95       	lsr	r25
     f3c:	87 95       	ror	r24
     f3e:	96 95       	lsr	r25
     f40:	87 95       	ror	r24
     f42:	9c 01       	movw	r18, r24
     f44:	22 0f       	add	r18, r18
     f46:	33 1f       	adc	r19, r19
     f48:	88 0f       	add	r24, r24
     f4a:	99 1f       	adc	r25, r25
     f4c:	88 0f       	add	r24, r24
     f4e:	99 1f       	adc	r25, r25
     f50:	88 0f       	add	r24, r24
     f52:	99 1f       	adc	r25, r25
     f54:	82 0f       	add	r24, r18
     f56:	93 1f       	adc	r25, r19
     f58:	9a 01       	movw	r18, r20
     f5a:	28 1b       	sub	r18, r24
     f5c:	39 0b       	sbc	r19, r25
     f5e:	c9 01       	movw	r24, r18
     f60:	80 5d       	subi	r24, 0xD0	; 208
	LCD_CHAR(':');
     f62:	e7 d8       	rcall	.-3634   	; 0x132 <LCD_CHAR>
     f64:	8a e3       	ldi	r24, 0x3A	; 58
     f66:	e5 d8       	rcall	.-3638   	; 0x132 <LCD_CHAR>
     f68:	89 ec       	ldi	r24, 0xC9	; 201
     f6a:	cd d8       	rcall	.-3686   	; 0x106 <LCD_Comm>
	
	//milliseconds
	LCD_pos(9, 1);
	LCD_CHAR((cnt_stp_w/10)+'0');
     f6c:	20 91 ef 01 	lds	r18, 0x01EF	; 0x8001ef <cnt_stp_w>
     f70:	30 91 f0 01 	lds	r19, 0x01F0	; 0x8001f0 <cnt_stp_w+0x1>
     f74:	ad ec       	ldi	r26, 0xCD	; 205
     f76:	bc ec       	ldi	r27, 0xCC	; 204
     f78:	f1 d1       	rcall	.+994    	; 0x135c <__umulhisi3>
     f7a:	96 95       	lsr	r25
     f7c:	87 95       	ror	r24
     f7e:	96 95       	lsr	r25
     f80:	87 95       	ror	r24
     f82:	96 95       	lsr	r25
     f84:	87 95       	ror	r24
     f86:	80 5d       	subi	r24, 0xD0	; 208
     f88:	d4 d8       	rcall	.-3672   	; 0x132 <LCD_CHAR>
     f8a:	40 91 ef 01 	lds	r20, 0x01EF	; 0x8001ef <cnt_stp_w>
	LCD_CHAR((cnt_stp_w%10)+'0');
     f8e:	50 91 f0 01 	lds	r21, 0x01F0	; 0x8001f0 <cnt_stp_w+0x1>
     f92:	9a 01       	movw	r18, r20
     f94:	ad ec       	ldi	r26, 0xCD	; 205
     f96:	bc ec       	ldi	r27, 0xCC	; 204
     f98:	e1 d1       	rcall	.+962    	; 0x135c <__umulhisi3>
     f9a:	96 95       	lsr	r25
     f9c:	87 95       	ror	r24
     f9e:	96 95       	lsr	r25
     fa0:	87 95       	ror	r24
     fa2:	96 95       	lsr	r25
     fa4:	87 95       	ror	r24
     fa6:	9c 01       	movw	r18, r24
     fa8:	22 0f       	add	r18, r18
     faa:	33 1f       	adc	r19, r19
     fac:	88 0f       	add	r24, r24
     fae:	99 1f       	adc	r25, r25
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	82 0f       	add	r24, r18
     fba:	93 1f       	adc	r25, r19
     fbc:	9a 01       	movw	r18, r20
     fbe:	28 1b       	sub	r18, r24
     fc0:	39 0b       	sbc	r19, r25
     fc2:	c9 01       	movw	r24, r18
     fc4:	80 5d       	subi	r24, 0xD0	; 208
     fc6:	b5 c8       	rjmp	.-3734   	; 0x132 <LCD_CHAR>
     fc8:	08 95       	ret

00000fca <display_alarm_clock>:
     fca:	cf 93       	push	r28
     fcc:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
	
}

void display_alarm_clock(void)
{
	if (isset_alarm)
     fd0:	88 23       	and	r24, r24
     fd2:	09 f4       	brne	.+2      	; 0xfd6 <display_alarm_clock+0xc>
     fd4:	1d c1       	rjmp	.+570    	; 0x1210 <__stack+0x111>
     fd6:	82 e8       	ldi	r24, 0x82	; 130
     fd8:	96 d8       	rcall	.-3796   	; 0x106 <LCD_Comm>
	{
		LCD_pos(2,0);
		LCD_STR("ALARM IS ON");
     fda:	8d e9       	ldi	r24, 0x9D	; 157
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	b1 d8       	rcall	.-3742   	; 0x142 <LCD_STR>
     fe0:	80 ec       	ldi	r24, 0xC0	; 192
     fe2:	91 d8       	rcall	.-3806   	; 0x106 <LCD_Comm>
     fe4:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <year_alarm>
		
		LCD_pos(0,1);
		LCD_CHAR((year_alarm)/1000+'0');
     fe8:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <year_alarm+0x1>
     fec:	36 95       	lsr	r19
     fee:	27 95       	ror	r18
     ff0:	36 95       	lsr	r19
     ff2:	27 95       	ror	r18
     ff4:	36 95       	lsr	r19
     ff6:	27 95       	ror	r18
     ff8:	a5 ec       	ldi	r26, 0xC5	; 197
     ffa:	b0 e2       	ldi	r27, 0x20	; 32
     ffc:	af d1       	rcall	.+862    	; 0x135c <__umulhisi3>
     ffe:	92 95       	swap	r25
    1000:	82 95       	swap	r24
    1002:	8f 70       	andi	r24, 0x0F	; 15
    1004:	89 27       	eor	r24, r25
    1006:	9f 70       	andi	r25, 0x0F	; 15
    1008:	89 27       	eor	r24, r25
    100a:	80 5d       	subi	r24, 0xD0	; 208
    100c:	92 d8       	rcall	.-3804   	; 0x132 <LCD_CHAR>
    100e:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <year_alarm>
		LCD_CHAR((year_alarm/100)%10+'0');
    1012:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <year_alarm+0x1>
    1016:	36 95       	lsr	r19
    1018:	27 95       	ror	r18
    101a:	36 95       	lsr	r19
    101c:	27 95       	ror	r18
    101e:	ab e7       	ldi	r26, 0x7B	; 123
    1020:	b4 e1       	ldi	r27, 0x14	; 20
    1022:	9c d1       	rcall	.+824    	; 0x135c <__umulhisi3>
    1024:	ac 01       	movw	r20, r24
    1026:	56 95       	lsr	r21
    1028:	47 95       	ror	r20
    102a:	9a 01       	movw	r18, r20
    102c:	ad ec       	ldi	r26, 0xCD	; 205
    102e:	bc ec       	ldi	r27, 0xCC	; 204
    1030:	95 d1       	rcall	.+810    	; 0x135c <__umulhisi3>
    1032:	96 95       	lsr	r25
    1034:	87 95       	ror	r24
    1036:	96 95       	lsr	r25
    1038:	87 95       	ror	r24
    103a:	96 95       	lsr	r25
    103c:	87 95       	ror	r24
    103e:	9c 01       	movw	r18, r24
    1040:	22 0f       	add	r18, r18
    1042:	33 1f       	adc	r19, r19
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	88 0f       	add	r24, r24
    104a:	99 1f       	adc	r25, r25
    104c:	88 0f       	add	r24, r24
    104e:	99 1f       	adc	r25, r25
    1050:	82 0f       	add	r24, r18
    1052:	93 1f       	adc	r25, r19
    1054:	9a 01       	movw	r18, r20
    1056:	28 1b       	sub	r18, r24
    1058:	39 0b       	sbc	r19, r25
    105a:	c9 01       	movw	r24, r18
    105c:	80 5d       	subi	r24, 0xD0	; 208
    105e:	69 d8       	rcall	.-3886   	; 0x132 <LCD_CHAR>
    1060:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <year_alarm>
		LCD_CHAR((year_alarm/10)%10+'0');
    1064:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <year_alarm+0x1>
    1068:	ad ec       	ldi	r26, 0xCD	; 205
    106a:	bc ec       	ldi	r27, 0xCC	; 204
    106c:	77 d1       	rcall	.+750    	; 0x135c <__umulhisi3>
    106e:	ac 01       	movw	r20, r24
    1070:	56 95       	lsr	r21
    1072:	47 95       	ror	r20
    1074:	56 95       	lsr	r21
    1076:	47 95       	ror	r20
    1078:	56 95       	lsr	r21
    107a:	47 95       	ror	r20
    107c:	9a 01       	movw	r18, r20
    107e:	6e d1       	rcall	.+732    	; 0x135c <__umulhisi3>
    1080:	96 95       	lsr	r25
    1082:	87 95       	ror	r24
    1084:	96 95       	lsr	r25
    1086:	87 95       	ror	r24
    1088:	96 95       	lsr	r25
    108a:	87 95       	ror	r24
    108c:	9c 01       	movw	r18, r24
    108e:	22 0f       	add	r18, r18
    1090:	33 1f       	adc	r19, r19
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	88 0f       	add	r24, r24
    1098:	99 1f       	adc	r25, r25
    109a:	88 0f       	add	r24, r24
    109c:	99 1f       	adc	r25, r25
    109e:	82 0f       	add	r24, r18
    10a0:	93 1f       	adc	r25, r19
    10a2:	9a 01       	movw	r18, r20
    10a4:	28 1b       	sub	r18, r24
    10a6:	39 0b       	sbc	r19, r25
    10a8:	c9 01       	movw	r24, r18
    10aa:	80 5d       	subi	r24, 0xD0	; 208
    10ac:	42 d8       	rcall	.-3964   	; 0x132 <LCD_CHAR>
    10ae:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <year_alarm>
		LCD_CHAR((year_alarm)%10+'0');
    10b2:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <year_alarm+0x1>
    10b6:	9a 01       	movw	r18, r20
    10b8:	ad ec       	ldi	r26, 0xCD	; 205
    10ba:	bc ec       	ldi	r27, 0xCC	; 204
    10bc:	4f d1       	rcall	.+670    	; 0x135c <__umulhisi3>
    10be:	96 95       	lsr	r25
    10c0:	87 95       	ror	r24
    10c2:	96 95       	lsr	r25
    10c4:	87 95       	ror	r24
    10c6:	96 95       	lsr	r25
    10c8:	87 95       	ror	r24
    10ca:	9c 01       	movw	r18, r24
    10cc:	22 0f       	add	r18, r18
    10ce:	33 1f       	adc	r19, r19
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	88 0f       	add	r24, r24
    10da:	99 1f       	adc	r25, r25
    10dc:	82 0f       	add	r24, r18
    10de:	93 1f       	adc	r25, r19
    10e0:	9a 01       	movw	r18, r20
    10e2:	28 1b       	sub	r18, r24
    10e4:	39 0b       	sbc	r19, r25
    10e6:	c9 01       	movw	r24, r18
    10e8:	80 5d       	subi	r24, 0xD0	; 208
    10ea:	23 d8       	rcall	.-4026   	; 0x132 <LCD_CHAR>
    10ec:	80 e2       	ldi	r24, 0x20	; 32
		LCD_CHAR(' ');
    10ee:	21 d8       	rcall	.-4030   	; 0x132 <LCD_CHAR>
    10f0:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <day_alarm>
		if ((day_alarm/10)>0)
    10f4:	8a 30       	cpi	r24, 0x0A	; 10
    10f6:	d0 f0       	brcs	.+52     	; 0x112c <__stack+0x2d>
    10f8:	cd ec       	ldi	r28, 0xCD	; 205
		{
			LCD_CHAR((day_alarm/10)+'0');
    10fa:	8c 9f       	mul	r24, r28
    10fc:	81 2d       	mov	r24, r1
    10fe:	11 24       	eor	r1, r1
    1100:	86 95       	lsr	r24
    1102:	86 95       	lsr	r24
    1104:	86 95       	lsr	r24
    1106:	80 5d       	subi	r24, 0xD0	; 208
    1108:	14 d8       	rcall	.-4056   	; 0x132 <LCD_CHAR>
    110a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <day_alarm>
			LCD_CHAR((day_alarm%10)+'0');
    110e:	8c 9f       	mul	r24, r28
    1110:	c1 2d       	mov	r28, r1
    1112:	11 24       	eor	r1, r1
    1114:	c6 95       	lsr	r28
    1116:	c6 95       	lsr	r28
    1118:	c6 95       	lsr	r28
    111a:	cc 0f       	add	r28, r28
    111c:	9c 2f       	mov	r25, r28
    111e:	99 0f       	add	r25, r25
    1120:	99 0f       	add	r25, r25
    1122:	c9 0f       	add	r28, r25
    1124:	8c 1b       	sub	r24, r28
    1126:	80 5d       	subi	r24, 0xD0	; 208
    1128:	04 d8       	rcall	.-4088   	; 0x132 <LCD_CHAR>
    112a:	07 c0       	rjmp	.+14     	; 0x113a <__stack+0x3b>
    112c:	80 e3       	ldi	r24, 0x30	; 48
		}
		else
		{
			LCD_CHAR('0');
    112e:	01 d8       	rcall	.-4094   	; 0x132 <LCD_CHAR>
    1130:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <day_alarm>
			LCD_CHAR((day_alarm)+'0');
    1134:	80 5d       	subi	r24, 0xD0	; 208
    1136:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    113a:	8f e2       	ldi	r24, 0x2F	; 47
    113c:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		}
		LCD_CHAR('/');
    1140:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <month_alarm>
		
		if ((month_alarm/10)>0)
    1144:	8a 30       	cpi	r24, 0x0A	; 10
    1146:	e0 f0       	brcs	.+56     	; 0x1180 <__stack+0x81>
    1148:	cd ec       	ldi	r28, 0xCD	; 205
    114a:	8c 9f       	mul	r24, r28
		{
			LCD_CHAR((month_alarm/10)+'0');
    114c:	81 2d       	mov	r24, r1
    114e:	11 24       	eor	r1, r1
    1150:	86 95       	lsr	r24
    1152:	86 95       	lsr	r24
    1154:	86 95       	lsr	r24
    1156:	80 5d       	subi	r24, 0xD0	; 208
    1158:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    115c:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <month_alarm>
			LCD_CHAR((month_alarm%10)+'0');
    1160:	8c 9f       	mul	r24, r28
    1162:	c1 2d       	mov	r28, r1
    1164:	11 24       	eor	r1, r1
    1166:	c6 95       	lsr	r28
    1168:	c6 95       	lsr	r28
    116a:	c6 95       	lsr	r28
    116c:	cc 0f       	add	r28, r28
    116e:	9c 2f       	mov	r25, r28
    1170:	99 0f       	add	r25, r25
    1172:	99 0f       	add	r25, r25
    1174:	c9 0f       	add	r28, r25
    1176:	8c 1b       	sub	r24, r28
    1178:	80 5d       	subi	r24, 0xD0	; 208
    117a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    117e:	08 c0       	rjmp	.+16     	; 0x1190 <__stack+0x91>
    1180:	80 e3       	ldi	r24, 0x30	; 48
    1182:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		}
		else
		{
			LCD_CHAR('0');
    1186:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <month_alarm>
			LCD_CHAR((month_alarm)+'0');
    118a:	80 5d       	subi	r24, 0xD0	; 208
    118c:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1190:	80 e2       	ldi	r24, 0x20	; 32
    1192:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		}
		LCD_CHAR(' ');
    1196:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <hour_alarm>
		LCD_CHAR((hour_alarm)/10+'0');
    119a:	cd ec       	ldi	r28, 0xCD	; 205
    119c:	8c 9f       	mul	r24, r28
    119e:	81 2d       	mov	r24, r1
    11a0:	11 24       	eor	r1, r1
    11a2:	86 95       	lsr	r24
    11a4:	86 95       	lsr	r24
    11a6:	86 95       	lsr	r24
    11a8:	80 5d       	subi	r24, 0xD0	; 208
    11aa:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    11ae:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <hour_alarm>
		LCD_CHAR((hour_alarm)%10+'0');
    11b2:	8c 9f       	mul	r24, r28
    11b4:	91 2d       	mov	r25, r1
    11b6:	11 24       	eor	r1, r1
    11b8:	96 95       	lsr	r25
    11ba:	96 95       	lsr	r25
    11bc:	96 95       	lsr	r25
    11be:	99 0f       	add	r25, r25
    11c0:	29 2f       	mov	r18, r25
    11c2:	22 0f       	add	r18, r18
    11c4:	22 0f       	add	r18, r18
    11c6:	92 0f       	add	r25, r18
    11c8:	89 1b       	sub	r24, r25
    11ca:	80 5d       	subi	r24, 0xD0	; 208
    11cc:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    11d0:	8a e3       	ldi	r24, 0x3A	; 58
    11d2:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR(':');
    11d6:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <min_alarm>
		LCD_CHAR((min_alarm)/10+'0');
    11da:	8c 9f       	mul	r24, r28
    11dc:	81 2d       	mov	r24, r1
    11de:	11 24       	eor	r1, r1
    11e0:	86 95       	lsr	r24
    11e2:	86 95       	lsr	r24
    11e4:	86 95       	lsr	r24
    11e6:	80 5d       	subi	r24, 0xD0	; 208
    11e8:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    11ec:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <min_alarm>
		LCD_CHAR((min_alarm)%10+'0');
    11f0:	8c 9f       	mul	r24, r28
    11f2:	c1 2d       	mov	r28, r1
    11f4:	11 24       	eor	r1, r1
    11f6:	c6 95       	lsr	r28
    11f8:	c6 95       	lsr	r28
    11fa:	c6 95       	lsr	r28
    11fc:	cc 0f       	add	r28, r28
    11fe:	9c 2f       	mov	r25, r28
    1200:	99 0f       	add	r25, r25
    1202:	99 0f       	add	r25, r25
    1204:	c9 0f       	add	r28, r25
    1206:	8c 1b       	sub	r24, r28
    1208:	80 5d       	subi	r24, 0xD0	; 208
    120a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    120e:	01 c0       	rjmp	.+2      	; 0x1212 <__stack+0x113>
    1210:	4e d9       	rcall	.-3428   	; 0x4ae <alarm_clock_display>
		
	}
	else
	{
		alarm_clock_display();
    1212:	cf 91       	pop	r28
    1214:	08 95       	ret

00001216 <main>:
	}
}
    1216:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <cnt>

int main(void)
{
	
	cnt=0;
	sec=0;
    121a:	10 92 eb 01 	sts	0x01EB, r1	; 0x8001eb <sec>
	min=0;
    121e:	10 92 e8 01 	sts	0x01E8, r1	; 0x8001e8 <min>
	hour=23;
    1222:	87 e1       	ldi	r24, 0x17	; 23
    1224:	80 93 e6 01 	sts	0x01E6, r24	; 0x8001e6 <hour>
	day = 31;
    1228:	8f e1       	ldi	r24, 0x1F	; 31
    122a:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <day>
	week_day=7;
    122e:	87 e0       	ldi	r24, 0x07	; 7
    1230:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <week_day>
	month = 12;
    1234:	8c e0       	ldi	r24, 0x0C	; 12
    1236:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <month>
	year = 2020;
    123a:	84 ee       	ldi	r24, 0xE4	; 228
    123c:	97 e0       	ldi	r25, 0x07	; 7
    123e:	90 93 ea 01 	sts	0x01EA, r25	; 0x8001ea <year+0x1>
    1242:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <year>
	
	init_timer();
    1246:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <init_timer>
	interrupt_init();
    124a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <interrupt_init>
	
	// LCD init
	port_init();
    124e:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <port_init>
	LCD_Init();
    1252:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_Init>
	LCD_Clear();
    1256:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
	LCD_Comm(0x0c);
    125a:	8c e0       	ldi	r24, 0x0C	; 12
    125c:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
    1260:	8c ec       	ldi	r24, 0xCC	; 204
    1262:	9c e1       	ldi	r25, 0x1C	; 28
    1264:	01 97       	sbiw	r24, 0x01	; 1
    1266:	f1 f7       	brne	.-4      	; 0x1264 <main+0x4e>
    1268:	00 c0       	rjmp	.+0      	; 0x126a <main+0x54>
    126a:	00 00       	nop
	_delay_ms(2);
	char prev=mode;
	char prev_step = step;
    126c:	f0 90 06 01 	lds	r15, 0x0106	; 0x800106 <step>
	char was_alarm_on =0;
    /* Replace with your application code */
    while (1) 
    {
		if(mode!=prev)
    1270:	c0 91 df 01 	lds	r28, 0x01DF	; 0x8001df <mode>
	LCD_Clear();
	LCD_Comm(0x0c);
	_delay_ms(2);
	char prev=mode;
	char prev_step = step;
	char was_alarm_on =0;
    1274:	d0 e0       	ldi	r29, 0x00	; 0
    1276:	ee 24       	eor	r14, r14
    1278:	e3 94       	inc	r14
			was_alarm_on=1;
		}
		if (was_alarm_on==1 && alarm_clock_check_logic(min,hour,day,month,year)==0)
		{
			disable_alarm_clock();
			PORTB = 0xff;
    127a:	dd 24       	eor	r13, r13
    127c:	da 94       	dec	r13
    127e:	0a c0       	rjmp	.+20     	; 0x1294 <main+0x7e>
	char prev_step = step;
	char was_alarm_on =0;
    /* Replace with your application code */
    while (1) 
    {
		if(mode!=prev)
    1280:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <mode>
    1284:	c8 17       	cp	r28, r24
    1286:	29 f0       	breq	.+10     	; 0x1292 <main+0x7c>
		{
			LCD_Clear();
    1288:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
			prev=mode;
    128c:	c0 91 df 01 	lds	r28, 0x01DF	; 0x8001df <mode>
    1290:	01 c0       	rjmp	.+2      	; 0x1294 <main+0x7e>
	char prev_step = step;
	char was_alarm_on =0;
    /* Replace with your application code */
    while (1) 
    {
		if(mode!=prev)
    1292:	c8 2f       	mov	r28, r24
		{
			LCD_Clear();
			prev=mode;
		}
		if (alarm_clock_check_logic(min,hour,day,month,year)==1)
    1294:	00 91 e9 01 	lds	r16, 0x01E9	; 0x8001e9 <year>
    1298:	10 91 ea 01 	lds	r17, 0x01EA	; 0x8001ea <year+0x1>
    129c:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <month>
    12a0:	40 91 ec 01 	lds	r20, 0x01EC	; 0x8001ec <day>
    12a4:	60 91 e6 01 	lds	r22, 0x01E6	; 0x8001e6 <hour>
    12a8:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <min>
    12ac:	c4 d8       	rcall	.-3704   	; 0x436 <alarm_clock_check_logic>
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	11 f4       	brne	.+4      	; 0x12b6 <main+0xa0>
		{
			led_blink();
    12b2:	e7 d8       	rcall	.-3634   	; 0x482 <led_blink>
    12b4:	02 c0       	rjmp	.+4      	; 0x12ba <main+0xa4>
    12b6:	d1 30       	cpi	r29, 0x01	; 1
			was_alarm_on=1;
		}
		if (was_alarm_on==1 && alarm_clock_check_logic(min,hour,day,month,year)==0)
    12b8:	d9 f4       	brne	.+54     	; 0x12f0 <main+0xda>
    12ba:	00 91 e9 01 	lds	r16, 0x01E9	; 0x8001e9 <year>
    12be:	10 91 ea 01 	lds	r17, 0x01EA	; 0x8001ea <year+0x1>
    12c2:	20 91 e1 01 	lds	r18, 0x01E1	; 0x8001e1 <month>
    12c6:	40 91 ec 01 	lds	r20, 0x01EC	; 0x8001ec <day>
    12ca:	60 91 e6 01 	lds	r22, 0x01E6	; 0x8001e6 <hour>
    12ce:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <min>
    12d2:	b1 d8       	rcall	.-3742   	; 0x436 <alarm_clock_check_logic>
    12d4:	81 11       	cpse	r24, r1
    12d6:	0b c0       	rjmp	.+22     	; 0x12ee <main+0xd8>
    12d8:	0e 94 51 01 	call	0x2a2	; 0x2a2 <disable_alarm_clock>
		{
			disable_alarm_clock();
    12dc:	d8 ba       	out	0x18, r13	; 24
			PORTB = 0xff;
    12de:	8c ec       	ldi	r24, 0xCC	; 204
    12e0:	9c e1       	ldi	r25, 0x1C	; 28
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <main+0xcc>
    12e6:	00 c0       	rjmp	.+0      	; 0x12e8 <main+0xd2>
    12e8:	00 00       	nop
    12ea:	de 2d       	mov	r29, r14
    12ec:	01 c0       	rjmp	.+2      	; 0x12f0 <main+0xda>
    12ee:	de 2d       	mov	r29, r14
    12f0:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <mode>
			_delay_ms(2);
		}
		switch(mode)
    12f4:	81 30       	cpi	r24, 0x01	; 1
    12f6:	31 f0       	breq	.+12     	; 0x1304 <main+0xee>
    12f8:	18 f0       	brcs	.+6      	; 0x1300 <main+0xea>
    12fa:	82 30       	cpi	r24, 0x02	; 2
    12fc:	29 f0       	breq	.+10     	; 0x1308 <main+0xf2>
    12fe:	10 c0       	rjmp	.+32     	; 0x1320 <main+0x10a>
		{
			case 0: display_normal_mode();break;
    1300:	04 dc       	rcall	.-2040   	; 0xb0a <display_normal_mode>
    1302:	be cf       	rjmp	.-132    	; 0x1280 <main+0x6a>
    1304:	9b dd       	rcall	.-1226   	; 0xe3c <display_stop_watch>
			case 1: display_stop_watch(); break;
    1306:	bc cf       	rjmp	.-136    	; 0x1280 <main+0x6a>
    1308:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step>
			case 2:	
			if (prev_step!=step)
    130c:	8f 15       	cp	r24, r15
    130e:	31 f0       	breq	.+12     	; 0x131c <main+0x106>
    1310:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
			{
				LCD_Clear();
    1314:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <cursor_home>
				cursor_home();
				prev_step=step;
    1318:	f0 90 06 01 	lds	r15, 0x0106	; 0x800106 <step>
			}
			display_alarm_clock();
    131c:	56 de       	rcall	.-852    	; 0xfca <display_alarm_clock>
    131e:	b0 cf       	rjmp	.-160    	; 0x1280 <main+0x6a>
			break;
    1320:	f4 db       	rcall	.-2072   	; 0xb0a <display_normal_mode>
			default: display_normal_mode(); break;
    1322:	ae cf       	rjmp	.-164    	; 0x1280 <main+0x6a>

00001324 <__divmodhi4>:
    1324:	97 fb       	bst	r25, 7
    1326:	07 2e       	mov	r0, r23
    1328:	16 f4       	brtc	.+4      	; 0x132e <__divmodhi4+0xa>
    132a:	00 94       	com	r0
    132c:	06 d0       	rcall	.+12     	; 0x133a <__divmodhi4_neg1>
    132e:	77 fd       	sbrc	r23, 7
    1330:	08 d0       	rcall	.+16     	; 0x1342 <__divmodhi4_neg2>
    1332:	23 d0       	rcall	.+70     	; 0x137a <__udivmodhi4>
    1334:	07 fc       	sbrc	r0, 7
    1336:	05 d0       	rcall	.+10     	; 0x1342 <__divmodhi4_neg2>
    1338:	3e f4       	brtc	.+14     	; 0x1348 <__divmodhi4_exit>

0000133a <__divmodhi4_neg1>:
    133a:	90 95       	com	r25
    133c:	81 95       	neg	r24
    133e:	9f 4f       	sbci	r25, 0xFF	; 255
    1340:	08 95       	ret

00001342 <__divmodhi4_neg2>:
    1342:	70 95       	com	r23
    1344:	61 95       	neg	r22
    1346:	7f 4f       	sbci	r23, 0xFF	; 255

00001348 <__divmodhi4_exit>:
    1348:	08 95       	ret

0000134a <__tablejump2__>:
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	00 24       	eor	r0, r0
    1350:	00 1c       	adc	r0, r0
    1352:	0b be       	out	0x3b, r0	; 59
    1354:	07 90       	elpm	r0, Z+
    1356:	f6 91       	elpm	r31, Z
    1358:	e0 2d       	mov	r30, r0
    135a:	09 94       	ijmp

0000135c <__umulhisi3>:
    135c:	a2 9f       	mul	r26, r18
    135e:	b0 01       	movw	r22, r0
    1360:	b3 9f       	mul	r27, r19
    1362:	c0 01       	movw	r24, r0
    1364:	a3 9f       	mul	r26, r19
    1366:	70 0d       	add	r23, r0
    1368:	81 1d       	adc	r24, r1
    136a:	11 24       	eor	r1, r1
    136c:	91 1d       	adc	r25, r1
    136e:	b2 9f       	mul	r27, r18
    1370:	70 0d       	add	r23, r0
    1372:	81 1d       	adc	r24, r1
    1374:	11 24       	eor	r1, r1
    1376:	91 1d       	adc	r25, r1
    1378:	08 95       	ret

0000137a <__udivmodhi4>:
    137a:	aa 1b       	sub	r26, r26
    137c:	bb 1b       	sub	r27, r27
    137e:	51 e1       	ldi	r21, 0x11	; 17
    1380:	07 c0       	rjmp	.+14     	; 0x1390 <__udivmodhi4_ep>

00001382 <__udivmodhi4_loop>:
    1382:	aa 1f       	adc	r26, r26
    1384:	bb 1f       	adc	r27, r27
    1386:	a6 17       	cp	r26, r22
    1388:	b7 07       	cpc	r27, r23
    138a:	10 f0       	brcs	.+4      	; 0x1390 <__udivmodhi4_ep>
    138c:	a6 1b       	sub	r26, r22
    138e:	b7 0b       	sbc	r27, r23

00001390 <__udivmodhi4_ep>:
    1390:	88 1f       	adc	r24, r24
    1392:	99 1f       	adc	r25, r25
    1394:	5a 95       	dec	r21
    1396:	a9 f7       	brne	.-22     	; 0x1382 <__udivmodhi4_loop>
    1398:	80 95       	com	r24
    139a:	90 95       	com	r25
    139c:	bc 01       	movw	r22, r24
    139e:	cd 01       	movw	r24, r26
    13a0:	08 95       	ret

000013a2 <_exit>:
    13a2:	f8 94       	cli

000013a4 <__stop_program>:
    13a4:	ff cf       	rjmp	.-2      	; 0x13a4 <__stop_program>
