
Timer 2- CTC mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001c  00800100  00000762  000007f6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000762  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000b  0080011c  0080011c  00000812  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000812  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000844  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000880  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000141a  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000981  00000000  00000000  00001d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000078c  00000000  00000000  000026b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000188  00000000  00000000  00002e40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f8  00000000  00000000  00002fc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000952  00000000  00000000  000034c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003e12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
   2:	00 00       	nop
   4:	67 c0       	rjmp	.+206    	; 0xd4 <__bad_interrupt>
   6:	00 00       	nop
   8:	65 c0       	rjmp	.+202    	; 0xd4 <__bad_interrupt>
   a:	00 00       	nop
   c:	63 c0       	rjmp	.+198    	; 0xd4 <__bad_interrupt>
   e:	00 00       	nop
  10:	61 c0       	rjmp	.+194    	; 0xd4 <__bad_interrupt>
  12:	00 00       	nop
  14:	5f c0       	rjmp	.+190    	; 0xd4 <__bad_interrupt>
  16:	00 00       	nop
  18:	5d c0       	rjmp	.+186    	; 0xd4 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5b c0       	rjmp	.+182    	; 0xd4 <__bad_interrupt>
  1e:	00 00       	nop
  20:	59 c0       	rjmp	.+178    	; 0xd4 <__bad_interrupt>
  22:	00 00       	nop
  24:	57 c0       	rjmp	.+174    	; 0xd4 <__bad_interrupt>
  26:	00 00       	nop
  28:	55 c0       	rjmp	.+170    	; 0xd4 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	53 c0       	rjmp	.+166    	; 0xd4 <__bad_interrupt>
  2e:	00 00       	nop
  30:	51 c0       	rjmp	.+162    	; 0xd4 <__bad_interrupt>
  32:	00 00       	nop
  34:	4f c0       	rjmp	.+158    	; 0xd4 <__bad_interrupt>
  36:	00 00       	nop
  38:	4d c0       	rjmp	.+154    	; 0xd4 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	0b c1       	rjmp	.+534    	; 0x254 <__vector_15>
  3e:	00 00       	nop
  40:	49 c0       	rjmp	.+146    	; 0xd4 <__bad_interrupt>
  42:	00 00       	nop
  44:	47 c0       	rjmp	.+142    	; 0xd4 <__bad_interrupt>
  46:	00 00       	nop
  48:	45 c0       	rjmp	.+138    	; 0xd4 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	43 c0       	rjmp	.+134    	; 0xd4 <__bad_interrupt>
  4e:	00 00       	nop
  50:	41 c0       	rjmp	.+130    	; 0xd4 <__bad_interrupt>
  52:	00 00       	nop
  54:	3f c0       	rjmp	.+126    	; 0xd4 <__bad_interrupt>
  56:	00 00       	nop
  58:	3d c0       	rjmp	.+122    	; 0xd4 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3b c0       	rjmp	.+118    	; 0xd4 <__bad_interrupt>
  5e:	00 00       	nop
  60:	39 c0       	rjmp	.+114    	; 0xd4 <__bad_interrupt>
  62:	00 00       	nop
  64:	37 c0       	rjmp	.+110    	; 0xd4 <__bad_interrupt>
  66:	00 00       	nop
  68:	35 c0       	rjmp	.+106    	; 0xd4 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	33 c0       	rjmp	.+102    	; 0xd4 <__bad_interrupt>
  6e:	00 00       	nop
  70:	31 c0       	rjmp	.+98     	; 0xd4 <__bad_interrupt>
  72:	00 00       	nop
  74:	2f c0       	rjmp	.+94     	; 0xd4 <__bad_interrupt>
  76:	00 00       	nop
  78:	2d c0       	rjmp	.+90     	; 0xd4 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2b c0       	rjmp	.+86     	; 0xd4 <__bad_interrupt>
  7e:	00 00       	nop
  80:	29 c0       	rjmp	.+82     	; 0xd4 <__bad_interrupt>
  82:	00 00       	nop
  84:	27 c0       	rjmp	.+78     	; 0xd4 <__bad_interrupt>
  86:	00 00       	nop
  88:	25 c0       	rjmp	.+74     	; 0xd4 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	9c 02       	muls	r25, r28
  8e:	a0 02       	muls	r26, r16
  90:	a4 02       	muls	r26, r20
  92:	a8 02       	muls	r26, r24
  94:	ac 02       	muls	r26, r28
  96:	b0 02       	muls	r27, r16
  98:	b4 02       	muls	r27, r20

0000009a <__ctors_end>:
  9a:	11 24       	eor	r1, r1
  9c:	1f be       	out	0x3f, r1	; 63
  9e:	cf ef       	ldi	r28, 0xFF	; 255
  a0:	d0 e1       	ldi	r29, 0x10	; 16
  a2:	de bf       	out	0x3e, r29	; 62
  a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
  a6:	11 e0       	ldi	r17, 0x01	; 1
  a8:	a0 e0       	ldi	r26, 0x00	; 0
  aa:	b1 e0       	ldi	r27, 0x01	; 1
  ac:	e2 e6       	ldi	r30, 0x62	; 98
  ae:	f7 e0       	ldi	r31, 0x07	; 7
  b0:	00 e0       	ldi	r16, 0x00	; 0
  b2:	0b bf       	out	0x3b, r16	; 59
  b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
  b6:	07 90       	elpm	r0, Z+
  b8:	0d 92       	st	X+, r0
  ba:	ac 31       	cpi	r26, 0x1C	; 28
  bc:	b1 07       	cpc	r27, r17
  be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	ac e1       	ldi	r26, 0x1C	; 28
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a7 32       	cpi	r26, 0x27	; 39
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	d9 d2       	rcall	.+1458   	; 0x684 <main>
  d2:	45 c3       	rjmp	.+1674   	; 0x75e <_exit>

000000d4 <__bad_interrupt>:
  d4:	95 cf       	rjmp	.-214    	; 0x0 <__vectors>

000000d6 <PortInit>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	8f ef       	ldi	r24, 0xFF	; 255
  d8:	8a bb       	out	0x1a, r24	; 26
  da:	8f e0       	ldi	r24, 0x0F	; 15
  dc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
  e0:	08 95       	ret

000000e2 <LCD_Data>:
  e2:	e5 e6       	ldi	r30, 0x65	; 101
  e4:	f0 e0       	ldi	r31, 0x00	; 0
  e6:	90 81       	ld	r25, Z
  e8:	94 60       	ori	r25, 0x04	; 4
  ea:	90 83       	st	Z, r25
  ec:	90 81       	ld	r25, Z
  ee:	9d 7f       	andi	r25, 0xFD	; 253
  f0:	90 83       	st	Z, r25
  f2:	90 81       	ld	r25, Z
  f4:	91 60       	ori	r25, 0x01	; 1
  f6:	90 83       	st	Z, r25
  f8:	96 ef       	ldi	r25, 0xF6	; 246
  fa:	9a 95       	dec	r25
  fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Data+0x18>
  fe:	8b bb       	out	0x1b, r24	; 27
 100:	86 ef       	ldi	r24, 0xF6	; 246
 102:	8a 95       	dec	r24
 104:	f1 f7       	brne	.-4      	; 0x102 <LCD_Data+0x20>
 106:	80 81       	ld	r24, Z
 108:	8e 7f       	andi	r24, 0xFE	; 254
 10a:	80 83       	st	Z, r24
 10c:	08 95       	ret

0000010e <LCD_Comm>:
 10e:	e5 e6       	ldi	r30, 0x65	; 101
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	90 81       	ld	r25, Z
 114:	9b 7f       	andi	r25, 0xFB	; 251
 116:	90 83       	st	Z, r25
 118:	90 81       	ld	r25, Z
 11a:	9d 7f       	andi	r25, 0xFD	; 253
 11c:	90 83       	st	Z, r25
 11e:	90 81       	ld	r25, Z
 120:	91 60       	ori	r25, 0x01	; 1
 122:	90 83       	st	Z, r25
 124:	96 ef       	ldi	r25, 0xF6	; 246
 126:	9a 95       	dec	r25
 128:	f1 f7       	brne	.-4      	; 0x126 <LCD_Comm+0x18>
 12a:	8b bb       	out	0x1b, r24	; 27
 12c:	86 ef       	ldi	r24, 0xF6	; 246
 12e:	8a 95       	dec	r24
 130:	f1 f7       	brne	.-4      	; 0x12e <LCD_Comm+0x20>
 132:	80 81       	ld	r24, Z
 134:	8e 7f       	andi	r24, 0xFE	; 254
 136:	80 83       	st	Z, r24
 138:	08 95       	ret

0000013a <LCD_CHAR>:
 13a:	d3 df       	rcall	.-90     	; 0xe2 <LCD_Data>
 13c:	8c ec       	ldi	r24, 0xCC	; 204
 13e:	9c e1       	ldi	r25, 0x1C	; 28
 140:	01 97       	sbiw	r24, 0x01	; 1
 142:	f1 f7       	brne	.-4      	; 0x140 <LCD_CHAR+0x6>
 144:	00 c0       	rjmp	.+0      	; 0x146 <LCD_CHAR+0xc>
 146:	00 00       	nop
 148:	08 95       	ret

0000014a <LCD_STR>:
 14a:	cf 93       	push	r28
 14c:	df 93       	push	r29
 14e:	ec 01       	movw	r28, r24
 150:	88 81       	ld	r24, Y
 152:	88 23       	and	r24, r24
 154:	29 f0       	breq	.+10     	; 0x160 <LCD_STR+0x16>
 156:	21 96       	adiw	r28, 0x01	; 1
 158:	f0 df       	rcall	.-32     	; 0x13a <LCD_CHAR>
 15a:	89 91       	ld	r24, Y+
 15c:	81 11       	cpse	r24, r1
 15e:	fc cf       	rjmp	.-8      	; 0x158 <LCD_STR+0xe>
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <LCD_Clear>:
 166:	81 e0       	ldi	r24, 0x01	; 1
 168:	d2 df       	rcall	.-92     	; 0x10e <LCD_Comm>
 16a:	8c ec       	ldi	r24, 0xCC	; 204
 16c:	9c e1       	ldi	r25, 0x1C	; 28
 16e:	01 97       	sbiw	r24, 0x01	; 1
 170:	f1 f7       	brne	.-4      	; 0x16e <LCD_Clear+0x8>
 172:	00 c0       	rjmp	.+0      	; 0x174 <LCD_Clear+0xe>
 174:	00 00       	nop
 176:	08 95       	ret

00000178 <LCD_Init>:
 178:	88 e3       	ldi	r24, 0x38	; 56
 17a:	c9 df       	rcall	.-110    	; 0x10e <LCD_Comm>
 17c:	8c ec       	ldi	r24, 0xCC	; 204
 17e:	9c e1       	ldi	r25, 0x1C	; 28
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCD_Init+0x8>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_Init+0xe>
 186:	00 00       	nop
 188:	88 e3       	ldi	r24, 0x38	; 56
 18a:	c1 df       	rcall	.-126    	; 0x10e <LCD_Comm>
 18c:	8c ec       	ldi	r24, 0xCC	; 204
 18e:	9c e1       	ldi	r25, 0x1C	; 28
 190:	01 97       	sbiw	r24, 0x01	; 1
 192:	f1 f7       	brne	.-4      	; 0x190 <LCD_Init+0x18>
 194:	00 c0       	rjmp	.+0      	; 0x196 <LCD_Init+0x1e>
 196:	00 00       	nop
 198:	88 e3       	ldi	r24, 0x38	; 56
 19a:	b9 df       	rcall	.-142    	; 0x10e <LCD_Comm>
 19c:	8c ec       	ldi	r24, 0xCC	; 204
 19e:	9c e1       	ldi	r25, 0x1C	; 28
 1a0:	01 97       	sbiw	r24, 0x01	; 1
 1a2:	f1 f7       	brne	.-4      	; 0x1a0 <LCD_Init+0x28>
 1a4:	00 c0       	rjmp	.+0      	; 0x1a6 <LCD_Init+0x2e>
 1a6:	00 00       	nop
 1a8:	8e e0       	ldi	r24, 0x0E	; 14
 1aa:	b1 df       	rcall	.-158    	; 0x10e <LCD_Comm>
 1ac:	8c ec       	ldi	r24, 0xCC	; 204
 1ae:	9c e1       	ldi	r25, 0x1C	; 28
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCD_Init+0x38>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <LCD_Init+0x3e>
 1b6:	00 00       	nop
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	a9 df       	rcall	.-174    	; 0x10e <LCD_Comm>
 1bc:	8c ec       	ldi	r24, 0xCC	; 204
 1be:	9c e1       	ldi	r25, 0x1C	; 28
 1c0:	01 97       	sbiw	r24, 0x01	; 1
 1c2:	f1 f7       	brne	.-4      	; 0x1c0 <LCD_Init+0x48>
 1c4:	00 c0       	rjmp	.+0      	; 0x1c6 <LCD_Init+0x4e>
 1c6:	00 00       	nop
 1c8:	ce cf       	rjmp	.-100    	; 0x166 <LCD_Clear>
 1ca:	08 95       	ret

000001cc <init_timer>:
char sec, min, hour, month, day, week_day;
unsigned int year;

void init_timer()
{
	TIMSK = 0x02; // output compare interrupt enabled
 1cc:	82 e0       	ldi	r24, 0x02	; 2
 1ce:	87 bf       	out	0x37, r24	; 55
	TCCR0 = 0x0f; // CTC mode, prescale 1024
 1d0:	8f e0       	ldi	r24, 0x0F	; 15
 1d2:	83 bf       	out	0x33, r24	; 51
	OCR0 = 99;
 1d4:	83 e6       	ldi	r24, 0x63	; 99
 1d6:	81 bf       	out	0x31, r24	; 49
 1d8:	08 95       	ret

000001da <is_leap_year>:
}

char is_leap_year(int y) // utility function for determining leap year
{
 1da:	9c 01       	movw	r18, r24
	if(y % 4 == 0)
 1dc:	83 70       	andi	r24, 0x03	; 3
 1de:	99 27       	eor	r25, r25
 1e0:	89 2b       	or	r24, r25
 1e2:	81 f4       	brne	.+32     	; 0x204 <is_leap_year+0x2a>
	{
		//Nested if else
		if( y % 100 == 0)
 1e4:	c9 01       	movw	r24, r18
 1e6:	64 e6       	ldi	r22, 0x64	; 100
 1e8:	70 e0       	ldi	r23, 0x00	; 0
 1ea:	7a d2       	rcall	.+1268   	; 0x6e0 <__divmodhi4>
 1ec:	89 2b       	or	r24, r25
 1ee:	61 f4       	brne	.+24     	; 0x208 <is_leap_year+0x2e>
		{
			if ( y % 400 == 0)
				return 1;
 1f0:	c9 01       	movw	r24, r18
 1f2:	60 e9       	ldi	r22, 0x90	; 144
 1f4:	71 e0       	ldi	r23, 0x01	; 1
 1f6:	74 d2       	rcall	.+1256   	; 0x6e0 <__divmodhi4>
 1f8:	9c 01       	movw	r18, r24
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	23 2b       	or	r18, r19
 1fe:	29 f0       	breq	.+10     	; 0x20a <is_leap_year+0x30>
 200:	80 e0       	ldi	r24, 0x00	; 0
 202:	08 95       	ret
		}
		else
			return 1;
	}
	else
		return 0;
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	08 95       	ret
				return 1;
			else
				return 0;
		}
		else
			return 1;
 208:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return 0;
}
 20a:	08 95       	ret

0000020c <month_day_count>:
char month_day_count(int month)
{
	char short_month[]={4,6,9,11};
	
	if (month == 2)
 20c:	82 30       	cpi	r24, 0x02	; 2
 20e:	91 05       	cpc	r25, r1
 210:	21 f0       	breq	.+8      	; 0x21a <month_day_count+0xe>
			return 28;
	}
	
	for(char i=0;i<4;i++)
	{
		if(month==short_month[i])
 212:	84 30       	cpi	r24, 0x04	; 4
 214:	91 05       	cpc	r25, r1
 216:	51 f4       	brne	.+20     	; 0x22c <month_day_count+0x20>
 218:	13 c0       	rjmp	.+38     	; 0x240 <month_day_count+0x34>
{
	char short_month[]={4,6,9,11};
	
	if (month == 2)
	{
		if (is_leap_year(year)==1)
 21a:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <year>
 21e:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <year+0x1>
 222:	db df       	rcall	.-74     	; 0x1da <is_leap_year>
 224:	81 30       	cpi	r24, 0x01	; 1
 226:	71 f0       	breq	.+28     	; 0x244 <month_day_count+0x38>
			return 29;
		else
			return 28;
 228:	8c e1       	ldi	r24, 0x1C	; 28
 22a:	08 95       	ret
	}
	
	for(char i=0;i<4;i++)
	{
		if(month==short_month[i])
 22c:	86 30       	cpi	r24, 0x06	; 6
 22e:	91 05       	cpc	r25, r1
 230:	59 f0       	breq	.+22     	; 0x248 <month_day_count+0x3c>
 232:	89 30       	cpi	r24, 0x09	; 9
 234:	91 05       	cpc	r25, r1
 236:	51 f0       	breq	.+20     	; 0x24c <month_day_count+0x40>
 238:	0b 97       	sbiw	r24, 0x0b	; 11
 23a:	51 f4       	brne	.+20     	; 0x250 <month_day_count+0x44>
			return 31;
 23c:	8f e1       	ldi	r24, 0x1F	; 31
 23e:	08 95       	ret
 240:	8f e1       	ldi	r24, 0x1F	; 31
 242:	08 95       	ret
	char short_month[]={4,6,9,11};
	
	if (month == 2)
	{
		if (is_leap_year(year)==1)
			return 29;
 244:	8d e1       	ldi	r24, 0x1D	; 29
 246:	08 95       	ret
	}
	
	for(char i=0;i<4;i++)
	{
		if(month==short_month[i])
			return 31;
 248:	8f e1       	ldi	r24, 0x1F	; 31
 24a:	08 95       	ret
 24c:	8f e1       	ldi	r24, 0x1F	; 31
 24e:	08 95       	ret
	}
	return 30;	
 250:	8e e1       	ldi	r24, 0x1E	; 30
}
 252:	08 95       	ret

00000254 <__vector_15>:


ISR(TIMER0_COMP_vect)
{
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	0b b6       	in	r0, 0x3b	; 59
 260:	0f 92       	push	r0
 262:	2f 93       	push	r18
 264:	3f 93       	push	r19
 266:	4f 93       	push	r20
 268:	5f 93       	push	r21
 26a:	6f 93       	push	r22
 26c:	7f 93       	push	r23
 26e:	8f 93       	push	r24
 270:	9f 93       	push	r25
 272:	af 93       	push	r26
 274:	bf 93       	push	r27
 276:	cf 93       	push	r28
 278:	ef 93       	push	r30
 27a:	ff 93       	push	r31
	cnt++;
 27c:	80 91 1c 01 	lds	r24, 0x011C	; 0x80011c <__data_end>
 280:	90 91 1d 01 	lds	r25, 0x011D	; 0x80011d <__data_end+0x1>
 284:	01 96       	adiw	r24, 0x01	; 1
	if(cnt==144)
 286:	80 39       	cpi	r24, 0x90	; 144
 288:	91 05       	cpc	r25, r1
 28a:	29 f0       	breq	.+10     	; 0x296 <__vector_15+0x42>
}


ISR(TIMER0_COMP_vect)
{
	cnt++;
 28c:	90 93 1d 01 	sts	0x011D, r25	; 0x80011d <__data_end+0x1>
 290:	80 93 1c 01 	sts	0x011C, r24	; 0x80011c <__data_end>
 294:	52 c0       	rjmp	.+164    	; 0x33a <__vector_15+0xe6>
	if(cnt==144)
	{
		cnt=0;
 296:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>
 29a:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
		sec++;
 29e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sec>
 2a2:	8f 5f       	subi	r24, 0xFF	; 255
 2a4:	80 93 25 01 	sts	0x0125, r24	; 0x800125 <sec>
		if (sec>=60)
 2a8:	8c 33       	cpi	r24, 0x3C	; 60
 2aa:	38 f0       	brcs	.+14     	; 0x2ba <__vector_15+0x66>
		{
			min++;
 2ac:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <min>
 2b0:	8f 5f       	subi	r24, 0xFF	; 255
 2b2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <min>
			sec=0;
 2b6:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <sec>
		}
		if (min==60)
 2ba:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <min>
 2be:	8c 33       	cpi	r24, 0x3C	; 60
 2c0:	39 f4       	brne	.+14     	; 0x2d0 <__vector_15+0x7c>
		{
			hour++;
 2c2:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <hour>
 2c6:	8f 5f       	subi	r24, 0xFF	; 255
 2c8:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <hour>
			min = 0;
 2cc:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <min>
		}
		if(hour>=24)
 2d0:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <hour>
 2d4:	88 31       	cpi	r24, 0x18	; 24
 2d6:	90 f0       	brcs	.+36     	; 0x2fc <__vector_15+0xa8>
		{
			day++;
 2d8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <day>
 2dc:	8f 5f       	subi	r24, 0xFF	; 255
 2de:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <day>
			week_day++;
 2e2:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <week_day>
 2e6:	8f 5f       	subi	r24, 0xFF	; 255
			if (week_day==8)
 2e8:	88 30       	cpi	r24, 0x08	; 8
 2ea:	19 f0       	breq	.+6      	; 0x2f2 <__vector_15+0x9e>
			min = 0;
		}
		if(hour>=24)
		{
			day++;
			week_day++;
 2ec:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <week_day>
 2f0:	03 c0       	rjmp	.+6      	; 0x2f8 <__vector_15+0xa4>
			if (week_day==8)
				week_day=1;
 2f2:	81 e0       	ldi	r24, 0x01	; 1
 2f4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <week_day>
			hour = 0;
 2f8:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <hour>
		}
		if(day>=month_day_count(month))
 2fc:	c0 91 1e 01 	lds	r28, 0x011E	; 0x80011e <month>
 300:	8c 2f       	mov	r24, r28
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	83 df       	rcall	.-250    	; 0x20c <month_day_count>
 306:	90 91 26 01 	lds	r25, 0x0126	; 0x800126 <day>
 30a:	98 17       	cp	r25, r24
 30c:	30 f0       	brcs	.+12     	; 0x31a <__vector_15+0xc6>
		{
			month++;
 30e:	cf 5f       	subi	r28, 0xFF	; 255
 310:	c0 93 1e 01 	sts	0x011E, r28	; 0x80011e <month>
			day = 1;
 314:	81 e0       	ldi	r24, 0x01	; 1
 316:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <day>
		}
		if(month>=12)
 31a:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <month>
 31e:	8c 30       	cpi	r24, 0x0C	; 12
 320:	60 f0       	brcs	.+24     	; 0x33a <__vector_15+0xe6>
		{
			year++;
 322:	80 91 23 01 	lds	r24, 0x0123	; 0x800123 <year>
 326:	90 91 24 01 	lds	r25, 0x0124	; 0x800124 <year+0x1>
 32a:	01 96       	adiw	r24, 0x01	; 1
 32c:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <year+0x1>
 330:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <year>
			month = 1;
 334:	81 e0       	ldi	r24, 0x01	; 1
 336:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <month>
		}			
	}
		
}
 33a:	ff 91       	pop	r31
 33c:	ef 91       	pop	r30
 33e:	cf 91       	pop	r28
 340:	bf 91       	pop	r27
 342:	af 91       	pop	r26
 344:	9f 91       	pop	r25
 346:	8f 91       	pop	r24
 348:	7f 91       	pop	r23
 34a:	6f 91       	pop	r22
 34c:	5f 91       	pop	r21
 34e:	4f 91       	pop	r20
 350:	3f 91       	pop	r19
 352:	2f 91       	pop	r18
 354:	0f 90       	pop	r0
 356:	0b be       	out	0x3b, r0	; 59
 358:	0f 90       	pop	r0
 35a:	0f be       	out	0x3f, r0	; 63
 35c:	0f 90       	pop	r0
 35e:	1f 90       	pop	r1
 360:	18 95       	reti

00000362 <display_normal_mode>:

void display_normal_mode(void)
{
 362:	0f 93       	push	r16
 364:	1f 93       	push	r17
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	00 d0       	rcall	.+0      	; 0x36c <display_normal_mode+0xa>
 36c:	00 d0       	rcall	.+0      	; 0x36e <display_normal_mode+0xc>
 36e:	00 d0       	rcall	.+0      	; 0x370 <display_normal_mode+0xe>
 370:	cd b7       	in	r28, 0x3d	; 61
 372:	de b7       	in	r29, 0x3e	; 62
	char AM[] = "AM";
 374:	81 e4       	ldi	r24, 0x41	; 65
 376:	9d e4       	ldi	r25, 0x4D	; 77
 378:	9a 83       	std	Y+2, r25	; 0x02
 37a:	89 83       	std	Y+1, r24	; 0x01
 37c:	1b 82       	std	Y+3, r1	; 0x03
	char PM[] = "PM";
 37e:	80 e5       	ldi	r24, 0x50	; 80
 380:	9d e4       	ldi	r25, 0x4D	; 77
 382:	9d 83       	std	Y+5, r25	; 0x05
 384:	8c 83       	std	Y+4, r24	; 0x04
 386:	1e 82       	std	Y+6, r1	; 0x06
	}
}

void LCD_pos(unsigned char row, unsigned char col)
{
	LCD_Comm(0x80|(row+col*0x40)); 
 388:	80 e8       	ldi	r24, 0x80	; 128
 38a:	c1 de       	rcall	.-638    	; 0x10e <LCD_Comm>
	// Displaying year
	LCD_pos(0,0);
	LCD_CHAR((year)/1000+'0');
 38c:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <year>
 390:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <year+0x1>
 394:	36 95       	lsr	r19
 396:	27 95       	ror	r18
 398:	36 95       	lsr	r19
 39a:	27 95       	ror	r18
 39c:	36 95       	lsr	r19
 39e:	27 95       	ror	r18
 3a0:	a5 ec       	ldi	r26, 0xC5	; 197
 3a2:	b0 e2       	ldi	r27, 0x20	; 32
 3a4:	b9 d1       	rcall	.+882    	; 0x718 <__umulhisi3>
 3a6:	92 95       	swap	r25
 3a8:	82 95       	swap	r24
 3aa:	8f 70       	andi	r24, 0x0F	; 15
 3ac:	89 27       	eor	r24, r25
 3ae:	9f 70       	andi	r25, 0x0F	; 15
 3b0:	89 27       	eor	r24, r25
 3b2:	80 5d       	subi	r24, 0xD0	; 208
 3b4:	c2 de       	rcall	.-636    	; 0x13a <LCD_CHAR>
	LCD_CHAR((year/100)%10+'0');
 3b6:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <year>
 3ba:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <year+0x1>
 3be:	36 95       	lsr	r19
 3c0:	27 95       	ror	r18
 3c2:	36 95       	lsr	r19
 3c4:	27 95       	ror	r18
 3c6:	ab e7       	ldi	r26, 0x7B	; 123
 3c8:	b4 e1       	ldi	r27, 0x14	; 20
 3ca:	a6 d1       	rcall	.+844    	; 0x718 <__umulhisi3>
 3cc:	ac 01       	movw	r20, r24
 3ce:	56 95       	lsr	r21
 3d0:	47 95       	ror	r20
 3d2:	9a 01       	movw	r18, r20
 3d4:	ad ec       	ldi	r26, 0xCD	; 205
 3d6:	bc ec       	ldi	r27, 0xCC	; 204
 3d8:	9f d1       	rcall	.+830    	; 0x718 <__umulhisi3>
 3da:	96 95       	lsr	r25
 3dc:	87 95       	ror	r24
 3de:	96 95       	lsr	r25
 3e0:	87 95       	ror	r24
 3e2:	96 95       	lsr	r25
 3e4:	87 95       	ror	r24
 3e6:	9c 01       	movw	r18, r24
 3e8:	22 0f       	add	r18, r18
 3ea:	33 1f       	adc	r19, r19
 3ec:	88 0f       	add	r24, r24
 3ee:	99 1f       	adc	r25, r25
 3f0:	88 0f       	add	r24, r24
 3f2:	99 1f       	adc	r25, r25
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	82 0f       	add	r24, r18
 3fa:	93 1f       	adc	r25, r19
 3fc:	9a 01       	movw	r18, r20
 3fe:	28 1b       	sub	r18, r24
 400:	39 0b       	sbc	r19, r25
 402:	c9 01       	movw	r24, r18
 404:	80 5d       	subi	r24, 0xD0	; 208
 406:	99 de       	rcall	.-718    	; 0x13a <LCD_CHAR>
	LCD_CHAR((year/10)%10+'0');
 408:	20 91 23 01 	lds	r18, 0x0123	; 0x800123 <year>
 40c:	30 91 24 01 	lds	r19, 0x0124	; 0x800124 <year+0x1>
 410:	ad ec       	ldi	r26, 0xCD	; 205
 412:	bc ec       	ldi	r27, 0xCC	; 204
 414:	81 d1       	rcall	.+770    	; 0x718 <__umulhisi3>
 416:	ac 01       	movw	r20, r24
 418:	56 95       	lsr	r21
 41a:	47 95       	ror	r20
 41c:	56 95       	lsr	r21
 41e:	47 95       	ror	r20
 420:	56 95       	lsr	r21
 422:	47 95       	ror	r20
 424:	9a 01       	movw	r18, r20
 426:	78 d1       	rcall	.+752    	; 0x718 <__umulhisi3>
 428:	96 95       	lsr	r25
 42a:	87 95       	ror	r24
 42c:	96 95       	lsr	r25
 42e:	87 95       	ror	r24
 430:	96 95       	lsr	r25
 432:	87 95       	ror	r24
 434:	9c 01       	movw	r18, r24
 436:	22 0f       	add	r18, r18
 438:	33 1f       	adc	r19, r19
 43a:	88 0f       	add	r24, r24
 43c:	99 1f       	adc	r25, r25
 43e:	88 0f       	add	r24, r24
 440:	99 1f       	adc	r25, r25
 442:	88 0f       	add	r24, r24
 444:	99 1f       	adc	r25, r25
 446:	82 0f       	add	r24, r18
 448:	93 1f       	adc	r25, r19
 44a:	9a 01       	movw	r18, r20
 44c:	28 1b       	sub	r18, r24
 44e:	39 0b       	sbc	r19, r25
 450:	c9 01       	movw	r24, r18
 452:	80 5d       	subi	r24, 0xD0	; 208
 454:	72 de       	rcall	.-796    	; 0x13a <LCD_CHAR>
	LCD_CHAR((year)%10+'0');
 456:	40 91 23 01 	lds	r20, 0x0123	; 0x800123 <year>
 45a:	50 91 24 01 	lds	r21, 0x0124	; 0x800124 <year+0x1>
 45e:	9a 01       	movw	r18, r20
 460:	ad ec       	ldi	r26, 0xCD	; 205
 462:	bc ec       	ldi	r27, 0xCC	; 204
 464:	59 d1       	rcall	.+690    	; 0x718 <__umulhisi3>
 466:	96 95       	lsr	r25
 468:	87 95       	ror	r24
 46a:	96 95       	lsr	r25
 46c:	87 95       	ror	r24
 46e:	96 95       	lsr	r25
 470:	87 95       	ror	r24
 472:	9c 01       	movw	r18, r24
 474:	22 0f       	add	r18, r18
 476:	33 1f       	adc	r19, r19
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	88 0f       	add	r24, r24
 47e:	99 1f       	adc	r25, r25
 480:	88 0f       	add	r24, r24
 482:	99 1f       	adc	r25, r25
 484:	82 0f       	add	r24, r18
 486:	93 1f       	adc	r25, r19
 488:	9a 01       	movw	r18, r20
 48a:	28 1b       	sub	r18, r24
 48c:	39 0b       	sbc	r19, r25
 48e:	c9 01       	movw	r24, r18
 490:	80 5d       	subi	r24, 0xD0	; 208
 492:	53 de       	rcall	.-858    	; 0x13a <LCD_CHAR>
 494:	85 e8       	ldi	r24, 0x85	; 133
 496:	3b de       	rcall	.-906    	; 0x10e <LCD_Comm>
 498:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <day>
	
	
	// displaying day and month in form of "d/m"
	LCD_pos(5,0);
	if (day/10>0)
 49c:	8a 30       	cpi	r24, 0x0A	; 10
 49e:	d0 f0       	brcs	.+52     	; 0x4d4 <__LOCK_REGION_LENGTH__+0xd4>
	{
		LCD_CHAR((day)/10+'0');
 4a0:	1d ec       	ldi	r17, 0xCD	; 205
 4a2:	81 9f       	mul	r24, r17
 4a4:	81 2d       	mov	r24, r1
 4a6:	11 24       	eor	r1, r1
 4a8:	86 95       	lsr	r24
 4aa:	86 95       	lsr	r24
 4ac:	86 95       	lsr	r24
 4ae:	80 5d       	subi	r24, 0xD0	; 208
 4b0:	44 de       	rcall	.-888    	; 0x13a <LCD_CHAR>
 4b2:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <day>
		LCD_CHAR((day)%10+'0');
 4b6:	81 9f       	mul	r24, r17
 4b8:	11 2d       	mov	r17, r1
 4ba:	11 24       	eor	r1, r1
 4bc:	16 95       	lsr	r17
 4be:	16 95       	lsr	r17
 4c0:	16 95       	lsr	r17
 4c2:	11 0f       	add	r17, r17
 4c4:	91 2f       	mov	r25, r17
 4c6:	99 0f       	add	r25, r25
 4c8:	99 0f       	add	r25, r25
 4ca:	19 0f       	add	r17, r25
 4cc:	81 1b       	sub	r24, r17
 4ce:	80 5d       	subi	r24, 0xD0	; 208
 4d0:	34 de       	rcall	.-920    	; 0x13a <LCD_CHAR>
	}
	else
	LCD_CHAR((day)+'0');
 4d2:	02 c0       	rjmp	.+4      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
 4d4:	80 5d       	subi	r24, 0xD0	; 208

	LCD_CHAR('/');
 4d6:	31 de       	rcall	.-926    	; 0x13a <LCD_CHAR>
 4d8:	8f e2       	ldi	r24, 0x2F	; 47
 4da:	2f de       	rcall	.-930    	; 0x13a <LCD_CHAR>
	if (month/10>0)
 4dc:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <month>
 4e0:	8a 30       	cpi	r24, 0x0A	; 10
 4e2:	d0 f0       	brcs	.+52     	; 0x518 <__LOCK_REGION_LENGTH__+0x118>
	{
		LCD_CHAR((month)/10+'0');
 4e4:	1d ec       	ldi	r17, 0xCD	; 205
 4e6:	81 9f       	mul	r24, r17
 4e8:	81 2d       	mov	r24, r1
 4ea:	11 24       	eor	r1, r1
 4ec:	86 95       	lsr	r24
 4ee:	86 95       	lsr	r24
 4f0:	86 95       	lsr	r24
 4f2:	80 5d       	subi	r24, 0xD0	; 208
 4f4:	22 de       	rcall	.-956    	; 0x13a <LCD_CHAR>
		LCD_CHAR((month)%10+'0');
 4f6:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <month>
 4fa:	81 9f       	mul	r24, r17
 4fc:	11 2d       	mov	r17, r1
 4fe:	11 24       	eor	r1, r1
 500:	16 95       	lsr	r17
 502:	16 95       	lsr	r17
 504:	16 95       	lsr	r17
 506:	11 0f       	add	r17, r17
 508:	91 2f       	mov	r25, r17
 50a:	99 0f       	add	r25, r25
 50c:	99 0f       	add	r25, r25
 50e:	19 0f       	add	r17, r25
 510:	81 1b       	sub	r24, r17
 512:	80 5d       	subi	r24, 0xD0	; 208
	}
	else
	LCD_CHAR((month)+'0');
 514:	12 de       	rcall	.-988    	; 0x13a <LCD_CHAR>
 516:	02 c0       	rjmp	.+4      	; 0x51c <__LOCK_REGION_LENGTH__+0x11c>
 518:	80 5d       	subi	r24, 0xD0	; 208
 51a:	0f de       	rcall	.-994    	; 0x13a <LCD_CHAR>
	//////////////////////////////////////////////////////////////////////////
	
	// displaying week days
	LCD_pos(11,0);
	switch(week_day)
 51c:	8b e8       	ldi	r24, 0x8B	; 139
 51e:	f7 dd       	rcall	.-1042   	; 0x10e <LCD_Comm>
 520:	e0 91 21 01 	lds	r30, 0x0121	; 0x800121 <week_day>
 524:	8e 2f       	mov	r24, r30
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	fc 01       	movw	r30, r24
 52a:	31 97       	sbiw	r30, 0x01	; 1
 52c:	e7 30       	cpi	r30, 0x07	; 7
 52e:	f1 05       	cpc	r31, r1
	{
		case 1: LCD_STR("Mon"); break;
 530:	f0 f4       	brcc	.+60     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 532:	ea 5b       	subi	r30, 0xBA	; 186
 534:	ff 4f       	sbci	r31, 0xFF	; 255
 536:	e7 c0       	rjmp	.+462    	; 0x706 <__tablejump2__>
		case 2: LCD_STR("Tue"); break;
 538:	80 e0       	ldi	r24, 0x00	; 0
 53a:	91 e0       	ldi	r25, 0x01	; 1
 53c:	06 de       	rcall	.-1012   	; 0x14a <LCD_STR>
 53e:	17 c0       	rjmp	.+46     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
		case 3: LCD_STR("Wen"); break;
 540:	84 e0       	ldi	r24, 0x04	; 4
 542:	91 e0       	ldi	r25, 0x01	; 1
 544:	02 de       	rcall	.-1020   	; 0x14a <LCD_STR>
 546:	13 c0       	rjmp	.+38     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
		case 4: LCD_STR("Thu"); break;
 548:	88 e0       	ldi	r24, 0x08	; 8
 54a:	91 e0       	ldi	r25, 0x01	; 1
 54c:	fe dd       	rcall	.-1028   	; 0x14a <LCD_STR>
 54e:	0f c0       	rjmp	.+30     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
		case 5: LCD_STR("Fri"); break;
 550:	8c e0       	ldi	r24, 0x0C	; 12
 552:	91 e0       	ldi	r25, 0x01	; 1
 554:	fa dd       	rcall	.-1036   	; 0x14a <LCD_STR>
 556:	0b c0       	rjmp	.+22     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
		case 6: LCD_STR("Sat"); break;
 558:	80 e1       	ldi	r24, 0x10	; 16
 55a:	91 e0       	ldi	r25, 0x01	; 1
 55c:	f6 dd       	rcall	.-1044   	; 0x14a <LCD_STR>
 55e:	07 c0       	rjmp	.+14     	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
		case 7: LCD_STR("Sun"); break;
 560:	84 e1       	ldi	r24, 0x14	; 20
 562:	91 e0       	ldi	r25, 0x01	; 1
 564:	f2 dd       	rcall	.-1052   	; 0x14a <LCD_STR>
	}
	//////////////////////////////////////////////////////////////////////////
	
	// displaying hours
	if(hour>12)
 566:	03 c0       	rjmp	.+6      	; 0x56e <__LOCK_REGION_LENGTH__+0x16e>
 568:	88 e1       	ldi	r24, 0x18	; 24
 56a:	91 e0       	ldi	r25, 0x01	; 1
 56c:	ee dd       	rcall	.-1060   	; 0x14a <LCD_STR>
 56e:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <hour>
	{
		LCD_pos(0,1);
		LCD_STR(PM);
 572:	8d 30       	cpi	r24, 0x0D	; 13
 574:	e8 f0       	brcs	.+58     	; 0x5b0 <__LOCK_REGION_LENGTH__+0x1b0>
 576:	80 ec       	ldi	r24, 0xC0	; 192
 578:	ca dd       	rcall	.-1132   	; 0x10e <LCD_Comm>
		LCD_pos(3,1);
		LCD_CHAR((hour-12)/10+'0');
 57a:	ce 01       	movw	r24, r28
 57c:	04 96       	adiw	r24, 0x04	; 4
 57e:	e5 dd       	rcall	.-1078   	; 0x14a <LCD_STR>
 580:	83 ec       	ldi	r24, 0xC3	; 195
 582:	c5 dd       	rcall	.-1142   	; 0x10e <LCD_Comm>
 584:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <hour>
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0c 97       	sbiw	r24, 0x0c	; 12
 58c:	0a e0       	ldi	r16, 0x0A	; 10
 58e:	10 e0       	ldi	r17, 0x00	; 0
 590:	b8 01       	movw	r22, r16
		LCD_CHAR((hour-12)%10+'0');
 592:	a6 d0       	rcall	.+332    	; 0x6e0 <__divmodhi4>
 594:	80 e3       	ldi	r24, 0x30	; 48
 596:	86 0f       	add	r24, r22
 598:	d0 dd       	rcall	.-1120   	; 0x13a <LCD_CHAR>
 59a:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <hour>
 59e:	90 e0       	ldi	r25, 0x00	; 0
 5a0:	0c 97       	sbiw	r24, 0x0c	; 12
 5a2:	b8 01       	movw	r22, r16
 5a4:	9d d0       	rcall	.+314    	; 0x6e0 <__divmodhi4>
		LCD_CHAR(':');
 5a6:	80 5d       	subi	r24, 0xD0	; 208
 5a8:	c8 dd       	rcall	.-1136   	; 0x13a <LCD_CHAR>
 5aa:	8a e3       	ldi	r24, 0x3A	; 58
 5ac:	c6 dd       	rcall	.-1140   	; 0x13a <LCD_CHAR>
 5ae:	24 c0       	rjmp	.+72     	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
		
	}
	else
	{
		LCD_pos(0,1);
		LCD_STR(AM);
 5b0:	80 ec       	ldi	r24, 0xC0	; 192
 5b2:	ad dd       	rcall	.-1190   	; 0x10e <LCD_Comm>
 5b4:	ce 01       	movw	r24, r28
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	c8 dd       	rcall	.-1136   	; 0x14a <LCD_STR>
 5ba:	83 ec       	ldi	r24, 0xC3	; 195
 5bc:	a8 dd       	rcall	.-1200   	; 0x10e <LCD_Comm>
		LCD_pos(3,1);
		LCD_CHAR((hour)/10+'0');
 5be:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <hour>
 5c2:	1d ec       	ldi	r17, 0xCD	; 205
 5c4:	81 9f       	mul	r24, r17
 5c6:	81 2d       	mov	r24, r1
 5c8:	11 24       	eor	r1, r1
 5ca:	86 95       	lsr	r24
 5cc:	86 95       	lsr	r24
 5ce:	86 95       	lsr	r24
 5d0:	80 5d       	subi	r24, 0xD0	; 208
 5d2:	b3 dd       	rcall	.-1178   	; 0x13a <LCD_CHAR>
		LCD_CHAR((hour)%10+'0');
 5d4:	80 91 20 01 	lds	r24, 0x0120	; 0x800120 <hour>
 5d8:	81 9f       	mul	r24, r17
 5da:	11 2d       	mov	r17, r1
 5dc:	11 24       	eor	r1, r1
 5de:	16 95       	lsr	r17
 5e0:	16 95       	lsr	r17
 5e2:	16 95       	lsr	r17
 5e4:	11 0f       	add	r17, r17
 5e6:	91 2f       	mov	r25, r17
 5e8:	99 0f       	add	r25, r25
 5ea:	99 0f       	add	r25, r25
 5ec:	19 0f       	add	r17, r25
 5ee:	81 1b       	sub	r24, r17
		LCD_CHAR(':');
 5f0:	80 5d       	subi	r24, 0xD0	; 208
 5f2:	a3 dd       	rcall	.-1210   	; 0x13a <LCD_CHAR>
 5f4:	8a e3       	ldi	r24, 0x3A	; 58
 5f6:	a1 dd       	rcall	.-1214   	; 0x13a <LCD_CHAR>
 5f8:	86 ec       	ldi	r24, 0xC6	; 198
	}
	
	// min displaying
	LCD_pos(6,1);
	LCD_CHAR((min/10)+'0');
 5fa:	89 dd       	rcall	.-1262   	; 0x10e <LCD_Comm>
 5fc:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <min>
 600:	1d ec       	ldi	r17, 0xCD	; 205
 602:	81 9f       	mul	r24, r17
 604:	81 2d       	mov	r24, r1
 606:	11 24       	eor	r1, r1
 608:	86 95       	lsr	r24
 60a:	86 95       	lsr	r24
 60c:	86 95       	lsr	r24
 60e:	80 5d       	subi	r24, 0xD0	; 208
 610:	94 dd       	rcall	.-1240   	; 0x13a <LCD_CHAR>
	LCD_CHAR((min%10)+'0');
 612:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <min>
 616:	81 9f       	mul	r24, r17
 618:	91 2d       	mov	r25, r1
 61a:	11 24       	eor	r1, r1
 61c:	96 95       	lsr	r25
 61e:	96 95       	lsr	r25
 620:	96 95       	lsr	r25
 622:	99 0f       	add	r25, r25
 624:	29 2f       	mov	r18, r25
 626:	22 0f       	add	r18, r18
 628:	22 0f       	add	r18, r18
 62a:	92 0f       	add	r25, r18
 62c:	89 1b       	sub	r24, r25
 62e:	80 5d       	subi	r24, 0xD0	; 208
 630:	84 dd       	rcall	.-1272   	; 0x13a <LCD_CHAR>
	LCD_CHAR(':');
 632:	8a e3       	ldi	r24, 0x3A	; 58
 634:	82 dd       	rcall	.-1276   	; 0x13a <LCD_CHAR>
 636:	89 ec       	ldi	r24, 0xC9	; 201
 638:	6a dd       	rcall	.-1324   	; 0x10e <LCD_Comm>
 63a:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sec>
	
	// sec displaying
	LCD_pos(9, 1);
	LCD_CHAR((sec/10)+'0');
 63e:	81 9f       	mul	r24, r17
 640:	81 2d       	mov	r24, r1
 642:	11 24       	eor	r1, r1
 644:	86 95       	lsr	r24
 646:	86 95       	lsr	r24
 648:	86 95       	lsr	r24
 64a:	80 5d       	subi	r24, 0xD0	; 208
 64c:	76 dd       	rcall	.-1300   	; 0x13a <LCD_CHAR>
 64e:	80 91 25 01 	lds	r24, 0x0125	; 0x800125 <sec>
 652:	81 9f       	mul	r24, r17
	LCD_CHAR((sec%10)+'0');
 654:	11 2d       	mov	r17, r1
 656:	11 24       	eor	r1, r1
 658:	16 95       	lsr	r17
 65a:	16 95       	lsr	r17
 65c:	16 95       	lsr	r17
 65e:	11 0f       	add	r17, r17
 660:	91 2f       	mov	r25, r17
 662:	99 0f       	add	r25, r25
 664:	99 0f       	add	r25, r25
 666:	19 0f       	add	r17, r25
 668:	81 1b       	sub	r24, r17
 66a:	80 5d       	subi	r24, 0xD0	; 208
 66c:	66 dd       	rcall	.-1332   	; 0x13a <LCD_CHAR>
 66e:	26 96       	adiw	r28, 0x06	; 6
 670:	0f b6       	in	r0, 0x3f	; 63
 672:	f8 94       	cli
 674:	de bf       	out	0x3e, r29	; 62
	
}
 676:	0f be       	out	0x3f, r0	; 63
 678:	cd bf       	out	0x3d, r28	; 61
 67a:	df 91       	pop	r29
 67c:	cf 91       	pop	r28
 67e:	1f 91       	pop	r17
 680:	0f 91       	pop	r16
 682:	08 95       	ret

00000684 <main>:
 684:	10 92 1f 01 	sts	0x011F, r1	; 0x80011f <Temp>
 688:	10 92 1d 01 	sts	0x011D, r1	; 0x80011d <__data_end+0x1>

int main(void)
{
	Temp =0;
	cnt=0;
 68c:	10 92 1c 01 	sts	0x011C, r1	; 0x80011c <__data_end>
	sec=0;
 690:	10 92 25 01 	sts	0x0125, r1	; 0x800125 <sec>
	min=45;
 694:	8d e2       	ldi	r24, 0x2D	; 45
 696:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <min>
	hour=18;
 69a:	82 e1       	ldi	r24, 0x12	; 18
 69c:	80 93 20 01 	sts	0x0120, r24	; 0x800120 <hour>
	day = 28;
 6a0:	8c e1       	ldi	r24, 0x1C	; 28
 6a2:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <day>
	week_day=2;
 6a6:	82 e0       	ldi	r24, 0x02	; 2
 6a8:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <week_day>
	month = 4;
 6ac:	84 e0       	ldi	r24, 0x04	; 4
 6ae:	80 93 1e 01 	sts	0x011E, r24	; 0x80011e <month>
	year = 2020;
 6b2:	84 ee       	ldi	r24, 0xE4	; 228
 6b4:	97 e0       	ldi	r25, 0x07	; 7
 6b6:	90 93 24 01 	sts	0x0124, r25	; 0x800124 <year+0x1>
 6ba:	80 93 23 01 	sts	0x0123, r24	; 0x800123 <year>
	init_timer();
 6be:	86 dd       	rcall	.-1268   	; 0x1cc <init_timer>
	SREG |=0x80;
 6c0:	8f b7       	in	r24, 0x3f	; 63
 6c2:	80 68       	ori	r24, 0x80	; 128
	
	// LCD init
	PortInit();
 6c4:	8f bf       	out	0x3f, r24	; 63
	LCD_Init();
 6c6:	07 dd       	rcall	.-1522   	; 0xd6 <PortInit>
	LCD_Clear();
 6c8:	57 dd       	rcall	.-1362   	; 0x178 <LCD_Init>
 6ca:	4d dd       	rcall	.-1382   	; 0x166 <LCD_Clear>
	// cursor off display on
	LCD_Comm(0x0c);
 6cc:	8c e0       	ldi	r24, 0x0C	; 12
 6ce:	1f dd       	rcall	.-1474   	; 0x10e <LCD_Comm>
 6d0:	8c ec       	ldi	r24, 0xCC	; 204
 6d2:	9c e1       	ldi	r25, 0x1C	; 28
 6d4:	01 97       	sbiw	r24, 0x01	; 1
 6d6:	f1 f7       	brne	.-4      	; 0x6d4 <main+0x50>
 6d8:	00 c0       	rjmp	.+0      	; 0x6da <main+0x56>
 6da:	00 00       	nop
	_delay_ms(2);
		
    /* Replace with your application code */
    while (1) 
    {
		display_normal_mode();
 6dc:	42 de       	rcall	.-892    	; 0x362 <display_normal_mode>
 6de:	fe cf       	rjmp	.-4      	; 0x6dc <main+0x58>

000006e0 <__divmodhi4>:
 6e0:	97 fb       	bst	r25, 7
 6e2:	07 2e       	mov	r0, r23
 6e4:	16 f4       	brtc	.+4      	; 0x6ea <__divmodhi4+0xa>
 6e6:	00 94       	com	r0
 6e8:	06 d0       	rcall	.+12     	; 0x6f6 <__divmodhi4_neg1>
 6ea:	77 fd       	sbrc	r23, 7
 6ec:	08 d0       	rcall	.+16     	; 0x6fe <__divmodhi4_neg2>
 6ee:	23 d0       	rcall	.+70     	; 0x736 <__udivmodhi4>
 6f0:	07 fc       	sbrc	r0, 7
 6f2:	05 d0       	rcall	.+10     	; 0x6fe <__divmodhi4_neg2>
 6f4:	3e f4       	brtc	.+14     	; 0x704 <__divmodhi4_exit>

000006f6 <__divmodhi4_neg1>:
 6f6:	90 95       	com	r25
 6f8:	81 95       	neg	r24
 6fa:	9f 4f       	sbci	r25, 0xFF	; 255
 6fc:	08 95       	ret

000006fe <__divmodhi4_neg2>:
 6fe:	70 95       	com	r23
 700:	61 95       	neg	r22
 702:	7f 4f       	sbci	r23, 0xFF	; 255

00000704 <__divmodhi4_exit>:
 704:	08 95       	ret

00000706 <__tablejump2__>:
 706:	ee 0f       	add	r30, r30
 708:	ff 1f       	adc	r31, r31
 70a:	00 24       	eor	r0, r0
 70c:	00 1c       	adc	r0, r0
 70e:	0b be       	out	0x3b, r0	; 59
 710:	07 90       	elpm	r0, Z+
 712:	f6 91       	elpm	r31, Z
 714:	e0 2d       	mov	r30, r0
 716:	09 94       	ijmp

00000718 <__umulhisi3>:
 718:	a2 9f       	mul	r26, r18
 71a:	b0 01       	movw	r22, r0
 71c:	b3 9f       	mul	r27, r19
 71e:	c0 01       	movw	r24, r0
 720:	a3 9f       	mul	r26, r19
 722:	70 0d       	add	r23, r0
 724:	81 1d       	adc	r24, r1
 726:	11 24       	eor	r1, r1
 728:	91 1d       	adc	r25, r1
 72a:	b2 9f       	mul	r27, r18
 72c:	70 0d       	add	r23, r0
 72e:	81 1d       	adc	r24, r1
 730:	11 24       	eor	r1, r1
 732:	91 1d       	adc	r25, r1
 734:	08 95       	ret

00000736 <__udivmodhi4>:
 736:	aa 1b       	sub	r26, r26
 738:	bb 1b       	sub	r27, r27
 73a:	51 e1       	ldi	r21, 0x11	; 17
 73c:	07 c0       	rjmp	.+14     	; 0x74c <__udivmodhi4_ep>

0000073e <__udivmodhi4_loop>:
 73e:	aa 1f       	adc	r26, r26
 740:	bb 1f       	adc	r27, r27
 742:	a6 17       	cp	r26, r22
 744:	b7 07       	cpc	r27, r23
 746:	10 f0       	brcs	.+4      	; 0x74c <__udivmodhi4_ep>
 748:	a6 1b       	sub	r26, r22
 74a:	b7 0b       	sbc	r27, r23

0000074c <__udivmodhi4_ep>:
 74c:	88 1f       	adc	r24, r24
 74e:	99 1f       	adc	r25, r25
 750:	5a 95       	dec	r21
 752:	a9 f7       	brne	.-22     	; 0x73e <__udivmodhi4_loop>
 754:	80 95       	com	r24
 756:	90 95       	com	r25
 758:	bc 01       	movw	r22, r24
 75a:	cd 01       	movw	r24, r26
 75c:	08 95       	ret

0000075e <_exit>:
 75e:	f8 94       	cli

00000760 <__stop_program>:
 760:	ff cf       	rjmp	.-2      	; 0x760 <__stop_program>
