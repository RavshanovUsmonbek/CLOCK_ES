
Timer 2- CTC mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000184  00800100  00001db8  00001e4c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001db8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001a  00800284  00800284  00001fd0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001fd0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00002000  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000203c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002785  00000000  00000000  00002154  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a4f  00000000  00000000  000048d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000013bc  00000000  00000000  00005328  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003e4  00000000  00000000  000066e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006da  00000000  00000000  00006ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015c7  00000000  00000000  000071a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000108  00000000  00000000  00008769  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	ae c4       	rjmp	.+2396   	; 0x962 <__vector_1>
       6:	00 00       	nop
       8:	3a c6       	rjmp	.+3188   	; 0xc7e <__vector_2>
       a:	00 00       	nop
       c:	66 c6       	rjmp	.+3276   	; 0xcda <__vector_3>
       e:	00 00       	nop
      10:	f7 c7       	rjmp	.+4078   	; 0x1000 <__vector_4>
      12:	00 00       	nop
      14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
      32:	00 00       	nop
      34:	51 c0       	rjmp	.+162    	; 0xd8 <__bad_interrupt>
      36:	00 00       	nop
      38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	64 c4       	rjmp	.+2248   	; 0x906 <__vector_15>
      3e:	00 00       	nop
      40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
      42:	00 00       	nop
      44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
      46:	00 00       	nop
      48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
      62:	00 00       	nop
      64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
      66:	00 00       	nop
      68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	c4 09       	sbc	r28, r4
      8e:	c9 09       	sbc	r28, r9
      90:	ce 09       	sbc	r28, r14
      92:	d3 09       	sbc	r29, r3
      94:	d8 09       	sbc	r29, r8
      96:	dd 09       	sbc	r29, r13
      98:	e2 09       	sbc	r30, r2

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e1       	ldi	r29, 0x10	; 16
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	12 e0       	ldi	r17, 0x02	; 2
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e8 eb       	ldi	r30, 0xB8	; 184
      ae:	fd e1       	ldi	r31, 0x1D	; 29
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	a4 38       	cpi	r26, 0x84	; 132
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	22 e0       	ldi	r18, 0x02	; 2
      c2:	a4 e8       	ldi	r26, 0x84	; 132
      c4:	b2 e0       	ldi	r27, 0x02	; 2
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	ae 39       	cpi	r26, 0x9E	; 158
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 da 0d 	call	0x1bb4	; 0x1bb4 <main>
      d4:	0c 94 da 0e 	jmp	0x1db4	; 0x1db4 <_exit>

000000d8 <__bad_interrupt>:
      d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <LCD_Data>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      da:	e5 e6       	ldi	r30, 0x65	; 101
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	90 81       	ld	r25, Z
      e0:	94 60       	ori	r25, 0x04	; 4
      e2:	90 83       	st	Z, r25
      e4:	90 81       	ld	r25, Z
      e6:	9d 7f       	andi	r25, 0xFD	; 253
      e8:	90 83       	st	Z, r25
      ea:	90 81       	ld	r25, Z
      ec:	91 60       	ori	r25, 0x01	; 1
      ee:	90 83       	st	Z, r25
      f0:	96 ef       	ldi	r25, 0xF6	; 246
      f2:	9a 95       	dec	r25
      f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_Data+0x18>
      f6:	8b bb       	out	0x1b, r24	; 27
      f8:	86 ef       	ldi	r24, 0xF6	; 246
      fa:	8a 95       	dec	r24
      fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Data+0x20>
      fe:	80 81       	ld	r24, Z
     100:	8e 7f       	andi	r24, 0xFE	; 254
     102:	80 83       	st	Z, r24
     104:	08 95       	ret

00000106 <LCD_Comm>:
     106:	e5 e6       	ldi	r30, 0x65	; 101
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	90 81       	ld	r25, Z
     10c:	9b 7f       	andi	r25, 0xFB	; 251
     10e:	90 83       	st	Z, r25
     110:	90 81       	ld	r25, Z
     112:	9d 7f       	andi	r25, 0xFD	; 253
     114:	90 83       	st	Z, r25
     116:	90 81       	ld	r25, Z
     118:	91 60       	ori	r25, 0x01	; 1
     11a:	90 83       	st	Z, r25
     11c:	96 ef       	ldi	r25, 0xF6	; 246
     11e:	9a 95       	dec	r25
     120:	f1 f7       	brne	.-4      	; 0x11e <LCD_Comm+0x18>
     122:	8b bb       	out	0x1b, r24	; 27
     124:	86 ef       	ldi	r24, 0xF6	; 246
     126:	8a 95       	dec	r24
     128:	f1 f7       	brne	.-4      	; 0x126 <LCD_Comm+0x20>
     12a:	80 81       	ld	r24, Z
     12c:	8e 7f       	andi	r24, 0xFE	; 254
     12e:	80 83       	st	Z, r24
     130:	08 95       	ret

00000132 <LCD_CHAR>:
     132:	d3 df       	rcall	.-90     	; 0xda <LCD_Data>
     134:	8c ec       	ldi	r24, 0xCC	; 204
     136:	9c e1       	ldi	r25, 0x1C	; 28
     138:	01 97       	sbiw	r24, 0x01	; 1
     13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_CHAR+0x6>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_CHAR+0xc>
     13e:	00 00       	nop
     140:	08 95       	ret

00000142 <LCD_STR>:
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	ec 01       	movw	r28, r24
     148:	88 81       	ld	r24, Y
     14a:	88 23       	and	r24, r24
     14c:	29 f0       	breq	.+10     	; 0x158 <LCD_STR+0x16>
     14e:	21 96       	adiw	r28, 0x01	; 1
     150:	f0 df       	rcall	.-32     	; 0x132 <LCD_CHAR>
     152:	89 91       	ld	r24, Y+
     154:	81 11       	cpse	r24, r1
     156:	fc cf       	rjmp	.-8      	; 0x150 <LCD_STR+0xe>
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <LCD_Clear>:
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Comm>
     162:	8c ec       	ldi	r24, 0xCC	; 204
     164:	9c e1       	ldi	r25, 0x1C	; 28
     166:	01 97       	sbiw	r24, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <LCD_Clear+0x8>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_Clear+0xe>
     16c:	00 00       	nop
     16e:	08 95       	ret

00000170 <LCD_Init>:
     170:	88 e3       	ldi	r24, 0x38	; 56
     172:	c9 df       	rcall	.-110    	; 0x106 <LCD_Comm>
     174:	8c ec       	ldi	r24, 0xCC	; 204
     176:	9c e1       	ldi	r25, 0x1C	; 28
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_Init+0x8>
     17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Init+0xe>
     17e:	00 00       	nop
     180:	88 e3       	ldi	r24, 0x38	; 56
     182:	c1 df       	rcall	.-126    	; 0x106 <LCD_Comm>
     184:	8c ec       	ldi	r24, 0xCC	; 204
     186:	9c e1       	ldi	r25, 0x1C	; 28
     188:	01 97       	sbiw	r24, 0x01	; 1
     18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_Init+0x18>
     18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_Init+0x1e>
     18e:	00 00       	nop
     190:	88 e3       	ldi	r24, 0x38	; 56
     192:	b9 df       	rcall	.-142    	; 0x106 <LCD_Comm>
     194:	8c ec       	ldi	r24, 0xCC	; 204
     196:	9c e1       	ldi	r25, 0x1C	; 28
     198:	01 97       	sbiw	r24, 0x01	; 1
     19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_Init+0x28>
     19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_Init+0x2e>
     19e:	00 00       	nop
     1a0:	8e e0       	ldi	r24, 0x0E	; 14
     1a2:	b1 df       	rcall	.-158    	; 0x106 <LCD_Comm>
     1a4:	8c ec       	ldi	r24, 0xCC	; 204
     1a6:	9c e1       	ldi	r25, 0x1C	; 28
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_Init+0x38>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_Init+0x3e>
     1ae:	00 00       	nop
     1b0:	86 e0       	ldi	r24, 0x06	; 6
     1b2:	a9 df       	rcall	.-174    	; 0x106 <LCD_Comm>
     1b4:	8c ec       	ldi	r24, 0xCC	; 204
     1b6:	9c e1       	ldi	r25, 0x1C	; 28
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_Init+0x48>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_Init+0x4e>
     1be:	00 00       	nop
     1c0:	ce cf       	rjmp	.-100    	; 0x15e <LCD_Clear>
     1c2:	08 95       	ret

000001c4 <cursor_home>:

	}	
}

void cursor_home(void) {
	LCD_Comm(0x02); 
     1c4:	82 e0       	ldi	r24, 0x02	; 2
     1c6:	9f df       	rcall	.-194    	; 0x106 <LCD_Comm>
     1c8:	8c ec       	ldi	r24, 0xCC	; 204
     1ca:	9c e1       	ldi	r25, 0x1C	; 28
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <cursor_home+0x8>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <cursor_home+0xe>
     1d2:	00 00       	nop
     1d4:	08 95       	ret

000001d6 <init_timer>:
// type --> 0 --> time based
/////////////////////////////////////////////////////////////////

void init_timer()
{
	TIMSK = 0x02; // output compare interrupt enabled
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	87 bf       	out	0x37, r24	; 55
	TCCR0 = 0x0f; // CTC mode, prescale 1024
     1da:	8f e0       	ldi	r24, 0x0F	; 15
     1dc:	83 bf       	out	0x33, r24	; 51
	OCR0 = 143;
     1de:	8f e8       	ldi	r24, 0x8F	; 143
     1e0:	81 bf       	out	0x31, r24	; 49
     1e2:	08 95       	ret

000001e4 <port_init>:
}
void port_init()
{
	DDRA = 0xff; // lcd port configuration of DDRA and DDRG
     1e4:	8f ef       	ldi	r24, 0xFF	; 255
     1e6:	8a bb       	out	0x1a, r24	; 26
	DDRG = 0x0f;
     1e8:	9f e0       	ldi	r25, 0x0F	; 15
     1ea:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRB = 0xff; // making PORTB as an output port for leds
     1ee:	87 bb       	out	0x17, r24	; 23
	PORTB= 0xff;
     1f0:	88 bb       	out	0x18, r24	; 24
	DDRD = 0x00; // making PORTD as an input port for recieving signals form switches
     1f2:	11 ba       	out	0x11, r1	; 17
     1f4:	08 95       	ret

000001f6 <interrupt_init>:
}
void interrupt_init(void)
{
	EIMSK=0xff; // enabling all interrupts
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	89 bf       	out	0x39, r24	; 57
	EICRA=0xaa;// enabling falling edge trigger for all interrupts
     1fa:	8a ea       	ldi	r24, 0xAA	; 170
     1fc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB=0xaa; 
     200:	8a bf       	out	0x3a, r24	; 58
	sei();   // setting global interrupt on
     202:	78 94       	sei
     204:	08 95       	ret

00000206 <is_leap_year>:
}
char is_leap_year(int y) // utility function for determining leap year
{
     206:	9c 01       	movw	r18, r24
	if(y % 4 == 0)
     208:	83 70       	andi	r24, 0x03	; 3
     20a:	99 27       	eor	r25, r25
     20c:	89 2b       	or	r24, r25
     20e:	91 f4       	brne	.+36     	; 0x234 <is_leap_year+0x2e>
	{
		//Nested if else
		if( y % 100 == 0)
     210:	c9 01       	movw	r24, r18
     212:	64 e6       	ldi	r22, 0x64	; 100
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__divmodhi4>
     21a:	89 2b       	or	r24, r25
     21c:	69 f4       	brne	.+26     	; 0x238 <is_leap_year+0x32>
		{
			if ( y % 400 == 0)
				return 1;
     21e:	c9 01       	movw	r24, r18
     220:	60 e9       	ldi	r22, 0x90	; 144
     222:	71 e0       	ldi	r23, 0x01	; 1
     224:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__divmodhi4>
     228:	9c 01       	movw	r18, r24
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	23 2b       	or	r18, r19
     22e:	29 f0       	breq	.+10     	; 0x23a <is_leap_year+0x34>
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	08 95       	ret
		}
		else
			return 1;
	}
	else
		return 0;
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	08 95       	ret
				return 1;
			else
				return 0;
		}
		else
			return 1;
     238:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return 0;
}
     23a:	08 95       	ret

0000023c <month_day_count>:
int month_day_count(ui month, ui year)
{
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	68 97       	sbiw	r28, 0x18	; 24
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
     254:	8c 01       	movw	r16, r24
	ui const month_days[]={31,28,31,30,31,30,31,31,30,31,30,31};
     256:	98 e1       	ldi	r25, 0x18	; 24
     258:	e1 e3       	ldi	r30, 0x31	; 49
     25a:	f1 e0       	ldi	r31, 0x01	; 1
     25c:	de 01       	movw	r26, r28
     25e:	11 96       	adiw	r26, 0x01	; 1
     260:	01 90       	ld	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	9a 95       	dec	r25
     266:	e1 f7       	brne	.-8      	; 0x260 <month_day_count+0x24>
	if (month==2 && is_leap_year(year))
     268:	02 30       	cpi	r16, 0x02	; 2
     26a:	11 05       	cpc	r17, r1
     26c:	21 f4       	brne	.+8      	; 0x276 <month_day_count+0x3a>
     26e:	cb 01       	movw	r24, r22
     270:	ca df       	rcall	.-108    	; 0x206 <is_leap_year>
     272:	81 11       	cpse	r24, r1
     274:	09 c0       	rjmp	.+18     	; 0x288 <month_day_count+0x4c>
	{
		return 29;
	}
	return month_days[month-1];
     276:	f8 01       	movw	r30, r16
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	ee 0f       	add	r30, r30
     27c:	ff 1f       	adc	r31, r31
     27e:	ec 0f       	add	r30, r28
     280:	fd 1f       	adc	r31, r29
     282:	81 81       	ldd	r24, Z+1	; 0x01
     284:	92 81       	ldd	r25, Z+2	; 0x02
     286:	02 c0       	rjmp	.+4      	; 0x28c <month_day_count+0x50>
int month_day_count(ui month, ui year)
{
	ui const month_days[]={31,28,31,30,31,30,31,31,30,31,30,31};
	if (month==2 && is_leap_year(year))
	{
		return 29;
     288:	8d e1       	ldi	r24, 0x1D	; 29
     28a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return month_days[month-1];
}
     28c:	68 96       	adiw	r28, 0x18	; 24
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	de bf       	out	0x3e, r29	; 62
     294:	0f be       	out	0x3f, r0	; 63
     296:	cd bf       	out	0x3d, r28	; 61
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	08 95       	ret

000002a2 <disable_alarm_clock>:
void disable_alarm_clock(void)
{
			min_alarm=0;
     2a2:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <min_alarm>
			hour_alarm=0;
     2a6:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <hour_alarm>
			day_alarm=0;
     2aa:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <day_alarm>
			month_alarm=0;
     2ae:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <month_alarm>
			year_alarm=0;
     2b2:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <year_alarm+0x1>
     2b6:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <year_alarm>
			
			step=0;
     2ba:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <step>
			
			isset_alarm=0;
     2be:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <isset_alarm>
			is_current_date=0;
     2c2:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <__data_end>
			temp_year=year;
     2c6:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <year>
     2ca:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <year+0x1>
     2ce:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			type_of_alarm=77;
     2d6:	8d e4       	ldi	r24, 0x4D	; 77
     2d8:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <type_of_alarm>
			
			// clearing temp variables
			for (uch i=0;i<4;i++)
			{
				temp_arr[i]=0;
     2dc:	e2 e0       	ldi	r30, 0x02	; 2
     2de:	f1 e0       	ldi	r31, 0x01	; 1
     2e0:	10 82       	st	Z, r1
     2e2:	11 82       	std	Z+1, r1	; 0x01
				if (i>1)
				{
					temp_arr[i]=1;
     2e4:	81 e0       	ldi	r24, 0x01	; 1
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	83 83       	std	Z+3, r24	; 0x03
     2ea:	08 95       	ret

000002ec <normal_clock_logic>:
				}
			}
}
void normal_clock_logic(void)
{
     2ec:	1f 93       	push	r17
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
	cnt++;
     2f2:	80 91 8c 02 	lds	r24, 0x028C	; 0x80028c <cnt>
     2f6:	8f 5f       	subi	r24, 0xFF	; 255
	if(cnt==100)
     2f8:	84 36       	cpi	r24, 0x64	; 100
     2fa:	19 f0       	breq	.+6      	; 0x302 <normal_clock_logic+0x16>
				}
			}
}
void normal_clock_logic(void)
{
	cnt++;
     2fc:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <cnt>
     300:	54 c0       	rjmp	.+168    	; 0x3aa <normal_clock_logic+0xbe>
	if(cnt==100)
	{
		cnt=0;
     302:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <cnt>
		sec++;
     306:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <sec>
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	80 93 98 02 	sts	0x0298, r24	; 0x800298 <sec>
		if (sec>=60)
     310:	8c 33       	cpi	r24, 0x3C	; 60
     312:	38 f0       	brcs	.+14     	; 0x322 <normal_clock_logic+0x36>
		{
			min++;
     314:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <min>
     318:	8f 5f       	subi	r24, 0xFF	; 255
     31a:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <min>
			sec=0;
     31e:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <sec>
		}
		if (min>=60)
     322:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <min>
     326:	8c 33       	cpi	r24, 0x3C	; 60
     328:	38 f0       	brcs	.+14     	; 0x338 <normal_clock_logic+0x4c>
		{
			hour++;
     32a:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <hour>
     32e:	8f 5f       	subi	r24, 0xFF	; 255
     330:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <hour>
			min = 0;
     334:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <min>
		}
		if(hour>=24)
     338:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <hour>
     33c:	88 31       	cpi	r24, 0x18	; 24
     33e:	60 f0       	brcs	.+24     	; 0x358 <normal_clock_logic+0x6c>
		{
			day++;
     340:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <day>
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <day>
			week_day++;
     34a:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <week_day>
     34e:	8f 5f       	subi	r24, 0xFF	; 255
     350:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <week_day>
			hour = 0;
     354:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <hour>
		}
		if (week_day>=8)
     358:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <week_day>
     35c:	88 30       	cpi	r24, 0x08	; 8
     35e:	18 f0       	brcs	.+6      	; 0x366 <normal_clock_logic+0x7a>
		{
			week_day=1;
     360:	81 e0       	ldi	r24, 0x01	; 1
     362:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <week_day>
		}
		if(day>month_day_count(month,year))
     366:	c0 91 96 02 	lds	r28, 0x0296	; 0x800296 <year>
     36a:	d0 91 97 02 	lds	r29, 0x0297	; 0x800297 <year+0x1>
     36e:	10 91 8d 02 	lds	r17, 0x028D	; 0x80028d <month>
     372:	be 01       	movw	r22, r28
     374:	81 2f       	mov	r24, r17
     376:	90 e0       	ldi	r25, 0x00	; 0
     378:	61 df       	rcall	.-318    	; 0x23c <month_day_count>
     37a:	20 91 99 02 	lds	r18, 0x0299	; 0x800299 <day>
     37e:	30 e0       	ldi	r19, 0x00	; 0
     380:	82 17       	cp	r24, r18
     382:	93 07       	cpc	r25, r19
     384:	34 f4       	brge	.+12     	; 0x392 <normal_clock_logic+0xa6>
		{
			month++;
     386:	1f 5f       	subi	r17, 0xFF	; 255
     388:	10 93 8d 02 	sts	0x028D, r17	; 0x80028d <month>
			day = 1;
     38c:	81 e0       	ldi	r24, 0x01	; 1
     38e:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <day>
		}
		if(month>12)
     392:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <month>
     396:	8d 30       	cpi	r24, 0x0D	; 13
     398:	40 f0       	brcs	.+16     	; 0x3aa <normal_clock_logic+0xbe>
		{
			year++;
     39a:	21 96       	adiw	r28, 0x01	; 1
     39c:	d0 93 97 02 	sts	0x0297, r29	; 0x800297 <year+0x1>
     3a0:	c0 93 96 02 	sts	0x0296, r28	; 0x800296 <year>
			month = 1;
     3a4:	81 e0       	ldi	r24, 0x01	; 1
     3a6:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <month>
		}
	}
}
     3aa:	df 91       	pop	r29
     3ac:	cf 91       	pop	r28
     3ae:	1f 91       	pop	r17
     3b0:	08 95       	ret

000003b2 <stop_watch_logic>:
void stop_watch_logic(void)
{
	cnt_stp_w++;
     3b2:	80 91 9c 02 	lds	r24, 0x029C	; 0x80029c <cnt_stp_w>
     3b6:	90 91 9d 02 	lds	r25, 0x029D	; 0x80029d <cnt_stp_w+0x1>
     3ba:	01 96       	adiw	r24, 0x01	; 1
	if(cnt_stp_w>=100)
     3bc:	84 36       	cpi	r24, 0x64	; 100
     3be:	91 05       	cpc	r25, r1
     3c0:	28 f4       	brcc	.+10     	; 0x3cc <stop_watch_logic+0x1a>
		}
	}
}
void stop_watch_logic(void)
{
	cnt_stp_w++;
     3c2:	90 93 9d 02 	sts	0x029D, r25	; 0x80029d <cnt_stp_w+0x1>
     3c6:	80 93 9c 02 	sts	0x029C, r24	; 0x80029c <cnt_stp_w>
     3ca:	08 95       	ret
	if(cnt_stp_w>=100)
	{
		cnt_stp_w=0;
     3cc:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <cnt_stp_w+0x1>
     3d0:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <cnt_stp_w>
		sec_stp_w++;
     3d4:	80 91 90 02 	lds	r24, 0x0290	; 0x800290 <sec_stp_w>
     3d8:	90 91 91 02 	lds	r25, 0x0291	; 0x800291 <sec_stp_w+0x1>
     3dc:	01 96       	adiw	r24, 0x01	; 1
     3de:	90 93 91 02 	sts	0x0291, r25	; 0x800291 <sec_stp_w+0x1>
     3e2:	80 93 90 02 	sts	0x0290, r24	; 0x800290 <sec_stp_w>
		if (sec_stp_w>=60)
     3e6:	cc 97       	sbiw	r24, 0x3c	; 60
     3e8:	68 f0       	brcs	.+26     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		{
			min_stp_w++;
     3ea:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <min_stp_w>
     3ee:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <min_stp_w+0x1>
     3f2:	01 96       	adiw	r24, 0x01	; 1
     3f4:	90 93 8f 02 	sts	0x028F, r25	; 0x80028f <min_stp_w+0x1>
     3f8:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <min_stp_w>
			sec_stp_w=0;
     3fc:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <sec_stp_w+0x1>
     400:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <sec_stp_w>
		}
		if (min_stp_w>=60)
     404:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <min_stp_w>
     408:	90 91 8f 02 	lds	r25, 0x028F	; 0x80028f <min_stp_w+0x1>
     40c:	cc 97       	sbiw	r24, 0x3c	; 60
     40e:	68 f0       	brcs	.+26     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
		{
			hour_stp_w++;
     410:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <hour_stp_w>
     414:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <hour_stp_w+0x1>
     418:	01 96       	adiw	r24, 0x01	; 1
     41a:	90 93 9b 02 	sts	0x029B, r25	; 0x80029b <hour_stp_w+0x1>
     41e:	80 93 9a 02 	sts	0x029A, r24	; 0x80029a <hour_stp_w>
			min_stp_w = 0;
     422:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <min_stp_w+0x1>
     426:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <min_stp_w>
		}
		if(hour_stp_w>=24)
     42a:	80 91 9a 02 	lds	r24, 0x029A	; 0x80029a <hour_stp_w>
     42e:	90 91 9b 02 	lds	r25, 0x029B	; 0x80029b <hour_stp_w+0x1>
     432:	48 97       	sbiw	r24, 0x18	; 24
     434:	20 f0       	brcs	.+8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
		{
			hour_stp_w = 0;
     436:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <hour_stp_w+0x1>
     43a:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <hour_stp_w>
     43e:	08 95       	ret

00000440 <alarm_clock_check_logic>:
		}
	}
}
uch alarm_clock_check_logic(uch min, uch hour, uch day, uch month, ui year)
{
     440:	0f 93       	push	r16
     442:	1f 93       	push	r17
	if (type_of_alarm==1)
     444:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <type_of_alarm>
     448:	91 30       	cpi	r25, 0x01	; 1
     44a:	d1 f4       	brne	.+52     	; 0x480 <alarm_clock_check_logic+0x40>
	{
		if(min_alarm==min && hour_alarm==hour && day_alarm==day && month_alarm==month && year_alarm==year)
     44c:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <min_alarm>
     450:	98 13       	cpse	r25, r24
     452:	21 c0       	rjmp	.+66     	; 0x496 <alarm_clock_check_logic+0x56>
     454:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <hour_alarm>
     458:	86 13       	cpse	r24, r22
     45a:	1f c0       	rjmp	.+62     	; 0x49a <alarm_clock_check_logic+0x5a>
     45c:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <day_alarm>
     460:	84 13       	cpse	r24, r20
     462:	1d c0       	rjmp	.+58     	; 0x49e <alarm_clock_check_logic+0x5e>
     464:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <month_alarm>
     468:	82 13       	cpse	r24, r18
     46a:	1b c0       	rjmp	.+54     	; 0x4a2 <alarm_clock_check_logic+0x62>
		{
			return 1;
     46c:	81 e0       	ldi	r24, 0x01	; 1
     46e:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <year_alarm>
     472:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <year_alarm+0x1>
     476:	20 17       	cp	r18, r16
     478:	31 07       	cpc	r19, r17
     47a:	b1 f0       	breq	.+44     	; 0x4a8 <alarm_clock_check_logic+0x68>
     47c:	80 e0       	ldi	r24, 0x00	; 0
     47e:	14 c0       	rjmp	.+40     	; 0x4a8 <alarm_clock_check_logic+0x68>
		}
	} 
	else
	{
		if (min_alarm==min && hour_alarm==hour)
     480:	90 91 8a 02 	lds	r25, 0x028A	; 0x80028a <min_alarm>
     484:	89 13       	cpse	r24, r25
     486:	0f c0       	rjmp	.+30     	; 0x4a6 <alarm_clock_check_logic+0x66>
{
	if (type_of_alarm==1)
	{
		if(min_alarm==min && hour_alarm==hour && day_alarm==day && month_alarm==month && year_alarm==year)
		{
			return 1;
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <hour_alarm>
     48e:	96 17       	cp	r25, r22
     490:	59 f0       	breq	.+22     	; 0x4a8 <alarm_clock_check_logic+0x68>
     492:	80 e0       	ldi	r24, 0x00	; 0
     494:	09 c0       	rjmp	.+18     	; 0x4a8 <alarm_clock_check_logic+0x68>
		if (min_alarm==min && hour_alarm==hour)
		{
			return 1;
		}
	}
	return 0;
     496:	80 e0       	ldi	r24, 0x00	; 0
     498:	07 c0       	rjmp	.+14     	; 0x4a8 <alarm_clock_check_logic+0x68>
     49a:	80 e0       	ldi	r24, 0x00	; 0
     49c:	05 c0       	rjmp	.+10     	; 0x4a8 <alarm_clock_check_logic+0x68>
     49e:	80 e0       	ldi	r24, 0x00	; 0
     4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <alarm_clock_check_logic+0x68>
     4a2:	80 e0       	ldi	r24, 0x00	; 0
     4a4:	01 c0       	rjmp	.+2      	; 0x4a8 <alarm_clock_check_logic+0x68>
     4a6:	80 e0       	ldi	r24, 0x00	; 0
}
     4a8:	1f 91       	pop	r17
     4aa:	0f 91       	pop	r16
     4ac:	08 95       	ret

000004ae <led_blink>:
void led_blink(void)  // led on and off all bits for INT1
{
	PORTB = 0xff;
     4ae:	8f ef       	ldi	r24, 0xFF	; 255
     4b0:	88 bb       	out	0x18, r24	; 24
     4b2:	2f ef       	ldi	r18, 0xFF	; 255
     4b4:	8f e7       	ldi	r24, 0x7F	; 127
     4b6:	9d e0       	ldi	r25, 0x0D	; 13
     4b8:	21 50       	subi	r18, 0x01	; 1
     4ba:	80 40       	sbci	r24, 0x00	; 0
     4bc:	90 40       	sbci	r25, 0x00	; 0
     4be:	e1 f7       	brne	.-8      	; 0x4b8 <led_blink+0xa>
     4c0:	00 c0       	rjmp	.+0      	; 0x4c2 <led_blink+0x14>
     4c2:	00 00       	nop
	_delay_ms(300);
	PORTB = 0x00;
     4c4:	18 ba       	out	0x18, r1	; 24
     4c6:	2f ef       	ldi	r18, 0xFF	; 255
     4c8:	8f e7       	ldi	r24, 0x7F	; 127
     4ca:	9d e0       	ldi	r25, 0x0D	; 13
     4cc:	21 50       	subi	r18, 0x01	; 1
     4ce:	80 40       	sbci	r24, 0x00	; 0
     4d0:	90 40       	sbci	r25, 0x00	; 0
     4d2:	e1 f7       	brne	.-8      	; 0x4cc <led_blink+0x1e>
     4d4:	00 c0       	rjmp	.+0      	; 0x4d6 <led_blink+0x28>
     4d6:	00 00       	nop
     4d8:	08 95       	ret

000004da <alarm_clock_display>:
	_delay_ms(300);
}
void alarm_clock_display(void)
{
     4da:	0f 93       	push	r16
     4dc:	1f 93       	push	r17
     4de:	cf 93       	push	r28
	if (!isset_alarm)
     4e0:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <isset_alarm>
     4e4:	81 11       	cpse	r24, r1
     4e6:	25 c1       	rjmp	.+586    	; 0x732 <alarm_clock_display+0x258>
	{
		switch(step)
     4e8:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <step>
     4ec:	83 30       	cpi	r24, 0x03	; 3
     4ee:	09 f4       	brne	.+2      	; 0x4f2 <alarm_clock_display+0x18>
     4f0:	b2 c0       	rjmp	.+356    	; 0x656 <alarm_clock_display+0x17c>
     4f2:	30 f4       	brcc	.+12     	; 0x500 <alarm_clock_display+0x26>
     4f4:	81 30       	cpi	r24, 0x01	; 1
     4f6:	59 f0       	breq	.+22     	; 0x50e <alarm_clock_display+0x34>
     4f8:	82 30       	cpi	r24, 0x02	; 2
     4fa:	09 f4       	brne	.+2      	; 0x4fe <alarm_clock_display+0x24>
     4fc:	9a c0       	rjmp	.+308    	; 0x632 <alarm_clock_display+0x158>
     4fe:	19 c1       	rjmp	.+562    	; 0x732 <alarm_clock_display+0x258>
     500:	84 30       	cpi	r24, 0x04	; 4
     502:	09 f4       	brne	.+2      	; 0x506 <alarm_clock_display+0x2c>
     504:	cd c0       	rjmp	.+410    	; 0x6a0 <alarm_clock_display+0x1c6>
     506:	85 30       	cpi	r24, 0x05	; 5
     508:	09 f4       	brne	.+2      	; 0x50c <alarm_clock_display+0x32>
     50a:	ef c0       	rjmp	.+478    	; 0x6ea <alarm_clock_display+0x210>
     50c:	12 c1       	rjmp	.+548    	; 0x732 <alarm_clock_display+0x258>
	}
}

void LCD_pos(unsigned char row, unsigned char col)
{
	LCD_Comm(0x80|(row+col*0x40)); 
     50e:	82 e8       	ldi	r24, 0x82	; 130
     510:	fa dd       	rcall	.-1036   	; 0x106 <LCD_Comm>
		{
			case 1:
			LCD_pos(2,0);
			LCD_STR("ALARM | YEAR ");
     512:	89 e4       	ldi	r24, 0x49	; 73
     514:	91 e0       	ldi	r25, 0x01	; 1
     516:	15 de       	rcall	.-982    	; 0x142 <LCD_STR>
     518:	86 ec       	ldi	r24, 0xC6	; 198
     51a:	f5 dd       	rcall	.-1046   	; 0x106 <LCD_Comm>
     51c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_pos(6,1);
			LCD_CHAR((temp_year)/1000+'0');
     520:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     524:	36 95       	lsr	r19
     526:	27 95       	ror	r18
     528:	36 95       	lsr	r19
     52a:	27 95       	ror	r18
     52c:	36 95       	lsr	r19
     52e:	27 95       	ror	r18
     530:	a5 ec       	ldi	r26, 0xC5	; 197
     532:	b0 e2       	ldi	r27, 0x20	; 32
     534:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__umulhisi3>
     538:	92 95       	swap	r25
     53a:	82 95       	swap	r24
     53c:	8f 70       	andi	r24, 0x0F	; 15
     53e:	89 27       	eor	r24, r25
     540:	9f 70       	andi	r25, 0x0F	; 15
     542:	89 27       	eor	r24, r25
     544:	80 5d       	subi	r24, 0xD0	; 208
     546:	f5 dd       	rcall	.-1046   	; 0x132 <LCD_CHAR>
     548:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_CHAR((temp_year/100)%10+'0');
     54c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     550:	36 95       	lsr	r19
     552:	27 95       	ror	r18
     554:	36 95       	lsr	r19
     556:	27 95       	ror	r18
     558:	ab e7       	ldi	r26, 0x7B	; 123
     55a:	b4 e1       	ldi	r27, 0x14	; 20
     55c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__umulhisi3>
     560:	ac 01       	movw	r20, r24
     562:	56 95       	lsr	r21
     564:	47 95       	ror	r20
     566:	9a 01       	movw	r18, r20
     568:	ad ec       	ldi	r26, 0xCD	; 205
     56a:	bc ec       	ldi	r27, 0xCC	; 204
     56c:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__umulhisi3>
     570:	96 95       	lsr	r25
     572:	87 95       	ror	r24
     574:	96 95       	lsr	r25
     576:	87 95       	ror	r24
     578:	96 95       	lsr	r25
     57a:	87 95       	ror	r24
     57c:	9c 01       	movw	r18, r24
     57e:	22 0f       	add	r18, r18
     580:	33 1f       	adc	r19, r19
     582:	88 0f       	add	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	88 0f       	add	r24, r24
     588:	99 1f       	adc	r25, r25
     58a:	88 0f       	add	r24, r24
     58c:	99 1f       	adc	r25, r25
     58e:	82 0f       	add	r24, r18
     590:	93 1f       	adc	r25, r19
     592:	9a 01       	movw	r18, r20
     594:	28 1b       	sub	r18, r24
     596:	39 0b       	sbc	r19, r25
     598:	c9 01       	movw	r24, r18
     59a:	80 5d       	subi	r24, 0xD0	; 208
     59c:	ca dd       	rcall	.-1132   	; 0x132 <LCD_CHAR>
     59e:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_CHAR((temp_year/10)%10+'0');
     5a2:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5a6:	ad ec       	ldi	r26, 0xCD	; 205
     5a8:	bc ec       	ldi	r27, 0xCC	; 204
     5aa:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__umulhisi3>
     5ae:	ac 01       	movw	r20, r24
     5b0:	56 95       	lsr	r21
     5b2:	47 95       	ror	r20
     5b4:	56 95       	lsr	r21
     5b6:	47 95       	ror	r20
     5b8:	56 95       	lsr	r21
     5ba:	47 95       	ror	r20
     5bc:	9a 01       	movw	r18, r20
     5be:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__umulhisi3>
     5c2:	96 95       	lsr	r25
     5c4:	87 95       	ror	r24
     5c6:	96 95       	lsr	r25
     5c8:	87 95       	ror	r24
     5ca:	96 95       	lsr	r25
     5cc:	87 95       	ror	r24
     5ce:	9c 01       	movw	r18, r24
     5d0:	22 0f       	add	r18, r18
     5d2:	33 1f       	adc	r19, r19
     5d4:	88 0f       	add	r24, r24
     5d6:	99 1f       	adc	r25, r25
     5d8:	88 0f       	add	r24, r24
     5da:	99 1f       	adc	r25, r25
     5dc:	88 0f       	add	r24, r24
     5de:	99 1f       	adc	r25, r25
     5e0:	82 0f       	add	r24, r18
     5e2:	93 1f       	adc	r25, r19
     5e4:	fa 01       	movw	r30, r20
     5e6:	e8 1b       	sub	r30, r24
     5e8:	f9 0b       	sbc	r31, r25
     5ea:	cf 01       	movw	r24, r30
     5ec:	80 5d       	subi	r24, 0xD0	; 208
     5ee:	a1 dd       	rcall	.-1214   	; 0x132 <LCD_CHAR>
     5f0:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_CHAR((temp_year)%10+'0');
     5f4:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5f8:	9a 01       	movw	r18, r20
     5fa:	ad ec       	ldi	r26, 0xCD	; 205
     5fc:	bc ec       	ldi	r27, 0xCC	; 204
     5fe:	0e 94 b7 0e 	call	0x1d6e	; 0x1d6e <__umulhisi3>
     602:	96 95       	lsr	r25
     604:	87 95       	ror	r24
     606:	96 95       	lsr	r25
     608:	87 95       	ror	r24
     60a:	96 95       	lsr	r25
     60c:	87 95       	ror	r24
     60e:	9c 01       	movw	r18, r24
     610:	22 0f       	add	r18, r18
     612:	33 1f       	adc	r19, r19
     614:	88 0f       	add	r24, r24
     616:	99 1f       	adc	r25, r25
     618:	88 0f       	add	r24, r24
     61a:	99 1f       	adc	r25, r25
     61c:	88 0f       	add	r24, r24
     61e:	99 1f       	adc	r25, r25
     620:	82 0f       	add	r24, r18
     622:	93 1f       	adc	r25, r19
     624:	9a 01       	movw	r18, r20
     626:	28 1b       	sub	r18, r24
     628:	39 0b       	sbc	r19, r25
     62a:	c9 01       	movw	r24, r18
     62c:	80 5d       	subi	r24, 0xD0	; 208
     62e:	81 dd       	rcall	.-1278   	; 0x132 <LCD_CHAR>
     630:	80 c0       	rjmp	.+256    	; 0x732 <alarm_clock_display+0x258>
     632:	82 e8       	ldi	r24, 0x82	; 130
     634:	68 dd       	rcall	.-1328   	; 0x106 <LCD_Comm>
			break;
			
			case 2:
			LCD_pos(2,0);
			LCD_STR("ALARM | MONTH ");
     636:	87 e5       	ldi	r24, 0x57	; 87
     638:	91 e0       	ldi	r25, 0x01	; 1
     63a:	83 dd       	rcall	.-1274   	; 0x142 <LCD_STR>
     63c:	86 ec       	ldi	r24, 0xC6	; 198
     63e:	63 dd       	rcall	.-1338   	; 0x106 <LCD_Comm>
     640:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <temp_arr+0x3>
			LCD_pos(6,1);
			LCD_STR(month_arr[temp_arr[3]-1]);
     644:	f0 e0       	ldi	r31, 0x00	; 0
     646:	ee 0f       	add	r30, r30
     648:	ff 1f       	adc	r31, r31
     64a:	ec 5e       	subi	r30, 0xEC	; 236
     64c:	fe 4f       	sbci	r31, 0xFE	; 254
     64e:	80 81       	ld	r24, Z
     650:	91 81       	ldd	r25, Z+1	; 0x01
			break;
     652:	77 dd       	rcall	.-1298   	; 0x142 <LCD_STR>
     654:	6e c0       	rjmp	.+220    	; 0x732 <alarm_clock_display+0x258>
     656:	82 e8       	ldi	r24, 0x82	; 130
     658:	56 dd       	rcall	.-1364   	; 0x106 <LCD_Comm>
			
			case 3:
			LCD_pos(2,0);
			LCD_STR("ALARM | DAY ");
     65a:	86 e6       	ldi	r24, 0x66	; 102
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	71 dd       	rcall	.-1310   	; 0x142 <LCD_STR>
     660:	87 ec       	ldi	r24, 0xC7	; 199
     662:	51 dd       	rcall	.-1374   	; 0x106 <LCD_Comm>
     664:	02 e0       	ldi	r16, 0x02	; 2
			LCD_pos(7,1);
			LCD_CHAR((temp_arr[2]/10)+'0');
     666:	11 e0       	ldi	r17, 0x01	; 1
     668:	f8 01       	movw	r30, r16
     66a:	82 81       	ldd	r24, Z+2	; 0x02
     66c:	cd ec       	ldi	r28, 0xCD	; 205
     66e:	8c 9f       	mul	r24, r28
     670:	81 2d       	mov	r24, r1
     672:	11 24       	eor	r1, r1
     674:	86 95       	lsr	r24
     676:	86 95       	lsr	r24
     678:	86 95       	lsr	r24
     67a:	80 5d       	subi	r24, 0xD0	; 208
     67c:	5a dd       	rcall	.-1356   	; 0x132 <LCD_CHAR>
     67e:	f8 01       	movw	r30, r16
     680:	82 81       	ldd	r24, Z+2	; 0x02
			LCD_CHAR((temp_arr[2]%10)+'0');
     682:	8c 9f       	mul	r24, r28
     684:	c1 2d       	mov	r28, r1
     686:	11 24       	eor	r1, r1
     688:	c6 95       	lsr	r28
     68a:	c6 95       	lsr	r28
     68c:	c6 95       	lsr	r28
     68e:	cc 0f       	add	r28, r28
     690:	9c 2f       	mov	r25, r28
     692:	99 0f       	add	r25, r25
     694:	99 0f       	add	r25, r25
     696:	c9 0f       	add	r28, r25
     698:	8c 1b       	sub	r24, r28
     69a:	80 5d       	subi	r24, 0xD0	; 208
			break;
     69c:	4a dd       	rcall	.-1388   	; 0x132 <LCD_CHAR>
     69e:	49 c0       	rjmp	.+146    	; 0x732 <alarm_clock_display+0x258>
     6a0:	82 e8       	ldi	r24, 0x82	; 130
     6a2:	31 dd       	rcall	.-1438   	; 0x106 <LCD_Comm>
			
			case 4:
			LCD_pos(2,0);
			LCD_STR("ALARM | HOUR");
     6a4:	83 e7       	ldi	r24, 0x73	; 115
     6a6:	91 e0       	ldi	r25, 0x01	; 1
     6a8:	4c dd       	rcall	.-1384   	; 0x142 <LCD_STR>
     6aa:	87 ec       	ldi	r24, 0xC7	; 199
     6ac:	2c dd       	rcall	.-1448   	; 0x106 <LCD_Comm>
     6ae:	02 e0       	ldi	r16, 0x02	; 2
			LCD_pos(7,1);
			LCD_CHAR((temp_arr[1]/10)+'0');
     6b0:	11 e0       	ldi	r17, 0x01	; 1
     6b2:	f8 01       	movw	r30, r16
     6b4:	81 81       	ldd	r24, Z+1	; 0x01
     6b6:	cd ec       	ldi	r28, 0xCD	; 205
     6b8:	8c 9f       	mul	r24, r28
     6ba:	81 2d       	mov	r24, r1
     6bc:	11 24       	eor	r1, r1
     6be:	86 95       	lsr	r24
     6c0:	86 95       	lsr	r24
     6c2:	86 95       	lsr	r24
     6c4:	80 5d       	subi	r24, 0xD0	; 208
     6c6:	35 dd       	rcall	.-1430   	; 0x132 <LCD_CHAR>
			LCD_CHAR((temp_arr[1]%10)+'0');
     6c8:	f8 01       	movw	r30, r16
     6ca:	81 81       	ldd	r24, Z+1	; 0x01
     6cc:	8c 9f       	mul	r24, r28
     6ce:	c1 2d       	mov	r28, r1
     6d0:	11 24       	eor	r1, r1
     6d2:	c6 95       	lsr	r28
     6d4:	c6 95       	lsr	r28
     6d6:	c6 95       	lsr	r28
     6d8:	cc 0f       	add	r28, r28
     6da:	9c 2f       	mov	r25, r28
     6dc:	99 0f       	add	r25, r25
     6de:	99 0f       	add	r25, r25
     6e0:	c9 0f       	add	r28, r25
     6e2:	8c 1b       	sub	r24, r28
     6e4:	80 5d       	subi	r24, 0xD0	; 208
			break;
     6e6:	25 dd       	rcall	.-1462   	; 0x132 <LCD_CHAR>
     6e8:	24 c0       	rjmp	.+72     	; 0x732 <alarm_clock_display+0x258>
     6ea:	81 e8       	ldi	r24, 0x81	; 129
     6ec:	0c dd       	rcall	.-1512   	; 0x106 <LCD_Comm>

			case 5:
			LCD_pos(1,0);
			LCD_STR("ALARM | MINUTE");
     6ee:	80 e8       	ldi	r24, 0x80	; 128
     6f0:	91 e0       	ldi	r25, 0x01	; 1
     6f2:	27 dd       	rcall	.-1458   	; 0x142 <LCD_STR>
     6f4:	86 ec       	ldi	r24, 0xC6	; 198
     6f6:	07 dd       	rcall	.-1522   	; 0x106 <LCD_Comm>
     6f8:	02 e0       	ldi	r16, 0x02	; 2
     6fa:	11 e0       	ldi	r17, 0x01	; 1
			LCD_pos(6,1);
			LCD_CHAR((temp_arr[0]/10)+'0');
     6fc:	f8 01       	movw	r30, r16
     6fe:	80 81       	ld	r24, Z
     700:	cd ec       	ldi	r28, 0xCD	; 205
     702:	8c 9f       	mul	r24, r28
     704:	81 2d       	mov	r24, r1
     706:	11 24       	eor	r1, r1
     708:	86 95       	lsr	r24
     70a:	86 95       	lsr	r24
     70c:	86 95       	lsr	r24
     70e:	80 5d       	subi	r24, 0xD0	; 208
     710:	10 dd       	rcall	.-1504   	; 0x132 <LCD_CHAR>
     712:	f8 01       	movw	r30, r16
     714:	80 81       	ld	r24, Z
			LCD_CHAR((temp_arr[0]%10)+'0');
     716:	8c 9f       	mul	r24, r28
     718:	c1 2d       	mov	r28, r1
     71a:	11 24       	eor	r1, r1
     71c:	c6 95       	lsr	r28
     71e:	c6 95       	lsr	r28
     720:	c6 95       	lsr	r28
     722:	cc 0f       	add	r28, r28
     724:	9c 2f       	mov	r25, r28
     726:	99 0f       	add	r25, r25
     728:	99 0f       	add	r25, r25
     72a:	c9 0f       	add	r28, r25
     72c:	8c 1b       	sub	r24, r28
     72e:	80 5d       	subi	r24, 0xD0	; 208
     730:	00 dd       	rcall	.-1536   	; 0x132 <LCD_CHAR>
     732:	cf 91       	pop	r28
     734:	1f 91       	pop	r17
     736:	0f 91       	pop	r16

			case 7:
			break;
		}
	}
}
     738:	08 95       	ret

0000073a <simple_alarm_display>:
     73a:	ef 92       	push	r14
     73c:	ff 92       	push	r15
     73e:	0f 93       	push	r16

void simple_alarm_display(void)
{
     740:	1f 93       	push	r17
     742:	cf 93       	push	r28
     744:	df 93       	push	r29
     746:	00 d0       	rcall	.+0      	; 0x748 <simple_alarm_display+0xe>
     748:	00 d0       	rcall	.+0      	; 0x74a <simple_alarm_display+0x10>
     74a:	00 d0       	rcall	.+0      	; 0x74c <simple_alarm_display+0x12>
     74c:	cd b7       	in	r28, 0x3d	; 61
     74e:	de b7       	in	r29, 0x3e	; 62
	if (!isset_alarm)
     750:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <isset_alarm>
     754:	81 11       	cpse	r24, r1
     756:	59 c0       	rjmp	.+178    	; 0x80a <simple_alarm_display+0xd0>
	{
		switch(step)
     758:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <step>
     75c:	84 30       	cpi	r24, 0x04	; 4
     75e:	19 f0       	breq	.+6      	; 0x766 <simple_alarm_display+0x2c>
     760:	85 30       	cpi	r24, 0x05	; 5
     762:	51 f1       	breq	.+84     	; 0x7b8 <simple_alarm_display+0x7e>
     764:	c3 c0       	rjmp	.+390    	; 0x8ec <simple_alarm_display+0x1b2>
     766:	82 e8       	ldi	r24, 0x82	; 130
     768:	ce dc       	rcall	.-1636   	; 0x106 <LCD_Comm>
		{
			case 4:
			LCD_pos(2,0);
			LCD_STR("ALARM | HOUR");
     76a:	83 e7       	ldi	r24, 0x73	; 115
     76c:	91 e0       	ldi	r25, 0x01	; 1
     76e:	e9 dc       	rcall	.-1582   	; 0x142 <LCD_STR>
     770:	87 ec       	ldi	r24, 0xC7	; 199
     772:	c9 dc       	rcall	.-1646   	; 0x106 <LCD_Comm>
     774:	0f 2e       	mov	r0, r31
			LCD_pos(7,1);
			LCD_CHAR((temp_arr[1]/10)+'0');
     776:	f2 e0       	ldi	r31, 0x02	; 2
     778:	ef 2e       	mov	r14, r31
     77a:	f1 e0       	ldi	r31, 0x01	; 1
     77c:	ff 2e       	mov	r15, r31
     77e:	f0 2d       	mov	r31, r0
     780:	f7 01       	movw	r30, r14
     782:	81 81       	ldd	r24, Z+1	; 0x01
     784:	1d ec       	ldi	r17, 0xCD	; 205
     786:	81 9f       	mul	r24, r17
     788:	81 2d       	mov	r24, r1
     78a:	11 24       	eor	r1, r1
     78c:	86 95       	lsr	r24
     78e:	86 95       	lsr	r24
     790:	86 95       	lsr	r24
     792:	80 5d       	subi	r24, 0xD0	; 208
     794:	ce dc       	rcall	.-1636   	; 0x132 <LCD_CHAR>
     796:	f7 01       	movw	r30, r14
			LCD_CHAR((temp_arr[1]%10)+'0');
     798:	81 81       	ldd	r24, Z+1	; 0x01
     79a:	81 9f       	mul	r24, r17
     79c:	11 2d       	mov	r17, r1
     79e:	11 24       	eor	r1, r1
     7a0:	16 95       	lsr	r17
     7a2:	16 95       	lsr	r17
     7a4:	16 95       	lsr	r17
     7a6:	11 0f       	add	r17, r17
     7a8:	91 2f       	mov	r25, r17
     7aa:	99 0f       	add	r25, r25
     7ac:	99 0f       	add	r25, r25
     7ae:	19 0f       	add	r17, r25
     7b0:	81 1b       	sub	r24, r17
     7b2:	80 5d       	subi	r24, 0xD0	; 208
     7b4:	be dc       	rcall	.-1668   	; 0x132 <LCD_CHAR>
     7b6:	9a c0       	rjmp	.+308    	; 0x8ec <simple_alarm_display+0x1b2>
     7b8:	81 e8       	ldi	r24, 0x81	; 129
			break;

			case 5:
			LCD_pos(1,0);
			LCD_STR("ALARM | MINUTE");
     7ba:	a5 dc       	rcall	.-1718   	; 0x106 <LCD_Comm>
     7bc:	80 e8       	ldi	r24, 0x80	; 128
     7be:	91 e0       	ldi	r25, 0x01	; 1
     7c0:	c0 dc       	rcall	.-1664   	; 0x142 <LCD_STR>
     7c2:	86 ec       	ldi	r24, 0xC6	; 198
     7c4:	a0 dc       	rcall	.-1728   	; 0x106 <LCD_Comm>
     7c6:	0f 2e       	mov	r0, r31
			LCD_pos(6,1);
			LCD_CHAR((temp_arr[0]/10)+'0');
     7c8:	f2 e0       	ldi	r31, 0x02	; 2
     7ca:	ef 2e       	mov	r14, r31
     7cc:	f1 e0       	ldi	r31, 0x01	; 1
     7ce:	ff 2e       	mov	r15, r31
     7d0:	f0 2d       	mov	r31, r0
     7d2:	f7 01       	movw	r30, r14
     7d4:	80 81       	ld	r24, Z
     7d6:	1d ec       	ldi	r17, 0xCD	; 205
     7d8:	81 9f       	mul	r24, r17
     7da:	81 2d       	mov	r24, r1
     7dc:	11 24       	eor	r1, r1
     7de:	86 95       	lsr	r24
     7e0:	86 95       	lsr	r24
     7e2:	86 95       	lsr	r24
     7e4:	80 5d       	subi	r24, 0xD0	; 208
     7e6:	a5 dc       	rcall	.-1718   	; 0x132 <LCD_CHAR>
     7e8:	f7 01       	movw	r30, r14
			LCD_CHAR((temp_arr[0]%10)+'0');
     7ea:	80 81       	ld	r24, Z
     7ec:	81 9f       	mul	r24, r17
     7ee:	11 2d       	mov	r17, r1
     7f0:	11 24       	eor	r1, r1
     7f2:	16 95       	lsr	r17
     7f4:	16 95       	lsr	r17
     7f6:	16 95       	lsr	r17
     7f8:	11 0f       	add	r17, r17
     7fa:	91 2f       	mov	r25, r17
     7fc:	99 0f       	add	r25, r25
     7fe:	99 0f       	add	r25, r25
     800:	19 0f       	add	r17, r25
     802:	81 1b       	sub	r24, r17
     804:	80 5d       	subi	r24, 0xD0	; 208
     806:	95 dc       	rcall	.-1750   	; 0x132 <LCD_CHAR>
     808:	71 c0       	rjmp	.+226    	; 0x8ec <simple_alarm_display+0x1b2>
			break;
     80a:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <type_of_alarm>
		}
	}
	else if(type_of_alarm==0)
     80e:	81 11       	cpse	r24, r1
     810:	6d c0       	rjmp	.+218    	; 0x8ec <simple_alarm_display+0x1b2>
     812:	81 e4       	ldi	r24, 0x41	; 65
	{
		char AM[] = "AM";
     814:	9d e4       	ldi	r25, 0x4D	; 77
     816:	9d 83       	std	Y+5, r25	; 0x05
     818:	8c 83       	std	Y+4, r24	; 0x04
     81a:	1e 82       	std	Y+6, r1	; 0x06
		char PM[] = "PM";
     81c:	80 e5       	ldi	r24, 0x50	; 80
     81e:	9d e4       	ldi	r25, 0x4D	; 77
     820:	9a 83       	std	Y+2, r25	; 0x02
     822:	89 83       	std	Y+1, r24	; 0x01
     824:	1b 82       	std	Y+3, r1	; 0x03
     826:	82 e8       	ldi	r24, 0x82	; 130
     828:	6e dc       	rcall	.-1828   	; 0x106 <LCD_Comm>
		LCD_pos(2,0);
		LCD_STR("ALARM IS ON");
     82a:	8f e8       	ldi	r24, 0x8F	; 143
     82c:	91 e0       	ldi	r25, 0x01	; 1
     82e:	89 dc       	rcall	.-1774   	; 0x142 <LCD_STR>
     830:	83 ec       	ldi	r24, 0xC3	; 195
     832:	69 dc       	rcall	.-1838   	; 0x106 <LCD_Comm>
		LCD_pos(3,1);
		
		if(hour_alarm>12)
     834:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <hour_alarm>
     838:	8d 30       	cpi	r24, 0x0D	; 13
     83a:	d8 f0       	brcs	.+54     	; 0x872 <simple_alarm_display+0x138>
		{
			LCD_STR(PM);
     83c:	ce 01       	movw	r24, r28
     83e:	01 96       	adiw	r24, 0x01	; 1
     840:	80 dc       	rcall	.-1792   	; 0x142 <LCD_STR>
     842:	86 ec       	ldi	r24, 0xC6	; 198
     844:	60 dc       	rcall	.-1856   	; 0x106 <LCD_Comm>
     846:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <hour_alarm>
			LCD_pos(6,1);
			LCD_CHAR((hour_alarm-12)/10+'0');
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	0c 97       	sbiw	r24, 0x0c	; 12
     84e:	0a e0       	ldi	r16, 0x0A	; 10
     850:	10 e0       	ldi	r17, 0x00	; 0
     852:	b8 01       	movw	r22, r16
     854:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__divmodhi4>
     858:	80 e3       	ldi	r24, 0x30	; 48
     85a:	86 0f       	add	r24, r22
     85c:	6a dc       	rcall	.-1836   	; 0x132 <LCD_CHAR>
			LCD_CHAR((hour_alarm-12)%10+'0');
     85e:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <hour_alarm>
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0c 97       	sbiw	r24, 0x0c	; 12
     866:	b8 01       	movw	r22, r16
     868:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <__divmodhi4>
     86c:	80 5d       	subi	r24, 0xD0	; 208
     86e:	61 dc       	rcall	.-1854   	; 0x132 <LCD_CHAR>
     870:	20 c0       	rjmp	.+64     	; 0x8b2 <simple_alarm_display+0x178>
			
		}
		else
		{
			LCD_STR(AM);
     872:	ce 01       	movw	r24, r28
     874:	04 96       	adiw	r24, 0x04	; 4
     876:	65 dc       	rcall	.-1846   	; 0x142 <LCD_STR>
     878:	86 ec       	ldi	r24, 0xC6	; 198
     87a:	45 dc       	rcall	.-1910   	; 0x106 <LCD_Comm>
     87c:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <hour_alarm>
			LCD_pos(6,1);
			LCD_CHAR((hour_alarm)/10+'0');
     880:	1d ec       	ldi	r17, 0xCD	; 205
     882:	81 9f       	mul	r24, r17
     884:	81 2d       	mov	r24, r1
     886:	11 24       	eor	r1, r1
     888:	86 95       	lsr	r24
     88a:	86 95       	lsr	r24
     88c:	86 95       	lsr	r24
     88e:	80 5d       	subi	r24, 0xD0	; 208
     890:	50 dc       	rcall	.-1888   	; 0x132 <LCD_CHAR>
     892:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <hour_alarm>
			LCD_CHAR((hour_alarm)%10+'0');
     896:	81 9f       	mul	r24, r17
     898:	11 2d       	mov	r17, r1
     89a:	11 24       	eor	r1, r1
     89c:	16 95       	lsr	r17
     89e:	16 95       	lsr	r17
     8a0:	16 95       	lsr	r17
     8a2:	11 0f       	add	r17, r17
     8a4:	91 2f       	mov	r25, r17
     8a6:	99 0f       	add	r25, r25
     8a8:	99 0f       	add	r25, r25
     8aa:	19 0f       	add	r17, r25
     8ac:	81 1b       	sub	r24, r17
     8ae:	80 5d       	subi	r24, 0xD0	; 208
     8b0:	40 dc       	rcall	.-1920   	; 0x132 <LCD_CHAR>
     8b2:	8a e3       	ldi	r24, 0x3A	; 58
		}
		LCD_CHAR(':');
     8b4:	3e dc       	rcall	.-1924   	; 0x132 <LCD_CHAR>
     8b6:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <min_alarm>
		LCD_CHAR((min_alarm)/10+'0');
     8ba:	1d ec       	ldi	r17, 0xCD	; 205
     8bc:	81 9f       	mul	r24, r17
     8be:	81 2d       	mov	r24, r1
     8c0:	11 24       	eor	r1, r1
     8c2:	86 95       	lsr	r24
     8c4:	86 95       	lsr	r24
     8c6:	86 95       	lsr	r24
     8c8:	80 5d       	subi	r24, 0xD0	; 208
     8ca:	33 dc       	rcall	.-1946   	; 0x132 <LCD_CHAR>
     8cc:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <min_alarm>
		LCD_CHAR((min_alarm)%10+'0');
     8d0:	81 9f       	mul	r24, r17
     8d2:	11 2d       	mov	r17, r1
     8d4:	11 24       	eor	r1, r1
     8d6:	16 95       	lsr	r17
     8d8:	16 95       	lsr	r17
     8da:	16 95       	lsr	r17
     8dc:	11 0f       	add	r17, r17
     8de:	91 2f       	mov	r25, r17
     8e0:	99 0f       	add	r25, r25
     8e2:	99 0f       	add	r25, r25
     8e4:	19 0f       	add	r17, r25
     8e6:	81 1b       	sub	r24, r17
     8e8:	80 5d       	subi	r24, 0xD0	; 208
     8ea:	23 dc       	rcall	.-1978   	; 0x132 <LCD_CHAR>
     8ec:	26 96       	adiw	r28, 0x06	; 6
     8ee:	0f b6       	in	r0, 0x3f	; 63
     8f0:	f8 94       	cli
	}
}
     8f2:	de bf       	out	0x3e, r29	; 62
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	cd bf       	out	0x3d, r28	; 61
     8f8:	df 91       	pop	r29
     8fa:	cf 91       	pop	r28
     8fc:	1f 91       	pop	r17
     8fe:	0f 91       	pop	r16
     900:	ff 90       	pop	r15
     902:	ef 90       	pop	r14
     904:	08 95       	ret

00000906 <__vector_15>:
     906:	1f 92       	push	r1
     908:	0f 92       	push	r0
     90a:	0f b6       	in	r0, 0x3f	; 63


ISR(TIMER0_COMP_vect)
{
     90c:	0f 92       	push	r0
     90e:	11 24       	eor	r1, r1
     910:	0b b6       	in	r0, 0x3b	; 59
     912:	0f 92       	push	r0
     914:	2f 93       	push	r18
     916:	3f 93       	push	r19
     918:	4f 93       	push	r20
     91a:	5f 93       	push	r21
     91c:	6f 93       	push	r22
     91e:	7f 93       	push	r23
     920:	8f 93       	push	r24
     922:	9f 93       	push	r25
     924:	af 93       	push	r26
     926:	bf 93       	push	r27
     928:	ef 93       	push	r30
     92a:	ff 93       	push	r31
	if(!is_stopped)
     92c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <is_stopped>
     930:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <is_stopped+0x1>
     934:	89 2b       	or	r24, r25
     936:	09 f4       	brne	.+2      	; 0x93a <__vector_15+0x34>
		stop_watch_logic();
     938:	3c dd       	rcall	.-1416   	; 0x3b2 <stop_watch_logic>
		
	normal_clock_logic();
     93a:	d8 dc       	rcall	.-1616   	; 0x2ec <normal_clock_logic>
     93c:	ff 91       	pop	r31
}
     93e:	ef 91       	pop	r30
     940:	bf 91       	pop	r27
     942:	af 91       	pop	r26
     944:	9f 91       	pop	r25
     946:	8f 91       	pop	r24
     948:	7f 91       	pop	r23
     94a:	6f 91       	pop	r22
     94c:	5f 91       	pop	r21
     94e:	4f 91       	pop	r20
     950:	3f 91       	pop	r19
     952:	2f 91       	pop	r18
     954:	0f 90       	pop	r0
     956:	0b be       	out	0x3b, r0	; 59
     958:	0f 90       	pop	r0
     95a:	0f be       	out	0x3f, r0	; 63
     95c:	0f 90       	pop	r0
     95e:	1f 90       	pop	r1
     960:	18 95       	reti

00000962 <__vector_1>:
     962:	1f 92       	push	r1

ISR(INT0_vect)
{
     964:	0f 92       	push	r0
     966:	0f b6       	in	r0, 0x3f	; 63
     968:	0f 92       	push	r0
     96a:	11 24       	eor	r1, r1
     96c:	0b b6       	in	r0, 0x3b	; 59
     96e:	0f 92       	push	r0
     970:	1f 93       	push	r17
     972:	2f 93       	push	r18
     974:	3f 93       	push	r19
     976:	4f 93       	push	r20
     978:	5f 93       	push	r21
     97a:	6f 93       	push	r22
     97c:	7f 93       	push	r23
     97e:	8f 93       	push	r24
     980:	9f 93       	push	r25
     982:	af 93       	push	r26
     984:	bf 93       	push	r27
     986:	cf 93       	push	r28
     988:	df 93       	push	r29
     98a:	ef 93       	push	r30
     98c:	ff 93       	push	r31
	if(mode==0)
     98e:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <mode>
     992:	81 11       	cpse	r24, r1
     994:	14 c0       	rjmp	.+40     	; 0x9be <__vector_1+0x5c>
	{
		mode = 1; // setting up stop_watch mode
     996:	81 e0       	ldi	r24, 0x01	; 1
     998:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <mode>
		cnt_stp_w=0;
     99c:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <cnt_stp_w+0x1>
     9a0:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <cnt_stp_w>
		sec_stp_w=0;
     9a4:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <sec_stp_w+0x1>
     9a8:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <sec_stp_w>
		min_stp_w=0;
     9ac:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <min_stp_w+0x1>
     9b0:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <min_stp_w>
		hour_stp_w=0;
     9b4:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <hour_stp_w+0x1>
     9b8:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <hour_stp_w>
     9bc:	4a c1       	rjmp	.+660    	; 0xc52 <__vector_1+0x2f0>
	}
	else if(mode==1) // stopwatch
     9be:	81 30       	cpi	r24, 0x01	; 1
     9c0:	49 f4       	brne	.+18     	; 0x9d4 <__vector_1+0x72>
	{
		mode = 0;
     9c2:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <mode>
		is_stopped=1;
     9c6:	81 e0       	ldi	r24, 0x01	; 1
     9c8:	90 e0       	ldi	r25, 0x00	; 0
     9ca:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <is_stopped+0x1>
     9ce:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <is_stopped>
     9d2:	3f c1       	rjmp	.+638    	; 0xc52 <__vector_1+0x2f0>
	}
	else if(mode==2) // alarm clock
     9d4:	82 30       	cpi	r24, 0x02	; 2
     9d6:	09 f0       	breq	.+2      	; 0x9da <__vector_1+0x78>
     9d8:	cb c0       	rjmp	.+406    	; 0xb70 <__vector_1+0x20e>
	{
		switch(step)
     9da:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <step>
     9de:	82 30       	cpi	r24, 0x02	; 2
     9e0:	f1 f0       	breq	.+60     	; 0xa1e <__vector_1+0xbc>
     9e2:	28 f4       	brcc	.+10     	; 0x9ee <__vector_1+0x8c>
     9e4:	88 23       	and	r24, r24
     9e6:	59 f0       	breq	.+22     	; 0x9fe <__vector_1+0x9c>
     9e8:	81 30       	cpi	r24, 0x01	; 1
     9ea:	79 f0       	breq	.+30     	; 0xa0a <__vector_1+0xa8>
     9ec:	32 c1       	rjmp	.+612    	; 0xc52 <__vector_1+0x2f0>
     9ee:	84 30       	cpi	r24, 0x04	; 4
     9f0:	09 f4       	brne	.+2      	; 0x9f4 <__vector_1+0x92>
     9f2:	74 c0       	rjmp	.+232    	; 0xadc <__vector_1+0x17a>
     9f4:	d0 f1       	brcs	.+116    	; 0xa6a <__vector_1+0x108>
     9f6:	85 30       	cpi	r24, 0x05	; 5
     9f8:	09 f4       	brne	.+2      	; 0x9fc <__vector_1+0x9a>
     9fa:	95 c0       	rjmp	.+298    	; 0xb26 <__vector_1+0x1c4>
     9fc:	2a c1       	rjmp	.+596    	; 0xc52 <__vector_1+0x2f0>
		{
			case 0:
			type_of_alarm=1;
     9fe:	81 e0       	ldi	r24, 0x01	; 1
     a00:	80 93 94 02 	sts	0x0294, r24	; 0x800294 <type_of_alarm>
			step=1;
     a04:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <step>
			break;
     a08:	24 c1       	rjmp	.+584    	; 0xc52 <__vector_1+0x2f0>

			case 1:
			temp_year++;
     a0a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a0e:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a12:	01 96       	adiw	r24, 0x01	; 1
     a14:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a18:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
     a1c:	1a c1       	rjmp	.+564    	; 0xc52 <__vector_1+0x2f0>
			
			case 2:
			if (is_current_date==1)
     a1e:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__data_end>
     a22:	81 30       	cpi	r24, 0x01	; 1
     a24:	99 f4       	brne	.+38     	; 0xa4c <__vector_1+0xea>
			{
				if (temp_arr[3]+1>month && (temp_arr[3]+1)<=12)
     a26:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <temp_arr+0x3>
     a2a:	84 2f       	mov	r24, r20
     a2c:	90 e0       	ldi	r25, 0x00	; 0
     a2e:	01 96       	adiw	r24, 0x01	; 1
     a30:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <month>
     a34:	30 e0       	ldi	r19, 0x00	; 0
     a36:	28 17       	cp	r18, r24
     a38:	39 07       	cpc	r19, r25
     a3a:	0c f0       	brlt	.+2      	; 0xa3e <__vector_1+0xdc>
     a3c:	0a c1       	rjmp	.+532    	; 0xc52 <__vector_1+0x2f0>
     a3e:	0d 97       	sbiw	r24, 0x0d	; 13
     a40:	0c f0       	brlt	.+2      	; 0xa44 <__vector_1+0xe2>
     a42:	07 c1       	rjmp	.+526    	; 0xc52 <__vector_1+0x2f0>
				{
					temp_arr[3]++;
     a44:	4f 5f       	subi	r20, 0xFF	; 255
     a46:	40 93 05 01 	sts	0x0105, r20	; 0x800105 <temp_arr+0x3>
     a4a:	03 c1       	rjmp	.+518    	; 0xc52 <__vector_1+0x2f0>
				}
			}
			else
			{
				if (temp_arr[3]+1>12)
     a4c:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <temp_arr+0x3>
     a50:	82 2f       	mov	r24, r18
     a52:	90 e0       	ldi	r25, 0x00	; 0
     a54:	01 96       	adiw	r24, 0x01	; 1
     a56:	0d 97       	sbiw	r24, 0x0d	; 13
     a58:	24 f0       	brlt	.+8      	; 0xa62 <__vector_1+0x100>
				{
					temp_arr[3]=1;
     a5a:	81 e0       	ldi	r24, 0x01	; 1
     a5c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_arr+0x3>
     a60:	f8 c0       	rjmp	.+496    	; 0xc52 <__vector_1+0x2f0>
				}
				else
				{
					temp_arr[3]++;
     a62:	2f 5f       	subi	r18, 0xFF	; 255
     a64:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <temp_arr+0x3>
     a68:	f4 c0       	rjmp	.+488    	; 0xc52 <__vector_1+0x2f0>
				}
			}
			break;
			
			case 3:
			if (is_current_date==1)
     a6a:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__data_end>
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	e1 f4       	brne	.+56     	; 0xaaa <__vector_1+0x148>
			{
				if (temp_arr[2]+1>day && temp_arr[2]+1<=month_day_count(temp_arr[3], temp_year))
     a72:	10 91 04 01 	lds	r17, 0x0104	; 0x800104 <temp_arr+0x2>
     a76:	c1 2f       	mov	r28, r17
     a78:	d0 e0       	ldi	r29, 0x00	; 0
     a7a:	21 96       	adiw	r28, 0x01	; 1
     a7c:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <day>
     a80:	90 e0       	ldi	r25, 0x00	; 0
     a82:	8c 17       	cp	r24, r28
     a84:	9d 07       	cpc	r25, r29
     a86:	0c f0       	brlt	.+2      	; 0xa8a <__vector_1+0x128>
     a88:	e4 c0       	rjmp	.+456    	; 0xc52 <__vector_1+0x2f0>
     a8a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a8e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a92:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <temp_arr+0x3>
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	d1 db       	rcall	.-2142   	; 0x23c <month_day_count>
     a9a:	8c 17       	cp	r24, r28
     a9c:	9d 07       	cpc	r25, r29
     a9e:	0c f4       	brge	.+2      	; 0xaa2 <__vector_1+0x140>
     aa0:	d8 c0       	rjmp	.+432    	; 0xc52 <__vector_1+0x2f0>
				{
					temp_arr[2]++;
     aa2:	1f 5f       	subi	r17, 0xFF	; 255
     aa4:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <temp_arr+0x2>
     aa8:	d4 c0       	rjmp	.+424    	; 0xc52 <__vector_1+0x2f0>
				}
			}
			else
			{
				if (temp_arr[2]+1>month_day_count(temp_arr[3], temp_year))
     aaa:	e2 e0       	ldi	r30, 0x02	; 2
     aac:	f1 e0       	ldi	r31, 0x01	; 1
     aae:	c2 81       	ldd	r28, Z+2	; 0x02
     ab0:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     ab4:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     ab8:	83 81       	ldd	r24, Z+3	; 0x03
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	bf db       	rcall	.-2178   	; 0x23c <month_day_count>
     abe:	2c 2f       	mov	r18, r28
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	2f 5f       	subi	r18, 0xFF	; 255
     ac4:	3f 4f       	sbci	r19, 0xFF	; 255
     ac6:	82 17       	cp	r24, r18
     ac8:	93 07       	cpc	r25, r19
     aca:	24 f4       	brge	.+8      	; 0xad4 <__vector_1+0x172>
				{
					temp_arr[2]=1;
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_arr+0x2>
     ad2:	bf c0       	rjmp	.+382    	; 0xc52 <__vector_1+0x2f0>
				}
				else
				{
					temp_arr[2]++;
     ad4:	cf 5f       	subi	r28, 0xFF	; 255
     ad6:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <temp_arr+0x2>
     ada:	bb c0       	rjmp	.+374    	; 0xc52 <__vector_1+0x2f0>
				}
			}
			break;
			
			case 4: 
			if (is_current_date==1)
     adc:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__data_end>
     ae0:	81 30       	cpi	r24, 0x01	; 1
     ae2:	99 f4       	brne	.+38     	; 0xb0a <__vector_1+0x1a8>
			{
				if (temp_arr[1]+1>hour && (temp_arr[1]+1)<=23)
     ae4:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <temp_arr+0x1>
     ae8:	84 2f       	mov	r24, r20
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	01 96       	adiw	r24, 0x01	; 1
     aee:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <hour>
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	28 17       	cp	r18, r24
     af6:	39 07       	cpc	r19, r25
     af8:	0c f0       	brlt	.+2      	; 0xafc <__vector_1+0x19a>
     afa:	ab c0       	rjmp	.+342    	; 0xc52 <__vector_1+0x2f0>
     afc:	48 97       	sbiw	r24, 0x18	; 24
     afe:	0c f0       	brlt	.+2      	; 0xb02 <__vector_1+0x1a0>
     b00:	a8 c0       	rjmp	.+336    	; 0xc52 <__vector_1+0x2f0>
				{
					temp_arr[1]++;
     b02:	4f 5f       	subi	r20, 0xFF	; 255
     b04:	40 93 03 01 	sts	0x0103, r20	; 0x800103 <temp_arr+0x1>
     b08:	a4 c0       	rjmp	.+328    	; 0xc52 <__vector_1+0x2f0>
				}
			}
			else
			{
				if (temp_arr[1]+1>=24)
     b0a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <temp_arr+0x1>
     b0e:	82 2f       	mov	r24, r18
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	01 96       	adiw	r24, 0x01	; 1
     b14:	48 97       	sbiw	r24, 0x18	; 24
     b16:	1c f0       	brlt	.+6      	; 0xb1e <__vector_1+0x1bc>
				{
					temp_arr[1]=0;
     b18:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <temp_arr+0x1>
     b1c:	9a c0       	rjmp	.+308    	; 0xc52 <__vector_1+0x2f0>
				}
				else
				{
					temp_arr[1]++;
     b1e:	2f 5f       	subi	r18, 0xFF	; 255
     b20:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <temp_arr+0x1>
     b24:	96 c0       	rjmp	.+300    	; 0xc52 <__vector_1+0x2f0>
				}
			}
			break;
			
			case 5:	
			if (is_current_date==1)
     b26:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__data_end>
     b2a:	81 30       	cpi	r24, 0x01	; 1
     b2c:	99 f4       	brne	.+38     	; 0xb54 <__vector_1+0x1f2>
			{
				if (temp_arr[0]+1>min && (temp_arr[0]+1)<=59)
     b2e:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <temp_arr>
     b32:	84 2f       	mov	r24, r20
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	01 96       	adiw	r24, 0x01	; 1
     b38:	20 91 95 02 	lds	r18, 0x0295	; 0x800295 <min>
     b3c:	30 e0       	ldi	r19, 0x00	; 0
     b3e:	28 17       	cp	r18, r24
     b40:	39 07       	cpc	r19, r25
     b42:	0c f0       	brlt	.+2      	; 0xb46 <__vector_1+0x1e4>
     b44:	86 c0       	rjmp	.+268    	; 0xc52 <__vector_1+0x2f0>
     b46:	cc 97       	sbiw	r24, 0x3c	; 60
     b48:	0c f0       	brlt	.+2      	; 0xb4c <__vector_1+0x1ea>
     b4a:	83 c0       	rjmp	.+262    	; 0xc52 <__vector_1+0x2f0>
				{
					temp_arr[0]++;
     b4c:	4f 5f       	subi	r20, 0xFF	; 255
     b4e:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <temp_arr>
     b52:	7f c0       	rjmp	.+254    	; 0xc52 <__vector_1+0x2f0>
				}
			} 
			else
			{
				if (temp_arr[0]+1>=60)
     b54:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_arr>
     b58:	82 2f       	mov	r24, r18
     b5a:	90 e0       	ldi	r25, 0x00	; 0
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	cc 97       	sbiw	r24, 0x3c	; 60
     b60:	1c f0       	brlt	.+6      	; 0xb68 <__vector_1+0x206>
				{
					temp_arr[0]=0;
     b62:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <temp_arr>
     b66:	75 c0       	rjmp	.+234    	; 0xc52 <__vector_1+0x2f0>
				}
				else
				{
					temp_arr[0]++;
     b68:	2f 5f       	subi	r18, 0xFF	; 255
     b6a:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <temp_arr>
     b6e:	71 c0       	rjmp	.+226    	; 0xc52 <__vector_1+0x2f0>
			break;
			default: break;
		}
		
	}
	else if (mode==3) // time setting mode
     b70:	83 30       	cpi	r24, 0x03	; 3
     b72:	09 f0       	breq	.+2      	; 0xb76 <__vector_1+0x214>
     b74:	6e c0       	rjmp	.+220    	; 0xc52 <__vector_1+0x2f0>
	{
		switch(step_time_set)
     b76:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <step_time_set>
     b7a:	83 30       	cpi	r24, 0x03	; 3
     b7c:	39 f1       	breq	.+78     	; 0xbcc <__vector_1+0x26a>
     b7e:	28 f4       	brcc	.+10     	; 0xb8a <__vector_1+0x228>
     b80:	81 30       	cpi	r24, 0x01	; 1
     b82:	59 f0       	breq	.+22     	; 0xb9a <__vector_1+0x238>
     b84:	82 30       	cpi	r24, 0x02	; 2
     b86:	99 f0       	breq	.+38     	; 0xbae <__vector_1+0x24c>
     b88:	64 c0       	rjmp	.+200    	; 0xc52 <__vector_1+0x2f0>
     b8a:	85 30       	cpi	r24, 0x05	; 5
     b8c:	09 f4       	brne	.+2      	; 0xb90 <__vector_1+0x22e>
     b8e:	45 c0       	rjmp	.+138    	; 0xc1a <__vector_1+0x2b8>
     b90:	b0 f1       	brcs	.+108    	; 0xbfe <__vector_1+0x29c>
     b92:	86 30       	cpi	r24, 0x06	; 6
     b94:	09 f4       	brne	.+2      	; 0xb98 <__vector_1+0x236>
     b96:	4f c0       	rjmp	.+158    	; 0xc36 <__vector_1+0x2d4>
     b98:	5c c0       	rjmp	.+184    	; 0xc52 <__vector_1+0x2f0>
		{
			case 1:
			year++;
     b9a:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <year>
     b9e:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <year+0x1>
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <year+0x1>
     ba8:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <year>
			break;
     bac:	52 c0       	rjmp	.+164    	; 0xc52 <__vector_1+0x2f0>
			
			case 2:
			if (month+1>12)
     bae:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <month>
     bb2:	82 2f       	mov	r24, r18
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	0d 97       	sbiw	r24, 0x0d	; 13
     bba:	24 f0       	brlt	.+8      	; 0xbc4 <__vector_1+0x262>
			{
				month=1;
     bbc:	81 e0       	ldi	r24, 0x01	; 1
     bbe:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <month>
     bc2:	47 c0       	rjmp	.+142    	; 0xc52 <__vector_1+0x2f0>
			}
			else
			{
				month++;
     bc4:	2f 5f       	subi	r18, 0xFF	; 255
     bc6:	20 93 8d 02 	sts	0x028D, r18	; 0x80028d <month>
     bca:	43 c0       	rjmp	.+134    	; 0xc52 <__vector_1+0x2f0>
			}
			break;
			
			case 3:

			if (day+1>month_day_count(month, year))
     bcc:	c0 91 99 02 	lds	r28, 0x0299	; 0x800299 <day>
     bd0:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <year>
     bd4:	70 91 97 02 	lds	r23, 0x0297	; 0x800297 <year+0x1>
     bd8:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <month>
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	2e db       	rcall	.-2468   	; 0x23c <month_day_count>
     be0:	2c 2f       	mov	r18, r28
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	2f 5f       	subi	r18, 0xFF	; 255
     be6:	3f 4f       	sbci	r19, 0xFF	; 255
     be8:	82 17       	cp	r24, r18
     bea:	93 07       	cpc	r25, r19
     bec:	24 f4       	brge	.+8      	; 0xbf6 <__vector_1+0x294>
			{
				day=1;
     bee:	81 e0       	ldi	r24, 0x01	; 1
     bf0:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <day>
     bf4:	2e c0       	rjmp	.+92     	; 0xc52 <__vector_1+0x2f0>
			}
			else
			{
				day++;
     bf6:	cf 5f       	subi	r28, 0xFF	; 255
     bf8:	c0 93 99 02 	sts	0x0299, r28	; 0x800299 <day>
     bfc:	2a c0       	rjmp	.+84     	; 0xc52 <__vector_1+0x2f0>
			}

			break;
			case 4:
			if (hour+1>=24)
     bfe:	20 91 92 02 	lds	r18, 0x0292	; 0x800292 <hour>
     c02:	82 2f       	mov	r24, r18
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	01 96       	adiw	r24, 0x01	; 1
     c08:	48 97       	sbiw	r24, 0x18	; 24
     c0a:	1c f0       	brlt	.+6      	; 0xc12 <__vector_1+0x2b0>
			{
				hour=0;
     c0c:	10 92 92 02 	sts	0x0292, r1	; 0x800292 <hour>
     c10:	20 c0       	rjmp	.+64     	; 0xc52 <__vector_1+0x2f0>
			}
			else
			{
				hour++;
     c12:	2f 5f       	subi	r18, 0xFF	; 255
     c14:	20 93 92 02 	sts	0x0292, r18	; 0x800292 <hour>
     c18:	1c c0       	rjmp	.+56     	; 0xc52 <__vector_1+0x2f0>
			}
			break;
			
			case 5:
			if (min+1>=60)
     c1a:	20 91 95 02 	lds	r18, 0x0295	; 0x800295 <min>
     c1e:	82 2f       	mov	r24, r18
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	01 96       	adiw	r24, 0x01	; 1
     c24:	cc 97       	sbiw	r24, 0x3c	; 60
     c26:	1c f0       	brlt	.+6      	; 0xc2e <__vector_1+0x2cc>
			{
				min=0;
     c28:	10 92 95 02 	sts	0x0295, r1	; 0x800295 <min>
     c2c:	12 c0       	rjmp	.+36     	; 0xc52 <__vector_1+0x2f0>
			}
			else
			{
				min++;
     c2e:	2f 5f       	subi	r18, 0xFF	; 255
     c30:	20 93 95 02 	sts	0x0295, r18	; 0x800295 <min>
     c34:	0e c0       	rjmp	.+28     	; 0xc52 <__vector_1+0x2f0>
			}
			break;

			case 6:
			if (week_day+1>=7)
     c36:	20 91 93 02 	lds	r18, 0x0293	; 0x800293 <week_day>
     c3a:	82 2f       	mov	r24, r18
     c3c:	90 e0       	ldi	r25, 0x00	; 0
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	07 97       	sbiw	r24, 0x07	; 7
     c42:	24 f0       	brlt	.+8      	; 0xc4c <__vector_1+0x2ea>
			{
				week_day=1;
     c44:	81 e0       	ldi	r24, 0x01	; 1
     c46:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <week_day>
     c4a:	03 c0       	rjmp	.+6      	; 0xc52 <__vector_1+0x2f0>
			} 
			else
			{
				week_day++;
     c4c:	2f 5f       	subi	r18, 0xFF	; 255
     c4e:	20 93 93 02 	sts	0x0293, r18	; 0x800293 <week_day>
			break;
			default: break;
		}
		
	}
}
     c52:	ff 91       	pop	r31
     c54:	ef 91       	pop	r30
     c56:	df 91       	pop	r29
     c58:	cf 91       	pop	r28
     c5a:	bf 91       	pop	r27
     c5c:	af 91       	pop	r26
     c5e:	9f 91       	pop	r25
     c60:	8f 91       	pop	r24
     c62:	7f 91       	pop	r23
     c64:	6f 91       	pop	r22
     c66:	5f 91       	pop	r21
     c68:	4f 91       	pop	r20
     c6a:	3f 91       	pop	r19
     c6c:	2f 91       	pop	r18
     c6e:	1f 91       	pop	r17
     c70:	0f 90       	pop	r0
     c72:	0b be       	out	0x3b, r0	; 59
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <__vector_2>:

ISR(INT1_vect)
{
     c7e:	1f 92       	push	r1
     c80:	0f 92       	push	r0
     c82:	0f b6       	in	r0, 0x3f	; 63
     c84:	0f 92       	push	r0
     c86:	11 24       	eor	r1, r1
     c88:	8f 93       	push	r24
     c8a:	9f 93       	push	r25
	if(mode==1) // stop and go button for stopwatch 
     c8c:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <mode>
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	91 f4       	brne	.+36     	; 0xcb8 <__vector_2+0x3a>
	{
		if (!is_stopped)
     c94:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <is_stopped>
     c98:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <is_stopped+0x1>
     c9c:	89 2b       	or	r24, r25
     c9e:	39 f4       	brne	.+14     	; 0xcae <__vector_2+0x30>
			is_stopped = 1;
     ca0:	81 e0       	ldi	r24, 0x01	; 1
     ca2:	90 e0       	ldi	r25, 0x00	; 0
     ca4:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <is_stopped+0x1>
     ca8:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <is_stopped>
     cac:	0f c0       	rjmp	.+30     	; 0xccc <__vector_2+0x4e>
		else
			is_stopped=0;
     cae:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <is_stopped+0x1>
     cb2:	10 92 2e 01 	sts	0x012E, r1	; 0x80012e <is_stopped>
     cb6:	0a c0       	rjmp	.+20     	; 0xccc <__vector_2+0x4e>
	}
	else if(mode==0)
     cb8:	81 11       	cpse	r24, r1
     cba:	04 c0       	rjmp	.+8      	; 0xcc4 <__vector_2+0x46>
	{
		mode=2;
     cbc:	82 e0       	ldi	r24, 0x02	; 2
     cbe:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <mode>
     cc2:	04 c0       	rjmp	.+8      	; 0xccc <__vector_2+0x4e>
	}
	else if(mode==2)
     cc4:	82 30       	cpi	r24, 0x02	; 2
     cc6:	11 f4       	brne	.+4      	; 0xccc <__vector_2+0x4e>
	{
		mode=0;
     cc8:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <mode>
	}
}
     ccc:	9f 91       	pop	r25
     cce:	8f 91       	pop	r24
     cd0:	0f 90       	pop	r0
     cd2:	0f be       	out	0x3f, r0	; 63
     cd4:	0f 90       	pop	r0
     cd6:	1f 90       	pop	r1
     cd8:	18 95       	reti

00000cda <__vector_3>:

ISR(INT2_vect)
{
     cda:	1f 92       	push	r1
     cdc:	0f 92       	push	r0
     cde:	0f b6       	in	r0, 0x3f	; 63
     ce0:	0f 92       	push	r0
     ce2:	11 24       	eor	r1, r1
     ce4:	0b b6       	in	r0, 0x3b	; 59
     ce6:	0f 92       	push	r0
     ce8:	2f 93       	push	r18
     cea:	3f 93       	push	r19
     cec:	4f 93       	push	r20
     cee:	5f 93       	push	r21
     cf0:	6f 93       	push	r22
     cf2:	7f 93       	push	r23
     cf4:	8f 93       	push	r24
     cf6:	9f 93       	push	r25
     cf8:	af 93       	push	r26
     cfa:	bf 93       	push	r27
     cfc:	cf 93       	push	r28
     cfe:	df 93       	push	r29
     d00:	ef 93       	push	r30
     d02:	ff 93       	push	r31
	if(mode==1)// reset button for stopwatch
     d04:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <mode>
     d08:	81 30       	cpi	r24, 0x01	; 1
     d0a:	e9 f4       	brne	.+58     	; 0xd46 <__vector_3+0x6c>
	{
		if(!is_stopped)
     d0c:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <is_stopped>
     d10:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <is_stopped+0x1>
     d14:	89 2b       	or	r24, r25
     d16:	31 f4       	brne	.+12     	; 0xd24 <__vector_3+0x4a>
			is_stopped=1;
     d18:	81 e0       	ldi	r24, 0x01	; 1
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <is_stopped+0x1>
     d20:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <is_stopped>

		cnt_stp_w=0;
     d24:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <cnt_stp_w+0x1>
     d28:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <cnt_stp_w>
		sec_stp_w=0;
     d2c:	10 92 91 02 	sts	0x0291, r1	; 0x800291 <sec_stp_w+0x1>
     d30:	10 92 90 02 	sts	0x0290, r1	; 0x800290 <sec_stp_w>
		min_stp_w=0;
     d34:	10 92 8f 02 	sts	0x028F, r1	; 0x80028f <min_stp_w+0x1>
     d38:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <min_stp_w>
		hour_stp_w=0;
     d3c:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <hour_stp_w+0x1>
     d40:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <hour_stp_w>
     d44:	48 c1       	rjmp	.+656    	; 0xfd6 <__vector_3+0x2fc>
	}
	else if(mode==0)
     d46:	81 11       	cpse	r24, r1
     d48:	02 c0       	rjmp	.+4      	; 0xd4e <__vector_3+0x74>
	{
		disable_alarm_clock();
     d4a:	ab da       	rcall	.-2730   	; 0x2a2 <disable_alarm_clock>
     d4c:	44 c1       	rjmp	.+648    	; 0xfd6 <__vector_3+0x2fc>
	}
	else if(mode==2)
     d4e:	82 30       	cpi	r24, 0x02	; 2
     d50:	09 f0       	breq	.+2      	; 0xd54 <__vector_3+0x7a>
     d52:	c6 c0       	rjmp	.+396    	; 0xee0 <__vector_3+0x206>
	{
		switch(step)
     d54:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <step>
     d58:	82 30       	cpi	r24, 0x02	; 2
     d5a:	39 f1       	breq	.+78     	; 0xdaa <__vector_3+0xd0>
     d5c:	28 f4       	brcc	.+10     	; 0xd68 <__vector_3+0x8e>
     d5e:	88 23       	and	r24, r24
     d60:	61 f0       	breq	.+24     	; 0xd7a <__vector_3+0xa0>
     d62:	81 30       	cpi	r24, 0x01	; 1
     d64:	81 f0       	breq	.+32     	; 0xd86 <__vector_3+0xac>
     d66:	37 c1       	rjmp	.+622    	; 0xfd6 <__vector_3+0x2fc>
     d68:	84 30       	cpi	r24, 0x04	; 4
     d6a:	09 f4       	brne	.+2      	; 0xd6e <__vector_3+0x94>
     d6c:	71 c0       	rjmp	.+226    	; 0xe50 <__vector_3+0x176>
     d6e:	08 f4       	brcc	.+2      	; 0xd72 <__vector_3+0x98>
     d70:	42 c0       	rjmp	.+132    	; 0xdf6 <__vector_3+0x11c>
     d72:	85 30       	cpi	r24, 0x05	; 5
     d74:	09 f4       	brne	.+2      	; 0xd78 <__vector_3+0x9e>
     d76:	90 c0       	rjmp	.+288    	; 0xe98 <__vector_3+0x1be>
     d78:	2e c1       	rjmp	.+604    	; 0xfd6 <__vector_3+0x2fc>
		{
			case 0:
			type_of_alarm=0;
     d7a:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <type_of_alarm>
			step=4;
     d7e:	84 e0       	ldi	r24, 0x04	; 4
     d80:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <step>
			break;
     d84:	28 c1       	rjmp	.+592    	; 0xfd6 <__vector_3+0x2fc>

			case 1:
			if (temp_year-1>=year)
     d86:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d8a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d8e:	01 97       	sbiw	r24, 0x01	; 1
     d90:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <year>
     d94:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <year+0x1>
     d98:	82 17       	cp	r24, r18
     d9a:	93 07       	cpc	r25, r19
     d9c:	08 f4       	brcc	.+2      	; 0xda0 <__vector_3+0xc6>
     d9e:	1b c1       	rjmp	.+566    	; 0xfd6 <__vector_3+0x2fc>
			{
				temp_year--;
     da0:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     da4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     da8:	16 c1       	rjmp	.+556    	; 0xfd6 <__vector_3+0x2fc>
			}
			break;
			
			case 2:
			if (is_current_date==1)
     daa:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__data_end>
     dae:	81 30       	cpi	r24, 0x01	; 1
     db0:	89 f4       	brne	.+34     	; 0xdd4 <__vector_3+0xfa>
			{
				if (temp_arr[3]-1>=month)
     db2:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <temp_arr+0x3>
     db6:	24 2f       	mov	r18, r20
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	21 50       	subi	r18, 0x01	; 1
     dbc:	31 09       	sbc	r19, r1
     dbe:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <month>
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	28 17       	cp	r18, r24
     dc6:	39 07       	cpc	r19, r25
     dc8:	0c f4       	brge	.+2      	; 0xdcc <__vector_3+0xf2>
     dca:	05 c1       	rjmp	.+522    	; 0xfd6 <__vector_3+0x2fc>
				{
					temp_arr[3]--;
     dcc:	41 50       	subi	r20, 0x01	; 1
     dce:	40 93 05 01 	sts	0x0105, r20	; 0x800105 <temp_arr+0x3>
     dd2:	01 c1       	rjmp	.+514    	; 0xfd6 <__vector_3+0x2fc>
				}
			}
			else
			{
				if (temp_arr[3]-1<=0)
     dd4:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <temp_arr+0x3>
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	21 50       	subi	r18, 0x01	; 1
     dde:	31 09       	sbc	r19, r1
     de0:	12 16       	cp	r1, r18
     de2:	13 06       	cpc	r1, r19
     de4:	24 f0       	brlt	.+8      	; 0xdee <__vector_3+0x114>
				{
					temp_arr[3]=12;
     de6:	8c e0       	ldi	r24, 0x0C	; 12
     de8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_arr+0x3>
     dec:	f4 c0       	rjmp	.+488    	; 0xfd6 <__vector_3+0x2fc>
				}
				else
				{
					temp_arr[3]--;
     dee:	81 50       	subi	r24, 0x01	; 1
     df0:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_arr+0x3>
     df4:	f0 c0       	rjmp	.+480    	; 0xfd6 <__vector_3+0x2fc>
				}
			}
			break;
			
			case 3:
			if (is_current_date==1)
     df6:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__data_end>
     dfa:	81 30       	cpi	r24, 0x01	; 1
     dfc:	89 f4       	brne	.+34     	; 0xe20 <__vector_3+0x146>
			{
				if (!(temp_arr[2]-1<day))
     dfe:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <temp_arr+0x2>
     e02:	24 2f       	mov	r18, r20
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	21 50       	subi	r18, 0x01	; 1
     e08:	31 09       	sbc	r19, r1
     e0a:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <day>
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	28 17       	cp	r18, r24
     e12:	39 07       	cpc	r19, r25
     e14:	0c f4       	brge	.+2      	; 0xe18 <__vector_3+0x13e>
     e16:	df c0       	rjmp	.+446    	; 0xfd6 <__vector_3+0x2fc>
				{
					temp_arr[2]--;
     e18:	41 50       	subi	r20, 0x01	; 1
     e1a:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <temp_arr+0x2>
     e1e:	db c0       	rjmp	.+438    	; 0xfd6 <__vector_3+0x2fc>
				}
			}
			else
			{
				if (temp_arr[2]-1<=0)
     e20:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <temp_arr+0x2>
     e24:	28 2f       	mov	r18, r24
     e26:	30 e0       	ldi	r19, 0x00	; 0
     e28:	21 50       	subi	r18, 0x01	; 1
     e2a:	31 09       	sbc	r19, r1
     e2c:	12 16       	cp	r1, r18
     e2e:	13 06       	cpc	r1, r19
     e30:	5c f0       	brlt	.+22     	; 0xe48 <__vector_3+0x16e>
				{
					temp_arr[2]=month_day_count(temp_arr[3],temp_year);
     e32:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     e36:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     e3a:	c2 e0       	ldi	r28, 0x02	; 2
     e3c:	d1 e0       	ldi	r29, 0x01	; 1
     e3e:	8b 81       	ldd	r24, Y+3	; 0x03
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	fc d9       	rcall	.-3080   	; 0x23c <month_day_count>
     e44:	8a 83       	std	Y+2, r24	; 0x02
     e46:	c7 c0       	rjmp	.+398    	; 0xfd6 <__vector_3+0x2fc>
				}
				else
				{
					temp_arr[2]--;
     e48:	81 50       	subi	r24, 0x01	; 1
     e4a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_arr+0x2>
     e4e:	c3 c0       	rjmp	.+390    	; 0xfd6 <__vector_3+0x2fc>
				}
			}
			break;

			case 4:
			if (is_current_date==1)
     e50:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__data_end>
     e54:	81 30       	cpi	r24, 0x01	; 1
     e56:	89 f4       	brne	.+34     	; 0xe7a <__vector_3+0x1a0>
			{

				if (!(temp_arr[1]-1<hour))
     e58:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <temp_arr+0x1>
     e5c:	24 2f       	mov	r18, r20
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	21 50       	subi	r18, 0x01	; 1
     e62:	31 09       	sbc	r19, r1
     e64:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <hour>
     e68:	90 e0       	ldi	r25, 0x00	; 0
     e6a:	28 17       	cp	r18, r24
     e6c:	39 07       	cpc	r19, r25
     e6e:	0c f4       	brge	.+2      	; 0xe72 <__vector_3+0x198>
     e70:	b2 c0       	rjmp	.+356    	; 0xfd6 <__vector_3+0x2fc>
				{
					temp_arr[1]--;
     e72:	41 50       	subi	r20, 0x01	; 1
     e74:	40 93 03 01 	sts	0x0103, r20	; 0x800103 <temp_arr+0x1>
     e78:	ae c0       	rjmp	.+348    	; 0xfd6 <__vector_3+0x2fc>
				}
			}
			else
			{
				if (temp_arr[1]-1<0)
     e7a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_arr+0x1>
     e7e:	28 2f       	mov	r18, r24
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	21 50       	subi	r18, 0x01	; 1
     e84:	31 09       	sbc	r19, r1
     e86:	22 f4       	brpl	.+8      	; 0xe90 <__vector_3+0x1b6>
				{
					temp_arr[1]=23;
     e88:	87 e1       	ldi	r24, 0x17	; 23
     e8a:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp_arr+0x1>
     e8e:	a3 c0       	rjmp	.+326    	; 0xfd6 <__vector_3+0x2fc>
				}
				else
				{
					temp_arr[1]--;
     e90:	81 50       	subi	r24, 0x01	; 1
     e92:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp_arr+0x1>
     e96:	9f c0       	rjmp	.+318    	; 0xfd6 <__vector_3+0x2fc>
				}
			}
			break; 

			case 5:	
			if (is_current_date==1)
     e98:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__data_end>
     e9c:	81 30       	cpi	r24, 0x01	; 1
     e9e:	89 f4       	brne	.+34     	; 0xec2 <__vector_3+0x1e8>
			{

				if (!(temp_arr[0]-1<min))
     ea0:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <temp_arr>
     ea4:	24 2f       	mov	r18, r20
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	21 50       	subi	r18, 0x01	; 1
     eaa:	31 09       	sbc	r19, r1
     eac:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <min>
     eb0:	90 e0       	ldi	r25, 0x00	; 0
     eb2:	28 17       	cp	r18, r24
     eb4:	39 07       	cpc	r19, r25
     eb6:	0c f4       	brge	.+2      	; 0xeba <__vector_3+0x1e0>
     eb8:	8e c0       	rjmp	.+284    	; 0xfd6 <__vector_3+0x2fc>
				{
					temp_arr[0]--;
     eba:	41 50       	subi	r20, 0x01	; 1
     ebc:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <temp_arr>
     ec0:	8a c0       	rjmp	.+276    	; 0xfd6 <__vector_3+0x2fc>
				}
			}
			else
			{				
				if (temp_arr[0]-1<0)
     ec2:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_arr>
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	21 50       	subi	r18, 0x01	; 1
     ecc:	31 09       	sbc	r19, r1
     ece:	22 f4       	brpl	.+8      	; 0xed8 <__vector_3+0x1fe>
				{
					temp_arr[0]=59;
     ed0:	8b e3       	ldi	r24, 0x3B	; 59
     ed2:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_arr>
     ed6:	7f c0       	rjmp	.+254    	; 0xfd6 <__vector_3+0x2fc>
				}
				else
				{
					temp_arr[0]--;
     ed8:	81 50       	subi	r24, 0x01	; 1
     eda:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_arr>
     ede:	7b c0       	rjmp	.+246    	; 0xfd6 <__vector_3+0x2fc>
			break;

			default: break;
		}
	}
	else if (mode==3) // time setting mode for decreasing values
     ee0:	83 30       	cpi	r24, 0x03	; 3
     ee2:	09 f0       	breq	.+2      	; 0xee6 <__vector_3+0x20c>
     ee4:	78 c0       	rjmp	.+240    	; 0xfd6 <__vector_3+0x2fc>
	{
		switch(step_time_set)
     ee6:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <step_time_set>
     eea:	83 30       	cpi	r24, 0x03	; 3
     eec:	49 f1       	breq	.+82     	; 0xf40 <__vector_3+0x266>
     eee:	28 f4       	brcc	.+10     	; 0xefa <__vector_3+0x220>
     ef0:	81 30       	cpi	r24, 0x01	; 1
     ef2:	59 f0       	breq	.+22     	; 0xf0a <__vector_3+0x230>
     ef4:	82 30       	cpi	r24, 0x02	; 2
     ef6:	99 f0       	breq	.+38     	; 0xf1e <__vector_3+0x244>
     ef8:	6a c0       	rjmp	.+212    	; 0xfce <__vector_3+0x2f4>
     efa:	85 30       	cpi	r24, 0x05	; 5
     efc:	09 f4       	brne	.+2      	; 0xf00 <__vector_3+0x226>
     efe:	47 c0       	rjmp	.+142    	; 0xf8e <__vector_3+0x2b4>
     f00:	b8 f1       	brcs	.+110    	; 0xf70 <__vector_3+0x296>
     f02:	86 30       	cpi	r24, 0x06	; 6
     f04:	09 f4       	brne	.+2      	; 0xf08 <__vector_3+0x22e>
     f06:	52 c0       	rjmp	.+164    	; 0xfac <__vector_3+0x2d2>
     f08:	62 c0       	rjmp	.+196    	; 0xfce <__vector_3+0x2f4>
		{
			case 1:
				year--;
     f0a:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <year>
     f0e:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <year+0x1>
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <year+0x1>
     f18:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <year>
			break;
     f1c:	5c c0       	rjmp	.+184    	; 0xfd6 <__vector_3+0x2fc>
			
			case 2:
			if (month-1<=0)
     f1e:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <month>
     f22:	28 2f       	mov	r18, r24
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	21 50       	subi	r18, 0x01	; 1
     f28:	31 09       	sbc	r19, r1
     f2a:	12 16       	cp	r1, r18
     f2c:	13 06       	cpc	r1, r19
     f2e:	24 f0       	brlt	.+8      	; 0xf38 <__vector_3+0x25e>
			{
				month=12;
     f30:	8c e0       	ldi	r24, 0x0C	; 12
     f32:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <month>
     f36:	4f c0       	rjmp	.+158    	; 0xfd6 <__vector_3+0x2fc>
			}
			else
			{
				month--;
     f38:	81 50       	subi	r24, 0x01	; 1
     f3a:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <month>
     f3e:	4b c0       	rjmp	.+150    	; 0xfd6 <__vector_3+0x2fc>
			}
			break;
			
			case 3:
			if (day-1<=0)
     f40:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <day>
     f44:	28 2f       	mov	r18, r24
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	21 50       	subi	r18, 0x01	; 1
     f4a:	31 09       	sbc	r19, r1
     f4c:	12 16       	cp	r1, r18
     f4e:	13 06       	cpc	r1, r19
     f50:	5c f0       	brlt	.+22     	; 0xf68 <__vector_3+0x28e>
			{
				day=month_day_count(month,year);
     f52:	60 91 96 02 	lds	r22, 0x0296	; 0x800296 <year>
     f56:	70 91 97 02 	lds	r23, 0x0297	; 0x800297 <year+0x1>
     f5a:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <month>
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	6d d9       	rcall	.-3366   	; 0x23c <month_day_count>
     f62:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <day>
     f66:	37 c0       	rjmp	.+110    	; 0xfd6 <__vector_3+0x2fc>
			}
			else
			{
				day--;
     f68:	81 50       	subi	r24, 0x01	; 1
     f6a:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <day>
     f6e:	33 c0       	rjmp	.+102    	; 0xfd6 <__vector_3+0x2fc>
			}
			break;

			case 4:
			if (hour-1<0)
     f70:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <hour>
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	21 50       	subi	r18, 0x01	; 1
     f7a:	31 09       	sbc	r19, r1
     f7c:	22 f4       	brpl	.+8      	; 0xf86 <__vector_3+0x2ac>
			{
				hour=23;
     f7e:	87 e1       	ldi	r24, 0x17	; 23
     f80:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <hour>
     f84:	28 c0       	rjmp	.+80     	; 0xfd6 <__vector_3+0x2fc>
			}
			else
			{
				hour--;
     f86:	81 50       	subi	r24, 0x01	; 1
     f88:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <hour>
     f8c:	24 c0       	rjmp	.+72     	; 0xfd6 <__vector_3+0x2fc>
			}
			break;

			case 5:
			if (min-1<0)
     f8e:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <min>
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	21 50       	subi	r18, 0x01	; 1
     f98:	31 09       	sbc	r19, r1
     f9a:	22 f4       	brpl	.+8      	; 0xfa4 <__vector_3+0x2ca>
			{
				min=59;
     f9c:	8b e3       	ldi	r24, 0x3B	; 59
     f9e:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <min>
     fa2:	19 c0       	rjmp	.+50     	; 0xfd6 <__vector_3+0x2fc>
			}
			else
			{
				min--;
     fa4:	81 50       	subi	r24, 0x01	; 1
     fa6:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <min>
     faa:	15 c0       	rjmp	.+42     	; 0xfd6 <__vector_3+0x2fc>
			}
			break;

			case 6:
			if (week_day-1<1)
     fac:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <week_day>
     fb0:	28 2f       	mov	r18, r24
     fb2:	30 e0       	ldi	r19, 0x00	; 0
     fb4:	21 50       	subi	r18, 0x01	; 1
     fb6:	31 09       	sbc	r19, r1
     fb8:	12 16       	cp	r1, r18
     fba:	13 06       	cpc	r1, r19
     fbc:	24 f0       	brlt	.+8      	; 0xfc6 <__vector_3+0x2ec>
			{
				week_day=1;
     fbe:	81 e0       	ldi	r24, 0x01	; 1
     fc0:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <week_day>
     fc4:	08 c0       	rjmp	.+16     	; 0xfd6 <__vector_3+0x2fc>
			} 
			else
			{
				week_day--;
     fc6:	81 50       	subi	r24, 0x01	; 1
     fc8:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <week_day>
			}
			break;
			default: LCD_Clear();
     fcc:	04 c0       	rjmp	.+8      	; 0xfd6 <__vector_3+0x2fc>
					LCD_STR("STEP has incorrect value");
     fce:	c7 d8       	rcall	.-3698   	; 0x15e <LCD_Clear>
     fd0:	8b e9       	ldi	r24, 0x9B	; 155
     fd2:	91 e0       	ldi	r25, 0x01	; 1
     fd4:	b6 d8       	rcall	.-3732   	; 0x142 <LCD_STR>
		 break;
		}
	}
}
     fd6:	ff 91       	pop	r31
     fd8:	ef 91       	pop	r30
     fda:	df 91       	pop	r29
     fdc:	cf 91       	pop	r28
     fde:	bf 91       	pop	r27
     fe0:	af 91       	pop	r26
     fe2:	9f 91       	pop	r25
     fe4:	8f 91       	pop	r24
     fe6:	7f 91       	pop	r23
     fe8:	6f 91       	pop	r22
     fea:	5f 91       	pop	r21
     fec:	4f 91       	pop	r20
     fee:	3f 91       	pop	r19
     ff0:	2f 91       	pop	r18
     ff2:	0f 90       	pop	r0
     ff4:	0b be       	out	0x3b, r0	; 59
     ff6:	0f 90       	pop	r0
     ff8:	0f be       	out	0x3f, r0	; 63
     ffa:	0f 90       	pop	r0
     ffc:	1f 90       	pop	r1
     ffe:	18 95       	reti

00001000 <__vector_4>:

ISR(INT3_vect)
{
    1000:	1f 92       	push	r1
    1002:	0f 92       	push	r0
    1004:	0f b6       	in	r0, 0x3f	; 63
    1006:	0f 92       	push	r0
    1008:	11 24       	eor	r1, r1
    100a:	0b b6       	in	r0, 0x3b	; 59
    100c:	0f 92       	push	r0
    100e:	2f 93       	push	r18
    1010:	3f 93       	push	r19
    1012:	8f 93       	push	r24
    1014:	9f 93       	push	r25
    1016:	ef 93       	push	r30
    1018:	ff 93       	push	r31
	if (mode==0)
    101a:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <mode>
    101e:	81 11       	cpse	r24, r1
    1020:	04 c0       	rjmp	.+8      	; 0x102a <__vector_4+0x2a>
	{
		mode=3; // time setting mode
    1022:	83 e0       	ldi	r24, 0x03	; 3
    1024:	80 93 8b 02 	sts	0x028B, r24	; 0x80028b <mode>
    1028:	9f c0       	rjmp	.+318    	; 0x1168 <__stack+0x69>
	}
	else if(mode==1)
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	09 f4       	brne	.+2      	; 0x1030 <__vector_4+0x30>
    102e:	9c c0       	rjmp	.+312    	; 0x1168 <__stack+0x69>
	{
		// code for stopwatch
	}
	else if(mode==2)
    1030:	82 30       	cpi	r24, 0x02	; 2
    1032:	09 f0       	breq	.+2      	; 0x1036 <__vector_4+0x36>
    1034:	8a c0       	rjmp	.+276    	; 0x114a <__stack+0x4b>
	{
		step++;
    1036:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <step>
    103a:	8f 5f       	subi	r24, 0xFF	; 255
    103c:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <step>
		if (type_of_alarm==1)
    1040:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <type_of_alarm>
    1044:	91 30       	cpi	r25, 0x01	; 1
    1046:	09 f0       	breq	.+2      	; 0x104a <__vector_4+0x4a>
    1048:	5e c0       	rjmp	.+188    	; 0x1106 <__stack+0x7>
		{
			switch(step)
    104a:	83 30       	cpi	r24, 0x03	; 3
    104c:	01 f1       	breq	.+64     	; 0x108e <__vector_4+0x8e>
    104e:	18 f4       	brcc	.+6      	; 0x1056 <__vector_4+0x56>
    1050:	82 30       	cpi	r24, 0x02	; 2
    1052:	39 f0       	breq	.+14     	; 0x1062 <__vector_4+0x62>
    1054:	58 c0       	rjmp	.+176    	; 0x1106 <__stack+0x7>
    1056:	84 30       	cpi	r24, 0x04	; 4
    1058:	71 f1       	breq	.+92     	; 0x10b6 <__vector_4+0xb6>
    105a:	85 30       	cpi	r24, 0x05	; 5
    105c:	09 f4       	brne	.+2      	; 0x1060 <__vector_4+0x60>
    105e:	3f c0       	rjmp	.+126    	; 0x10de <__vector_4+0xde>
    1060:	52 c0       	rjmp	.+164    	; 0x1106 <__stack+0x7>
			{
				case 2:
				if (temp_year==year)
    1062:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1066:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    106a:	80 91 96 02 	lds	r24, 0x0296	; 0x800296 <year>
    106e:	90 91 97 02 	lds	r25, 0x0297	; 0x800297 <year+0x1>
    1072:	28 17       	cp	r18, r24
    1074:	39 07       	cpc	r19, r25
    1076:	41 f4       	brne	.+16     	; 0x1088 <__vector_4+0x88>
				{
					temp_arr[3]=month;
    1078:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <month>
    107c:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_arr+0x3>
					is_current_date=1;
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <__data_end>
    1086:	70 c0       	rjmp	.+224    	; 0x1168 <__stack+0x69>
				}
				else
				{
					is_current_date=0;
    1088:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <__data_end>
    108c:	6d c0       	rjmp	.+218    	; 0x1168 <__stack+0x69>
				}

				break;

				case 3:
				if (temp_arr[3]==month && is_current_date==1)
    108e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <temp_arr+0x3>
    1092:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <month>
    1096:	98 13       	cpse	r25, r24
    1098:	0b c0       	rjmp	.+22     	; 0x10b0 <__vector_4+0xb0>
    109a:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__data_end>
    109e:	81 30       	cpi	r24, 0x01	; 1
    10a0:	39 f4       	brne	.+14     	; 0x10b0 <__vector_4+0xb0>
				{
					is_current_date=1;
    10a2:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <__data_end>
					temp_arr[2]=day;
    10a6:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <day>
    10aa:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_arr+0x2>
    10ae:	5c c0       	rjmp	.+184    	; 0x1168 <__stack+0x69>
				}
				else
				{
					is_current_date=0;
    10b0:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <__data_end>
    10b4:	59 c0       	rjmp	.+178    	; 0x1168 <__stack+0x69>
				}
				
				break;
				
				case 4:
				if (temp_arr[2]==day && is_current_date==1)
    10b6:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <temp_arr+0x2>
    10ba:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <day>
    10be:	98 13       	cpse	r25, r24
    10c0:	0b c0       	rjmp	.+22     	; 0x10d8 <__vector_4+0xd8>
    10c2:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__data_end>
    10c6:	81 30       	cpi	r24, 0x01	; 1
    10c8:	39 f4       	brne	.+14     	; 0x10d8 <__vector_4+0xd8>
				{
					is_current_date=1;
    10ca:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <__data_end>
					temp_arr[1]=hour;
    10ce:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <hour>
    10d2:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp_arr+0x1>
    10d6:	48 c0       	rjmp	.+144    	; 0x1168 <__stack+0x69>
				}
				else{is_current_date=0;}
    10d8:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <__data_end>
    10dc:	45 c0       	rjmp	.+138    	; 0x1168 <__stack+0x69>
				break;

				case 5:
				if (temp_arr[1]==hour && is_current_date==1)
    10de:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_arr+0x1>
    10e2:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <hour>
    10e6:	98 13       	cpse	r25, r24
    10e8:	0b c0       	rjmp	.+22     	; 0x1100 <__stack+0x1>
    10ea:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <__data_end>
    10ee:	81 30       	cpi	r24, 0x01	; 1
    10f0:	39 f4       	brne	.+14     	; 0x1100 <__stack+0x1>
				{
					is_current_date=1;
    10f2:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <__data_end>
					temp_arr[0]=min;
    10f6:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <min>
    10fa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_arr>
    10fe:	34 c0       	rjmp	.+104    	; 0x1168 <__stack+0x69>
				}
				else{is_current_date=0;}
    1100:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <__data_end>
    1104:	31 c0       	rjmp	.+98     	; 0x1168 <__stack+0x69>
				break;
			}
		}
		
		if (step>5)
    1106:	86 30       	cpi	r24, 0x06	; 6
    1108:	78 f1       	brcs	.+94     	; 0x1168 <__stack+0x69>
		{
			step=0; // this means end of time setting
    110a:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <step>
			isset_alarm=1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	80 93 85 02 	sts	0x0285, r24	; 0x800285 <isset_alarm>
			min_alarm=temp_arr[0];
    1114:	e2 e0       	ldi	r30, 0x02	; 2
    1116:	f1 e0       	ldi	r31, 0x01	; 1
    1118:	90 81       	ld	r25, Z
    111a:	90 93 8a 02 	sts	0x028A, r25	; 0x80028a <min_alarm>
			hour_alarm=temp_arr[1];
    111e:	91 81       	ldd	r25, Z+1	; 0x01
    1120:	90 93 89 02 	sts	0x0289, r25	; 0x800289 <hour_alarm>
			day_alarm=temp_arr[2];
    1124:	92 81       	ldd	r25, Z+2	; 0x02
    1126:	90 93 88 02 	sts	0x0288, r25	; 0x800288 <day_alarm>
			month_alarm=temp_arr[3];
    112a:	93 81       	ldd	r25, Z+3	; 0x03
    112c:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <month_alarm>
			year_alarm=temp_year;
    1130:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1134:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1138:	30 93 07 01 	sts	0x0107, r19	; 0x800107 <year_alarm+0x1>
    113c:	20 93 06 01 	sts	0x0106, r18	; 0x800106 <year_alarm>
				
			// clearing temp variables
			for (uch i=0;i<4;i++)
			{
				temp_arr[i]=0;
    1140:	10 82       	st	Z, r1
    1142:	11 82       	std	Z+1, r1	; 0x01
				if (i>1)
				{
					temp_arr[i]=1;
    1144:	82 83       	std	Z+2, r24	; 0x02
    1146:	83 83       	std	Z+3, r24	; 0x03
    1148:	0f c0       	rjmp	.+30     	; 0x1168 <__stack+0x69>
				}
			}
		}
	}
	else if (mode==3)
    114a:	83 30       	cpi	r24, 0x03	; 3
    114c:	69 f4       	brne	.+26     	; 0x1168 <__stack+0x69>
	{
		step_time_set++;
    114e:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <step_time_set>
    1152:	8f 5f       	subi	r24, 0xFF	; 255
	
		if (step_time_set>6)
    1154:	87 30       	cpi	r24, 0x07	; 7
    1156:	18 f4       	brcc	.+6      	; 0x115e <__stack+0x5f>
			}
		}
	}
	else if (mode==3)
	{
		step_time_set++;
    1158:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <step_time_set>
    115c:	05 c0       	rjmp	.+10     	; 0x1168 <__stack+0x69>
	
		if (step_time_set>6)
		{
			step_time_set=1; // this means end of time setting
    115e:	81 e0       	ldi	r24, 0x01	; 1
    1160:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <step_time_set>
			mode=0;
    1164:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <mode>
		}
	}
}
    1168:	ff 91       	pop	r31
    116a:	ef 91       	pop	r30
    116c:	9f 91       	pop	r25
    116e:	8f 91       	pop	r24
    1170:	3f 91       	pop	r19
    1172:	2f 91       	pop	r18
    1174:	0f 90       	pop	r0
    1176:	0b be       	out	0x3b, r0	; 59
    1178:	0f 90       	pop	r0
    117a:	0f be       	out	0x3f, r0	; 63
    117c:	0f 90       	pop	r0
    117e:	1f 90       	pop	r1
    1180:	18 95       	reti

00001182 <display_normal_mode>:

void display_normal_mode(void)
{
    1182:	0f 93       	push	r16
    1184:	1f 93       	push	r17
    1186:	cf 93       	push	r28
    1188:	df 93       	push	r29
    118a:	00 d0       	rcall	.+0      	; 0x118c <display_normal_mode+0xa>
    118c:	00 d0       	rcall	.+0      	; 0x118e <display_normal_mode+0xc>
    118e:	00 d0       	rcall	.+0      	; 0x1190 <display_normal_mode+0xe>
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62
	char AM[] = "AM";
    1194:	81 e4       	ldi	r24, 0x41	; 65
    1196:	9d e4       	ldi	r25, 0x4D	; 77
    1198:	9a 83       	std	Y+2, r25	; 0x02
    119a:	89 83       	std	Y+1, r24	; 0x01
    119c:	1b 82       	std	Y+3, r1	; 0x03
	char PM[] = "PM";
    119e:	80 e5       	ldi	r24, 0x50	; 80
    11a0:	9d e4       	ldi	r25, 0x4D	; 77
    11a2:	9d 83       	std	Y+5, r25	; 0x05
    11a4:	8c 83       	std	Y+4, r24	; 0x04
    11a6:	1e 82       	std	Y+6, r1	; 0x06
    11a8:	80 e8       	ldi	r24, 0x80	; 128
    11aa:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	
	// Displaying year
	LCD_pos(0,0);
	LCD_CHAR((year)/1000+'0');
    11ae:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <year>
    11b2:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <year+0x1>
    11b6:	36 95       	lsr	r19
    11b8:	27 95       	ror	r18
    11ba:	36 95       	lsr	r19
    11bc:	27 95       	ror	r18
    11be:	36 95       	lsr	r19
    11c0:	27 95       	ror	r18
    11c2:	a5 ec       	ldi	r26, 0xC5	; 197
    11c4:	b0 e2       	ldi	r27, 0x20	; 32
    11c6:	d3 d5       	rcall	.+2982   	; 0x1d6e <__umulhisi3>
    11c8:	92 95       	swap	r25
    11ca:	82 95       	swap	r24
    11cc:	8f 70       	andi	r24, 0x0F	; 15
    11ce:	89 27       	eor	r24, r25
    11d0:	9f 70       	andi	r25, 0x0F	; 15
    11d2:	89 27       	eor	r24, r25
    11d4:	80 5d       	subi	r24, 0xD0	; 208
    11d6:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR((year/100)%10+'0');
    11da:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <year>
    11de:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <year+0x1>
    11e2:	36 95       	lsr	r19
    11e4:	27 95       	ror	r18
    11e6:	36 95       	lsr	r19
    11e8:	27 95       	ror	r18
    11ea:	ab e7       	ldi	r26, 0x7B	; 123
    11ec:	b4 e1       	ldi	r27, 0x14	; 20
    11ee:	bf d5       	rcall	.+2942   	; 0x1d6e <__umulhisi3>
    11f0:	ac 01       	movw	r20, r24
    11f2:	56 95       	lsr	r21
    11f4:	47 95       	ror	r20
    11f6:	9a 01       	movw	r18, r20
    11f8:	ad ec       	ldi	r26, 0xCD	; 205
    11fa:	bc ec       	ldi	r27, 0xCC	; 204
    11fc:	b8 d5       	rcall	.+2928   	; 0x1d6e <__umulhisi3>
    11fe:	96 95       	lsr	r25
    1200:	87 95       	ror	r24
    1202:	96 95       	lsr	r25
    1204:	87 95       	ror	r24
    1206:	96 95       	lsr	r25
    1208:	87 95       	ror	r24
    120a:	9c 01       	movw	r18, r24
    120c:	22 0f       	add	r18, r18
    120e:	33 1f       	adc	r19, r19
    1210:	88 0f       	add	r24, r24
    1212:	99 1f       	adc	r25, r25
    1214:	88 0f       	add	r24, r24
    1216:	99 1f       	adc	r25, r25
    1218:	88 0f       	add	r24, r24
    121a:	99 1f       	adc	r25, r25
    121c:	82 0f       	add	r24, r18
    121e:	93 1f       	adc	r25, r19
    1220:	9a 01       	movw	r18, r20
    1222:	28 1b       	sub	r18, r24
    1224:	39 0b       	sbc	r19, r25
    1226:	c9 01       	movw	r24, r18
    1228:	80 5d       	subi	r24, 0xD0	; 208
    122a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR((year/10)%10+'0');
    122e:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <year>
    1232:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <year+0x1>
    1236:	ad ec       	ldi	r26, 0xCD	; 205
    1238:	bc ec       	ldi	r27, 0xCC	; 204
    123a:	99 d5       	rcall	.+2866   	; 0x1d6e <__umulhisi3>
    123c:	ac 01       	movw	r20, r24
    123e:	56 95       	lsr	r21
    1240:	47 95       	ror	r20
    1242:	56 95       	lsr	r21
    1244:	47 95       	ror	r20
    1246:	56 95       	lsr	r21
    1248:	47 95       	ror	r20
    124a:	9a 01       	movw	r18, r20
    124c:	90 d5       	rcall	.+2848   	; 0x1d6e <__umulhisi3>
    124e:	96 95       	lsr	r25
    1250:	87 95       	ror	r24
    1252:	96 95       	lsr	r25
    1254:	87 95       	ror	r24
    1256:	96 95       	lsr	r25
    1258:	87 95       	ror	r24
    125a:	9c 01       	movw	r18, r24
    125c:	22 0f       	add	r18, r18
    125e:	33 1f       	adc	r19, r19
    1260:	88 0f       	add	r24, r24
    1262:	99 1f       	adc	r25, r25
    1264:	88 0f       	add	r24, r24
    1266:	99 1f       	adc	r25, r25
    1268:	88 0f       	add	r24, r24
    126a:	99 1f       	adc	r25, r25
    126c:	82 0f       	add	r24, r18
    126e:	93 1f       	adc	r25, r19
    1270:	9a 01       	movw	r18, r20
    1272:	28 1b       	sub	r18, r24
    1274:	39 0b       	sbc	r19, r25
    1276:	c9 01       	movw	r24, r18
    1278:	80 5d       	subi	r24, 0xD0	; 208
    127a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR((year)%10+'0');
    127e:	40 91 96 02 	lds	r20, 0x0296	; 0x800296 <year>
    1282:	50 91 97 02 	lds	r21, 0x0297	; 0x800297 <year+0x1>
    1286:	9a 01       	movw	r18, r20
    1288:	ad ec       	ldi	r26, 0xCD	; 205
    128a:	bc ec       	ldi	r27, 0xCC	; 204
    128c:	70 d5       	rcall	.+2784   	; 0x1d6e <__umulhisi3>
    128e:	96 95       	lsr	r25
    1290:	87 95       	ror	r24
    1292:	96 95       	lsr	r25
    1294:	87 95       	ror	r24
    1296:	96 95       	lsr	r25
    1298:	87 95       	ror	r24
    129a:	9c 01       	movw	r18, r24
    129c:	22 0f       	add	r18, r18
    129e:	33 1f       	adc	r19, r19
    12a0:	88 0f       	add	r24, r24
    12a2:	99 1f       	adc	r25, r25
    12a4:	88 0f       	add	r24, r24
    12a6:	99 1f       	adc	r25, r25
    12a8:	88 0f       	add	r24, r24
    12aa:	99 1f       	adc	r25, r25
    12ac:	82 0f       	add	r24, r18
    12ae:	93 1f       	adc	r25, r19
    12b0:	9a 01       	movw	r18, r20
    12b2:	28 1b       	sub	r18, r24
    12b4:	39 0b       	sbc	r19, r25
    12b6:	c9 01       	movw	r24, r18
    12b8:	80 5d       	subi	r24, 0xD0	; 208
    12ba:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    12be:	85 e8       	ldi	r24, 0x85	; 133
    12c0:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	
	
	// displaying day and month in form of "d/m"
	LCD_pos(5,0);
	if ((day/10)>0)
    12c4:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <day>
    12c8:	8a 30       	cpi	r24, 0x0A	; 10
    12ca:	e0 f0       	brcs	.+56     	; 0x1304 <display_normal_mode+0x182>
	{
		LCD_CHAR((day/10)+'0');
    12cc:	1d ec       	ldi	r17, 0xCD	; 205
    12ce:	81 9f       	mul	r24, r17
    12d0:	81 2d       	mov	r24, r1
    12d2:	11 24       	eor	r1, r1
    12d4:	86 95       	lsr	r24
    12d6:	86 95       	lsr	r24
    12d8:	86 95       	lsr	r24
    12da:	80 5d       	subi	r24, 0xD0	; 208
    12dc:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((day%10)+'0');
    12e0:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <day>
    12e4:	81 9f       	mul	r24, r17
    12e6:	11 2d       	mov	r17, r1
    12e8:	11 24       	eor	r1, r1
    12ea:	16 95       	lsr	r17
    12ec:	16 95       	lsr	r17
    12ee:	16 95       	lsr	r17
    12f0:	11 0f       	add	r17, r17
    12f2:	91 2f       	mov	r25, r17
    12f4:	99 0f       	add	r25, r25
    12f6:	99 0f       	add	r25, r25
    12f8:	19 0f       	add	r17, r25
    12fa:	81 1b       	sub	r24, r17
    12fc:	80 5d       	subi	r24, 0xD0	; 208
    12fe:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1302:	08 c0       	rjmp	.+16     	; 0x1314 <display_normal_mode+0x192>
	}
	else
	{
		LCD_CHAR('0');
    1304:	80 e3       	ldi	r24, 0x30	; 48
    1306:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((day)+'0');
    130a:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <day>
    130e:	80 5d       	subi	r24, 0xD0	; 208
    1310:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	}
	LCD_CHAR('/');
    1314:	8f e2       	ldi	r24, 0x2F	; 47
    1316:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	
	if ((month/10)>0)
    131a:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <month>
    131e:	8a 30       	cpi	r24, 0x0A	; 10
    1320:	e0 f0       	brcs	.+56     	; 0x135a <display_normal_mode+0x1d8>
	{
		LCD_CHAR((month/10)+'0');
    1322:	1d ec       	ldi	r17, 0xCD	; 205
    1324:	81 9f       	mul	r24, r17
    1326:	81 2d       	mov	r24, r1
    1328:	11 24       	eor	r1, r1
    132a:	86 95       	lsr	r24
    132c:	86 95       	lsr	r24
    132e:	86 95       	lsr	r24
    1330:	80 5d       	subi	r24, 0xD0	; 208
    1332:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((month%10)+'0');
    1336:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <month>
    133a:	81 9f       	mul	r24, r17
    133c:	11 2d       	mov	r17, r1
    133e:	11 24       	eor	r1, r1
    1340:	16 95       	lsr	r17
    1342:	16 95       	lsr	r17
    1344:	16 95       	lsr	r17
    1346:	11 0f       	add	r17, r17
    1348:	91 2f       	mov	r25, r17
    134a:	99 0f       	add	r25, r25
    134c:	99 0f       	add	r25, r25
    134e:	19 0f       	add	r17, r25
    1350:	81 1b       	sub	r24, r17
    1352:	80 5d       	subi	r24, 0xD0	; 208
    1354:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1358:	08 c0       	rjmp	.+16     	; 0x136a <display_normal_mode+0x1e8>
	}
	else
	{
		LCD_CHAR('0');
    135a:	80 e3       	ldi	r24, 0x30	; 48
    135c:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((month)+'0');
    1360:	80 91 8d 02 	lds	r24, 0x028D	; 0x80028d <month>
    1364:	80 5d       	subi	r24, 0xD0	; 208
    1366:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    136a:	8b e8       	ldi	r24, 0x8B	; 139
    136c:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	
	//////////////////////////////////////////////////////////////////////////
	
	// displaying week days
	LCD_pos(11,0);
	switch(week_day)
    1370:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <week_day>
    1374:	8e 2f       	mov	r24, r30
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	fc 01       	movw	r30, r24
    137a:	31 97       	sbiw	r30, 0x01	; 1
    137c:	e7 30       	cpi	r30, 0x07	; 7
    137e:	f1 05       	cpc	r31, r1
    1380:	28 f5       	brcc	.+74     	; 0x13cc <display_normal_mode+0x24a>
    1382:	ea 5b       	subi	r30, 0xBA	; 186
    1384:	ff 4f       	sbci	r31, 0xFF	; 255
    1386:	ea c4       	rjmp	.+2516   	; 0x1d5c <__tablejump2__>
	{
		case 1: LCD_STR("Mon"); break;
    1388:	84 eb       	ldi	r24, 0xB4	; 180
    138a:	91 e0       	ldi	r25, 0x01	; 1
    138c:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1390:	1d c0       	rjmp	.+58     	; 0x13cc <display_normal_mode+0x24a>
		case 2: LCD_STR("Tue"); break;
    1392:	88 eb       	ldi	r24, 0xB8	; 184
    1394:	91 e0       	ldi	r25, 0x01	; 1
    1396:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    139a:	18 c0       	rjmp	.+48     	; 0x13cc <display_normal_mode+0x24a>
		case 3: LCD_STR("Wen"); break;
    139c:	8c eb       	ldi	r24, 0xBC	; 188
    139e:	91 e0       	ldi	r25, 0x01	; 1
    13a0:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    13a4:	13 c0       	rjmp	.+38     	; 0x13cc <display_normal_mode+0x24a>
		case 4: LCD_STR("Thu"); break;
    13a6:	80 ec       	ldi	r24, 0xC0	; 192
    13a8:	91 e0       	ldi	r25, 0x01	; 1
    13aa:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    13ae:	0e c0       	rjmp	.+28     	; 0x13cc <display_normal_mode+0x24a>
		case 5: LCD_STR("Fri"); break;
    13b0:	84 ec       	ldi	r24, 0xC4	; 196
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    13b8:	09 c0       	rjmp	.+18     	; 0x13cc <display_normal_mode+0x24a>
		case 6: LCD_STR("Sat"); break;
    13ba:	88 ec       	ldi	r24, 0xC8	; 200
    13bc:	91 e0       	ldi	r25, 0x01	; 1
    13be:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    13c2:	04 c0       	rjmp	.+8      	; 0x13cc <display_normal_mode+0x24a>
		case 7: LCD_STR("Sun"); break;
    13c4:	8c ec       	ldi	r24, 0xCC	; 204
    13c6:	91 e0       	ldi	r25, 0x01	; 1
    13c8:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
	}
	//////////////////////////////////////////////////////////////////////////
	
	// displaying hours
	if(hour>12)
    13cc:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <hour>
    13d0:	8d 30       	cpi	r24, 0x0D	; 13
    13d2:	18 f1       	brcs	.+70     	; 0x141a <display_normal_mode+0x298>
    13d4:	80 ec       	ldi	r24, 0xC0	; 192
    13d6:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	{
		LCD_pos(0,1);
		LCD_STR(PM);
    13da:	ce 01       	movw	r24, r28
    13dc:	04 96       	adiw	r24, 0x04	; 4
    13de:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    13e2:	83 ec       	ldi	r24, 0xC3	; 195
    13e4:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		LCD_pos(3,1);
		LCD_CHAR((hour-12)/10+'0');
    13e8:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <hour>
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	0c 97       	sbiw	r24, 0x0c	; 12
    13f0:	0a e0       	ldi	r16, 0x0A	; 10
    13f2:	10 e0       	ldi	r17, 0x00	; 0
    13f4:	b8 01       	movw	r22, r16
    13f6:	9f d4       	rcall	.+2366   	; 0x1d36 <__divmodhi4>
    13f8:	80 e3       	ldi	r24, 0x30	; 48
    13fa:	86 0f       	add	r24, r22
    13fc:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((hour-12)%10+'0');
    1400:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <hour>
    1404:	90 e0       	ldi	r25, 0x00	; 0
    1406:	0c 97       	sbiw	r24, 0x0c	; 12
    1408:	b8 01       	movw	r22, r16
    140a:	95 d4       	rcall	.+2346   	; 0x1d36 <__divmodhi4>
    140c:	80 5d       	subi	r24, 0xD0	; 208
    140e:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR(':');
    1412:	8a e3       	ldi	r24, 0x3A	; 58
    1414:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1418:	2a c0       	rjmp	.+84     	; 0x146e <display_normal_mode+0x2ec>
    141a:	80 ec       	ldi	r24, 0xC0	; 192
    141c:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		
	}
	else
	{
		LCD_pos(0,1);
		LCD_STR(AM);
    1420:	ce 01       	movw	r24, r28
    1422:	01 96       	adiw	r24, 0x01	; 1
    1424:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1428:	83 ec       	ldi	r24, 0xC3	; 195
    142a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		LCD_pos(3,1);
		LCD_CHAR((hour)/10+'0');
    142e:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <hour>
    1432:	1d ec       	ldi	r17, 0xCD	; 205
    1434:	81 9f       	mul	r24, r17
    1436:	81 2d       	mov	r24, r1
    1438:	11 24       	eor	r1, r1
    143a:	86 95       	lsr	r24
    143c:	86 95       	lsr	r24
    143e:	86 95       	lsr	r24
    1440:	80 5d       	subi	r24, 0xD0	; 208
    1442:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((hour)%10+'0');
    1446:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <hour>
    144a:	81 9f       	mul	r24, r17
    144c:	11 2d       	mov	r17, r1
    144e:	11 24       	eor	r1, r1
    1450:	16 95       	lsr	r17
    1452:	16 95       	lsr	r17
    1454:	16 95       	lsr	r17
    1456:	11 0f       	add	r17, r17
    1458:	91 2f       	mov	r25, r17
    145a:	99 0f       	add	r25, r25
    145c:	99 0f       	add	r25, r25
    145e:	19 0f       	add	r17, r25
    1460:	81 1b       	sub	r24, r17
    1462:	80 5d       	subi	r24, 0xD0	; 208
    1464:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR(':');
    1468:	8a e3       	ldi	r24, 0x3A	; 58
    146a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    146e:	86 ec       	ldi	r24, 0xC6	; 198
    1470:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	}
	
	// min displaying
	LCD_pos(6,1);
	LCD_CHAR((min/10)+'0');
    1474:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <min>
    1478:	1d ec       	ldi	r17, 0xCD	; 205
    147a:	81 9f       	mul	r24, r17
    147c:	81 2d       	mov	r24, r1
    147e:	11 24       	eor	r1, r1
    1480:	86 95       	lsr	r24
    1482:	86 95       	lsr	r24
    1484:	86 95       	lsr	r24
    1486:	80 5d       	subi	r24, 0xD0	; 208
    1488:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR((min%10)+'0');
    148c:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <min>
    1490:	81 9f       	mul	r24, r17
    1492:	91 2d       	mov	r25, r1
    1494:	11 24       	eor	r1, r1
    1496:	96 95       	lsr	r25
    1498:	96 95       	lsr	r25
    149a:	96 95       	lsr	r25
    149c:	99 0f       	add	r25, r25
    149e:	29 2f       	mov	r18, r25
    14a0:	22 0f       	add	r18, r18
    14a2:	22 0f       	add	r18, r18
    14a4:	92 0f       	add	r25, r18
    14a6:	89 1b       	sub	r24, r25
    14a8:	80 5d       	subi	r24, 0xD0	; 208
    14aa:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR(':');
    14ae:	8a e3       	ldi	r24, 0x3A	; 58
    14b0:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    14b4:	89 ec       	ldi	r24, 0xC9	; 201
    14b6:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	
	// sec displaying
	LCD_pos(9, 1);
	LCD_CHAR((sec/10)+'0');
    14ba:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <sec>
    14be:	81 9f       	mul	r24, r17
    14c0:	81 2d       	mov	r24, r1
    14c2:	11 24       	eor	r1, r1
    14c4:	86 95       	lsr	r24
    14c6:	86 95       	lsr	r24
    14c8:	86 95       	lsr	r24
    14ca:	80 5d       	subi	r24, 0xD0	; 208
    14cc:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR((sec%10)+'0');
    14d0:	80 91 98 02 	lds	r24, 0x0298	; 0x800298 <sec>
    14d4:	81 9f       	mul	r24, r17
    14d6:	11 2d       	mov	r17, r1
    14d8:	11 24       	eor	r1, r1
    14da:	16 95       	lsr	r17
    14dc:	16 95       	lsr	r17
    14de:	16 95       	lsr	r17
    14e0:	11 0f       	add	r17, r17
    14e2:	91 2f       	mov	r25, r17
    14e4:	99 0f       	add	r25, r25
    14e6:	99 0f       	add	r25, r25
    14e8:	19 0f       	add	r17, r25
    14ea:	81 1b       	sub	r24, r17
    14ec:	80 5d       	subi	r24, 0xD0	; 208
    14ee:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	
}
    14f2:	26 96       	adiw	r28, 0x06	; 6
    14f4:	0f b6       	in	r0, 0x3f	; 63
    14f6:	f8 94       	cli
    14f8:	de bf       	out	0x3e, r29	; 62
    14fa:	0f be       	out	0x3f, r0	; 63
    14fc:	cd bf       	out	0x3d, r28	; 61
    14fe:	df 91       	pop	r29
    1500:	cf 91       	pop	r28
    1502:	1f 91       	pop	r17
    1504:	0f 91       	pop	r16
    1506:	08 95       	ret

00001508 <display_stop_watch>:
    1508:	80 e8       	ldi	r24, 0x80	; 128
    150a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>

void display_stop_watch(void)
{
	// hour
	LCD_pos(0,0);
	LCD_CHAR((hour_stp_w)/10+'0');
    150e:	20 91 9a 02 	lds	r18, 0x029A	; 0x80029a <hour_stp_w>
    1512:	30 91 9b 02 	lds	r19, 0x029B	; 0x80029b <hour_stp_w+0x1>
    1516:	ad ec       	ldi	r26, 0xCD	; 205
    1518:	bc ec       	ldi	r27, 0xCC	; 204
    151a:	29 d4       	rcall	.+2130   	; 0x1d6e <__umulhisi3>
    151c:	96 95       	lsr	r25
    151e:	87 95       	ror	r24
    1520:	96 95       	lsr	r25
    1522:	87 95       	ror	r24
    1524:	96 95       	lsr	r25
    1526:	87 95       	ror	r24
    1528:	80 5d       	subi	r24, 0xD0	; 208
    152a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR((hour_stp_w)%10+'0');
    152e:	40 91 9a 02 	lds	r20, 0x029A	; 0x80029a <hour_stp_w>
    1532:	50 91 9b 02 	lds	r21, 0x029B	; 0x80029b <hour_stp_w+0x1>
    1536:	9a 01       	movw	r18, r20
    1538:	ad ec       	ldi	r26, 0xCD	; 205
    153a:	bc ec       	ldi	r27, 0xCC	; 204
    153c:	18 d4       	rcall	.+2096   	; 0x1d6e <__umulhisi3>
    153e:	96 95       	lsr	r25
    1540:	87 95       	ror	r24
    1542:	96 95       	lsr	r25
    1544:	87 95       	ror	r24
    1546:	96 95       	lsr	r25
    1548:	87 95       	ror	r24
    154a:	9c 01       	movw	r18, r24
    154c:	22 0f       	add	r18, r18
    154e:	33 1f       	adc	r19, r19
    1550:	88 0f       	add	r24, r24
    1552:	99 1f       	adc	r25, r25
    1554:	88 0f       	add	r24, r24
    1556:	99 1f       	adc	r25, r25
    1558:	88 0f       	add	r24, r24
    155a:	99 1f       	adc	r25, r25
    155c:	82 0f       	add	r24, r18
    155e:	93 1f       	adc	r25, r19
    1560:	9a 01       	movw	r18, r20
    1562:	28 1b       	sub	r18, r24
    1564:	39 0b       	sbc	r19, r25
    1566:	c9 01       	movw	r24, r18
    1568:	80 5d       	subi	r24, 0xD0	; 208
    156a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR('h');
    156e:	88 e6       	ldi	r24, 0x68	; 104
    1570:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1574:	83 ec       	ldi	r24, 0xC3	; 195
    1576:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	
	// min
	LCD_pos(3,1);
	LCD_CHAR((min_stp_w/10)+'0');
    157a:	20 91 8e 02 	lds	r18, 0x028E	; 0x80028e <min_stp_w>
    157e:	30 91 8f 02 	lds	r19, 0x028F	; 0x80028f <min_stp_w+0x1>
    1582:	ad ec       	ldi	r26, 0xCD	; 205
    1584:	bc ec       	ldi	r27, 0xCC	; 204
    1586:	f3 d3       	rcall	.+2022   	; 0x1d6e <__umulhisi3>
    1588:	96 95       	lsr	r25
    158a:	87 95       	ror	r24
    158c:	96 95       	lsr	r25
    158e:	87 95       	ror	r24
    1590:	96 95       	lsr	r25
    1592:	87 95       	ror	r24
    1594:	80 5d       	subi	r24, 0xD0	; 208
    1596:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR((min_stp_w%10)+'0');
    159a:	40 91 8e 02 	lds	r20, 0x028E	; 0x80028e <min_stp_w>
    159e:	50 91 8f 02 	lds	r21, 0x028F	; 0x80028f <min_stp_w+0x1>
    15a2:	9a 01       	movw	r18, r20
    15a4:	ad ec       	ldi	r26, 0xCD	; 205
    15a6:	bc ec       	ldi	r27, 0xCC	; 204
    15a8:	e2 d3       	rcall	.+1988   	; 0x1d6e <__umulhisi3>
    15aa:	96 95       	lsr	r25
    15ac:	87 95       	ror	r24
    15ae:	96 95       	lsr	r25
    15b0:	87 95       	ror	r24
    15b2:	96 95       	lsr	r25
    15b4:	87 95       	ror	r24
    15b6:	9c 01       	movw	r18, r24
    15b8:	22 0f       	add	r18, r18
    15ba:	33 1f       	adc	r19, r19
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	82 0f       	add	r24, r18
    15ca:	93 1f       	adc	r25, r19
    15cc:	9a 01       	movw	r18, r20
    15ce:	28 1b       	sub	r18, r24
    15d0:	39 0b       	sbc	r19, r25
    15d2:	c9 01       	movw	r24, r18
    15d4:	80 5d       	subi	r24, 0xD0	; 208
    15d6:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR(':');
    15da:	8a e3       	ldi	r24, 0x3A	; 58
    15dc:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    15e0:	86 ec       	ldi	r24, 0xC6	; 198
    15e2:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	
	// sec
	LCD_pos(6, 1);
	LCD_CHAR((sec_stp_w/10)+'0');
    15e6:	20 91 90 02 	lds	r18, 0x0290	; 0x800290 <sec_stp_w>
    15ea:	30 91 91 02 	lds	r19, 0x0291	; 0x800291 <sec_stp_w+0x1>
    15ee:	ad ec       	ldi	r26, 0xCD	; 205
    15f0:	bc ec       	ldi	r27, 0xCC	; 204
    15f2:	bd d3       	rcall	.+1914   	; 0x1d6e <__umulhisi3>
    15f4:	96 95       	lsr	r25
    15f6:	87 95       	ror	r24
    15f8:	96 95       	lsr	r25
    15fa:	87 95       	ror	r24
    15fc:	96 95       	lsr	r25
    15fe:	87 95       	ror	r24
    1600:	80 5d       	subi	r24, 0xD0	; 208
    1602:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR((sec_stp_w%10)+'0');
    1606:	40 91 90 02 	lds	r20, 0x0290	; 0x800290 <sec_stp_w>
    160a:	50 91 91 02 	lds	r21, 0x0291	; 0x800291 <sec_stp_w+0x1>
    160e:	9a 01       	movw	r18, r20
    1610:	ad ec       	ldi	r26, 0xCD	; 205
    1612:	bc ec       	ldi	r27, 0xCC	; 204
    1614:	ac d3       	rcall	.+1880   	; 0x1d6e <__umulhisi3>
    1616:	96 95       	lsr	r25
    1618:	87 95       	ror	r24
    161a:	96 95       	lsr	r25
    161c:	87 95       	ror	r24
    161e:	96 95       	lsr	r25
    1620:	87 95       	ror	r24
    1622:	9c 01       	movw	r18, r24
    1624:	22 0f       	add	r18, r18
    1626:	33 1f       	adc	r19, r19
    1628:	88 0f       	add	r24, r24
    162a:	99 1f       	adc	r25, r25
    162c:	88 0f       	add	r24, r24
    162e:	99 1f       	adc	r25, r25
    1630:	88 0f       	add	r24, r24
    1632:	99 1f       	adc	r25, r25
    1634:	82 0f       	add	r24, r18
    1636:	93 1f       	adc	r25, r19
    1638:	9a 01       	movw	r18, r20
    163a:	28 1b       	sub	r18, r24
    163c:	39 0b       	sbc	r19, r25
    163e:	c9 01       	movw	r24, r18
    1640:	80 5d       	subi	r24, 0xD0	; 208
    1642:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR(':');
    1646:	8a e3       	ldi	r24, 0x3A	; 58
    1648:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    164c:	89 ec       	ldi	r24, 0xC9	; 201
    164e:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	
	//milliseconds
	LCD_pos(9, 1);
	LCD_CHAR((cnt_stp_w/10)+'0');
    1652:	20 91 9c 02 	lds	r18, 0x029C	; 0x80029c <cnt_stp_w>
    1656:	30 91 9d 02 	lds	r19, 0x029D	; 0x80029d <cnt_stp_w+0x1>
    165a:	ad ec       	ldi	r26, 0xCD	; 205
    165c:	bc ec       	ldi	r27, 0xCC	; 204
    165e:	87 d3       	rcall	.+1806   	; 0x1d6e <__umulhisi3>
    1660:	96 95       	lsr	r25
    1662:	87 95       	ror	r24
    1664:	96 95       	lsr	r25
    1666:	87 95       	ror	r24
    1668:	96 95       	lsr	r25
    166a:	87 95       	ror	r24
    166c:	80 5d       	subi	r24, 0xD0	; 208
    166e:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
	LCD_CHAR((cnt_stp_w%10)+'0');
    1672:	40 91 9c 02 	lds	r20, 0x029C	; 0x80029c <cnt_stp_w>
    1676:	50 91 9d 02 	lds	r21, 0x029D	; 0x80029d <cnt_stp_w+0x1>
    167a:	9a 01       	movw	r18, r20
    167c:	ad ec       	ldi	r26, 0xCD	; 205
    167e:	bc ec       	ldi	r27, 0xCC	; 204
    1680:	76 d3       	rcall	.+1772   	; 0x1d6e <__umulhisi3>
    1682:	96 95       	lsr	r25
    1684:	87 95       	ror	r24
    1686:	96 95       	lsr	r25
    1688:	87 95       	ror	r24
    168a:	96 95       	lsr	r25
    168c:	87 95       	ror	r24
    168e:	9c 01       	movw	r18, r24
    1690:	22 0f       	add	r18, r18
    1692:	33 1f       	adc	r19, r19
    1694:	88 0f       	add	r24, r24
    1696:	99 1f       	adc	r25, r25
    1698:	88 0f       	add	r24, r24
    169a:	99 1f       	adc	r25, r25
    169c:	88 0f       	add	r24, r24
    169e:	99 1f       	adc	r25, r25
    16a0:	82 0f       	add	r24, r18
    16a2:	93 1f       	adc	r25, r19
    16a4:	9a 01       	movw	r18, r20
    16a6:	28 1b       	sub	r18, r24
    16a8:	39 0b       	sbc	r19, r25
    16aa:	c9 01       	movw	r24, r18
    16ac:	80 5d       	subi	r24, 0xD0	; 208
    16ae:	0c 94 99 00 	jmp	0x132	; 0x132 <LCD_CHAR>
    16b2:	08 95       	ret

000016b4 <display_alarm_time>:
	
}

void display_alarm_time(void)
{
    16b4:	cf 93       	push	r28
	if (isset_alarm)
    16b6:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <isset_alarm>
    16ba:	88 23       	and	r24, r24
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <display_alarm_time+0xc>
    16be:	28 c1       	rjmp	.+592    	; 0x1910 <display_alarm_time+0x25c>
    16c0:	82 e8       	ldi	r24, 0x82	; 130
    16c2:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	{
		LCD_pos(2,0);
		LCD_STR("ALARM IS ON");
    16c6:	8f e8       	ldi	r24, 0x8F	; 143
    16c8:	91 e0       	ldi	r25, 0x01	; 1
    16ca:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    16ce:	80 ec       	ldi	r24, 0xC0	; 192
    16d0:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		
		LCD_pos(0,1);
		LCD_CHAR((year_alarm)/1000+'0');
    16d4:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <year_alarm>
    16d8:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <year_alarm+0x1>
    16dc:	36 95       	lsr	r19
    16de:	27 95       	ror	r18
    16e0:	36 95       	lsr	r19
    16e2:	27 95       	ror	r18
    16e4:	36 95       	lsr	r19
    16e6:	27 95       	ror	r18
    16e8:	a5 ec       	ldi	r26, 0xC5	; 197
    16ea:	b0 e2       	ldi	r27, 0x20	; 32
    16ec:	40 d3       	rcall	.+1664   	; 0x1d6e <__umulhisi3>
    16ee:	92 95       	swap	r25
    16f0:	82 95       	swap	r24
    16f2:	8f 70       	andi	r24, 0x0F	; 15
    16f4:	89 27       	eor	r24, r25
    16f6:	9f 70       	andi	r25, 0x0F	; 15
    16f8:	89 27       	eor	r24, r25
    16fa:	80 5d       	subi	r24, 0xD0	; 208
    16fc:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((year_alarm/100)%10+'0');
    1700:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <year_alarm>
    1704:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <year_alarm+0x1>
    1708:	36 95       	lsr	r19
    170a:	27 95       	ror	r18
    170c:	36 95       	lsr	r19
    170e:	27 95       	ror	r18
    1710:	ab e7       	ldi	r26, 0x7B	; 123
    1712:	b4 e1       	ldi	r27, 0x14	; 20
    1714:	2c d3       	rcall	.+1624   	; 0x1d6e <__umulhisi3>
    1716:	ac 01       	movw	r20, r24
    1718:	56 95       	lsr	r21
    171a:	47 95       	ror	r20
    171c:	9a 01       	movw	r18, r20
    171e:	ad ec       	ldi	r26, 0xCD	; 205
    1720:	bc ec       	ldi	r27, 0xCC	; 204
    1722:	25 d3       	rcall	.+1610   	; 0x1d6e <__umulhisi3>
    1724:	96 95       	lsr	r25
    1726:	87 95       	ror	r24
    1728:	96 95       	lsr	r25
    172a:	87 95       	ror	r24
    172c:	96 95       	lsr	r25
    172e:	87 95       	ror	r24
    1730:	9c 01       	movw	r18, r24
    1732:	22 0f       	add	r18, r18
    1734:	33 1f       	adc	r19, r19
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	88 0f       	add	r24, r24
    173c:	99 1f       	adc	r25, r25
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	82 0f       	add	r24, r18
    1744:	93 1f       	adc	r25, r19
    1746:	9a 01       	movw	r18, r20
    1748:	28 1b       	sub	r18, r24
    174a:	39 0b       	sbc	r19, r25
    174c:	c9 01       	movw	r24, r18
    174e:	80 5d       	subi	r24, 0xD0	; 208
    1750:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((year_alarm/10)%10+'0');
    1754:	20 91 06 01 	lds	r18, 0x0106	; 0x800106 <year_alarm>
    1758:	30 91 07 01 	lds	r19, 0x0107	; 0x800107 <year_alarm+0x1>
    175c:	ad ec       	ldi	r26, 0xCD	; 205
    175e:	bc ec       	ldi	r27, 0xCC	; 204
    1760:	06 d3       	rcall	.+1548   	; 0x1d6e <__umulhisi3>
    1762:	ac 01       	movw	r20, r24
    1764:	56 95       	lsr	r21
    1766:	47 95       	ror	r20
    1768:	56 95       	lsr	r21
    176a:	47 95       	ror	r20
    176c:	56 95       	lsr	r21
    176e:	47 95       	ror	r20
    1770:	9a 01       	movw	r18, r20
    1772:	fd d2       	rcall	.+1530   	; 0x1d6e <__umulhisi3>
    1774:	96 95       	lsr	r25
    1776:	87 95       	ror	r24
    1778:	96 95       	lsr	r25
    177a:	87 95       	ror	r24
    177c:	96 95       	lsr	r25
    177e:	87 95       	ror	r24
    1780:	9c 01       	movw	r18, r24
    1782:	22 0f       	add	r18, r18
    1784:	33 1f       	adc	r19, r19
    1786:	88 0f       	add	r24, r24
    1788:	99 1f       	adc	r25, r25
    178a:	88 0f       	add	r24, r24
    178c:	99 1f       	adc	r25, r25
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	82 0f       	add	r24, r18
    1794:	93 1f       	adc	r25, r19
    1796:	9a 01       	movw	r18, r20
    1798:	28 1b       	sub	r18, r24
    179a:	39 0b       	sbc	r19, r25
    179c:	c9 01       	movw	r24, r18
    179e:	80 5d       	subi	r24, 0xD0	; 208
    17a0:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((year_alarm)%10+'0');
    17a4:	40 91 06 01 	lds	r20, 0x0106	; 0x800106 <year_alarm>
    17a8:	50 91 07 01 	lds	r21, 0x0107	; 0x800107 <year_alarm+0x1>
    17ac:	9a 01       	movw	r18, r20
    17ae:	ad ec       	ldi	r26, 0xCD	; 205
    17b0:	bc ec       	ldi	r27, 0xCC	; 204
    17b2:	dd d2       	rcall	.+1466   	; 0x1d6e <__umulhisi3>
    17b4:	96 95       	lsr	r25
    17b6:	87 95       	ror	r24
    17b8:	96 95       	lsr	r25
    17ba:	87 95       	ror	r24
    17bc:	96 95       	lsr	r25
    17be:	87 95       	ror	r24
    17c0:	9c 01       	movw	r18, r24
    17c2:	22 0f       	add	r18, r18
    17c4:	33 1f       	adc	r19, r19
    17c6:	88 0f       	add	r24, r24
    17c8:	99 1f       	adc	r25, r25
    17ca:	88 0f       	add	r24, r24
    17cc:	99 1f       	adc	r25, r25
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	82 0f       	add	r24, r18
    17d4:	93 1f       	adc	r25, r19
    17d6:	9a 01       	movw	r18, r20
    17d8:	28 1b       	sub	r18, r24
    17da:	39 0b       	sbc	r19, r25
    17dc:	c9 01       	movw	r24, r18
    17de:	80 5d       	subi	r24, 0xD0	; 208
    17e0:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR(' ');
    17e4:	80 e2       	ldi	r24, 0x20	; 32
    17e6:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		if ((day_alarm/10)>0)
    17ea:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <day_alarm>
    17ee:	8a 30       	cpi	r24, 0x0A	; 10
    17f0:	e0 f0       	brcs	.+56     	; 0x182a <display_alarm_time+0x176>
		{
			LCD_CHAR((day_alarm/10)+'0');
    17f2:	cd ec       	ldi	r28, 0xCD	; 205
    17f4:	8c 9f       	mul	r24, r28
    17f6:	81 2d       	mov	r24, r1
    17f8:	11 24       	eor	r1, r1
    17fa:	86 95       	lsr	r24
    17fc:	86 95       	lsr	r24
    17fe:	86 95       	lsr	r24
    1800:	80 5d       	subi	r24, 0xD0	; 208
    1802:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
			LCD_CHAR((day_alarm%10)+'0');
    1806:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <day_alarm>
    180a:	8c 9f       	mul	r24, r28
    180c:	c1 2d       	mov	r28, r1
    180e:	11 24       	eor	r1, r1
    1810:	c6 95       	lsr	r28
    1812:	c6 95       	lsr	r28
    1814:	c6 95       	lsr	r28
    1816:	cc 0f       	add	r28, r28
    1818:	9c 2f       	mov	r25, r28
    181a:	99 0f       	add	r25, r25
    181c:	99 0f       	add	r25, r25
    181e:	c9 0f       	add	r28, r25
    1820:	8c 1b       	sub	r24, r28
    1822:	80 5d       	subi	r24, 0xD0	; 208
    1824:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1828:	08 c0       	rjmp	.+16     	; 0x183a <display_alarm_time+0x186>
		}
		else
		{
			LCD_CHAR('0');
    182a:	80 e3       	ldi	r24, 0x30	; 48
    182c:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
			LCD_CHAR((day_alarm)+'0');
    1830:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <day_alarm>
    1834:	80 5d       	subi	r24, 0xD0	; 208
    1836:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		}
		LCD_CHAR('/');
    183a:	8f e2       	ldi	r24, 0x2F	; 47
    183c:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		
		if ((month_alarm/10)>0)
    1840:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <month_alarm>
    1844:	8a 30       	cpi	r24, 0x0A	; 10
    1846:	e0 f0       	brcs	.+56     	; 0x1880 <display_alarm_time+0x1cc>
		{
			LCD_CHAR((month_alarm/10)+'0');
    1848:	cd ec       	ldi	r28, 0xCD	; 205
    184a:	8c 9f       	mul	r24, r28
    184c:	81 2d       	mov	r24, r1
    184e:	11 24       	eor	r1, r1
    1850:	86 95       	lsr	r24
    1852:	86 95       	lsr	r24
    1854:	86 95       	lsr	r24
    1856:	80 5d       	subi	r24, 0xD0	; 208
    1858:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
			LCD_CHAR((month_alarm%10)+'0');
    185c:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <month_alarm>
    1860:	8c 9f       	mul	r24, r28
    1862:	c1 2d       	mov	r28, r1
    1864:	11 24       	eor	r1, r1
    1866:	c6 95       	lsr	r28
    1868:	c6 95       	lsr	r28
    186a:	c6 95       	lsr	r28
    186c:	cc 0f       	add	r28, r28
    186e:	9c 2f       	mov	r25, r28
    1870:	99 0f       	add	r25, r25
    1872:	99 0f       	add	r25, r25
    1874:	c9 0f       	add	r28, r25
    1876:	8c 1b       	sub	r24, r28
    1878:	80 5d       	subi	r24, 0xD0	; 208
    187a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    187e:	08 c0       	rjmp	.+16     	; 0x1890 <display_alarm_time+0x1dc>
		}
		else
		{
			LCD_CHAR('0');
    1880:	80 e3       	ldi	r24, 0x30	; 48
    1882:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
			LCD_CHAR((month_alarm)+'0');
    1886:	80 91 87 02 	lds	r24, 0x0287	; 0x800287 <month_alarm>
    188a:	80 5d       	subi	r24, 0xD0	; 208
    188c:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		}
		LCD_CHAR(' ');
    1890:	80 e2       	ldi	r24, 0x20	; 32
    1892:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((hour_alarm)/10+'0');
    1896:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <hour_alarm>
    189a:	cd ec       	ldi	r28, 0xCD	; 205
    189c:	8c 9f       	mul	r24, r28
    189e:	81 2d       	mov	r24, r1
    18a0:	11 24       	eor	r1, r1
    18a2:	86 95       	lsr	r24
    18a4:	86 95       	lsr	r24
    18a6:	86 95       	lsr	r24
    18a8:	80 5d       	subi	r24, 0xD0	; 208
    18aa:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((hour_alarm)%10+'0');
    18ae:	80 91 89 02 	lds	r24, 0x0289	; 0x800289 <hour_alarm>
    18b2:	8c 9f       	mul	r24, r28
    18b4:	91 2d       	mov	r25, r1
    18b6:	11 24       	eor	r1, r1
    18b8:	96 95       	lsr	r25
    18ba:	96 95       	lsr	r25
    18bc:	96 95       	lsr	r25
    18be:	99 0f       	add	r25, r25
    18c0:	29 2f       	mov	r18, r25
    18c2:	22 0f       	add	r18, r18
    18c4:	22 0f       	add	r18, r18
    18c6:	92 0f       	add	r25, r18
    18c8:	89 1b       	sub	r24, r25
    18ca:	80 5d       	subi	r24, 0xD0	; 208
    18cc:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR(':');
    18d0:	8a e3       	ldi	r24, 0x3A	; 58
    18d2:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((min_alarm)/10+'0');
    18d6:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <min_alarm>
    18da:	8c 9f       	mul	r24, r28
    18dc:	81 2d       	mov	r24, r1
    18de:	11 24       	eor	r1, r1
    18e0:	86 95       	lsr	r24
    18e2:	86 95       	lsr	r24
    18e4:	86 95       	lsr	r24
    18e6:	80 5d       	subi	r24, 0xD0	; 208
    18e8:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((min_alarm)%10+'0');
    18ec:	80 91 8a 02 	lds	r24, 0x028A	; 0x80028a <min_alarm>
    18f0:	8c 9f       	mul	r24, r28
    18f2:	c1 2d       	mov	r28, r1
    18f4:	11 24       	eor	r1, r1
    18f6:	c6 95       	lsr	r28
    18f8:	c6 95       	lsr	r28
    18fa:	c6 95       	lsr	r28
    18fc:	cc 0f       	add	r28, r28
    18fe:	9c 2f       	mov	r25, r28
    1900:	99 0f       	add	r25, r25
    1902:	99 0f       	add	r25, r25
    1904:	c9 0f       	add	r28, r25
    1906:	8c 1b       	sub	r24, r28
    1908:	80 5d       	subi	r24, 0xD0	; 208
    190a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    190e:	02 c0       	rjmp	.+4      	; 0x1914 <display_alarm_time+0x260>
		
	}
	else
	{
		alarm_clock_display();
    1910:	0e 94 6d 02 	call	0x4da	; 0x4da <alarm_clock_display>
	}
}
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <time_setup>:
void time_setup(void)
{
    1918:	cf 93       	push	r28
	switch(step_time_set)
    191a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <step_time_set>
    191e:	83 30       	cpi	r24, 0x03	; 3
    1920:	09 f4       	brne	.+2      	; 0x1924 <time_setup+0xc>
    1922:	b9 c0       	rjmp	.+370    	; 0x1a96 <time_setup+0x17e>
    1924:	30 f4       	brcc	.+12     	; 0x1932 <time_setup+0x1a>
    1926:	81 30       	cpi	r24, 0x01	; 1
    1928:	69 f0       	breq	.+26     	; 0x1944 <time_setup+0x2c>
    192a:	82 30       	cpi	r24, 0x02	; 2
    192c:	09 f4       	brne	.+2      	; 0x1930 <time_setup+0x18>
    192e:	9d c0       	rjmp	.+314    	; 0x1a6a <time_setup+0x152>
    1930:	3f c1       	rjmp	.+638    	; 0x1bb0 <time_setup+0x298>
    1932:	85 30       	cpi	r24, 0x05	; 5
    1934:	09 f4       	brne	.+2      	; 0x1938 <time_setup+0x20>
    1936:	ff c0       	rjmp	.+510    	; 0x1b36 <time_setup+0x21e>
    1938:	08 f4       	brcc	.+2      	; 0x193c <time_setup+0x24>
    193a:	d5 c0       	rjmp	.+426    	; 0x1ae6 <time_setup+0x1ce>
    193c:	86 30       	cpi	r24, 0x06	; 6
    193e:	09 f4       	brne	.+2      	; 0x1942 <time_setup+0x2a>
    1940:	22 c1       	rjmp	.+580    	; 0x1b86 <time_setup+0x26e>
    1942:	36 c1       	rjmp	.+620    	; 0x1bb0 <time_setup+0x298>
    1944:	82 e8       	ldi	r24, 0x82	; 130
    1946:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		{
		case 1:
		LCD_pos(2,0);
		LCD_STR("TIME | YEAR ");
    194a:	80 ed       	ldi	r24, 0xD0	; 208
    194c:	91 e0       	ldi	r25, 0x01	; 1
    194e:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1952:	86 ec       	ldi	r24, 0xC6	; 198
    1954:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		LCD_pos(6,1);
		LCD_CHAR((year)/1000+'0');
    1958:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <year>
    195c:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <year+0x1>
    1960:	36 95       	lsr	r19
    1962:	27 95       	ror	r18
    1964:	36 95       	lsr	r19
    1966:	27 95       	ror	r18
    1968:	36 95       	lsr	r19
    196a:	27 95       	ror	r18
    196c:	a5 ec       	ldi	r26, 0xC5	; 197
    196e:	b0 e2       	ldi	r27, 0x20	; 32
    1970:	fe d1       	rcall	.+1020   	; 0x1d6e <__umulhisi3>
    1972:	92 95       	swap	r25
    1974:	82 95       	swap	r24
    1976:	8f 70       	andi	r24, 0x0F	; 15
    1978:	89 27       	eor	r24, r25
    197a:	9f 70       	andi	r25, 0x0F	; 15
    197c:	89 27       	eor	r24, r25
    197e:	80 5d       	subi	r24, 0xD0	; 208
    1980:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((year/100)%10+'0');
    1984:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <year>
    1988:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <year+0x1>
    198c:	36 95       	lsr	r19
    198e:	27 95       	ror	r18
    1990:	36 95       	lsr	r19
    1992:	27 95       	ror	r18
    1994:	ab e7       	ldi	r26, 0x7B	; 123
    1996:	b4 e1       	ldi	r27, 0x14	; 20
    1998:	ea d1       	rcall	.+980    	; 0x1d6e <__umulhisi3>
    199a:	ac 01       	movw	r20, r24
    199c:	56 95       	lsr	r21
    199e:	47 95       	ror	r20
    19a0:	9a 01       	movw	r18, r20
    19a2:	ad ec       	ldi	r26, 0xCD	; 205
    19a4:	bc ec       	ldi	r27, 0xCC	; 204
    19a6:	e3 d1       	rcall	.+966    	; 0x1d6e <__umulhisi3>
    19a8:	96 95       	lsr	r25
    19aa:	87 95       	ror	r24
    19ac:	96 95       	lsr	r25
    19ae:	87 95       	ror	r24
    19b0:	96 95       	lsr	r25
    19b2:	87 95       	ror	r24
    19b4:	9c 01       	movw	r18, r24
    19b6:	22 0f       	add	r18, r18
    19b8:	33 1f       	adc	r19, r19
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	88 0f       	add	r24, r24
    19c0:	99 1f       	adc	r25, r25
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	82 0f       	add	r24, r18
    19c8:	93 1f       	adc	r25, r19
    19ca:	9a 01       	movw	r18, r20
    19cc:	28 1b       	sub	r18, r24
    19ce:	39 0b       	sbc	r19, r25
    19d0:	c9 01       	movw	r24, r18
    19d2:	80 5d       	subi	r24, 0xD0	; 208
    19d4:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((year/10)%10+'0');
    19d8:	20 91 96 02 	lds	r18, 0x0296	; 0x800296 <year>
    19dc:	30 91 97 02 	lds	r19, 0x0297	; 0x800297 <year+0x1>
    19e0:	ad ec       	ldi	r26, 0xCD	; 205
    19e2:	bc ec       	ldi	r27, 0xCC	; 204
    19e4:	c4 d1       	rcall	.+904    	; 0x1d6e <__umulhisi3>
    19e6:	ac 01       	movw	r20, r24
    19e8:	56 95       	lsr	r21
    19ea:	47 95       	ror	r20
    19ec:	56 95       	lsr	r21
    19ee:	47 95       	ror	r20
    19f0:	56 95       	lsr	r21
    19f2:	47 95       	ror	r20
    19f4:	9a 01       	movw	r18, r20
    19f6:	bb d1       	rcall	.+886    	; 0x1d6e <__umulhisi3>
    19f8:	96 95       	lsr	r25
    19fa:	87 95       	ror	r24
    19fc:	96 95       	lsr	r25
    19fe:	87 95       	ror	r24
    1a00:	96 95       	lsr	r25
    1a02:	87 95       	ror	r24
    1a04:	9c 01       	movw	r18, r24
    1a06:	22 0f       	add	r18, r18
    1a08:	33 1f       	adc	r19, r19
    1a0a:	88 0f       	add	r24, r24
    1a0c:	99 1f       	adc	r25, r25
    1a0e:	88 0f       	add	r24, r24
    1a10:	99 1f       	adc	r25, r25
    1a12:	88 0f       	add	r24, r24
    1a14:	99 1f       	adc	r25, r25
    1a16:	82 0f       	add	r24, r18
    1a18:	93 1f       	adc	r25, r19
    1a1a:	9a 01       	movw	r18, r20
    1a1c:	28 1b       	sub	r18, r24
    1a1e:	39 0b       	sbc	r19, r25
    1a20:	c9 01       	movw	r24, r18
    1a22:	80 5d       	subi	r24, 0xD0	; 208
    1a24:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((year)%10+'0');
    1a28:	40 91 96 02 	lds	r20, 0x0296	; 0x800296 <year>
    1a2c:	50 91 97 02 	lds	r21, 0x0297	; 0x800297 <year+0x1>
    1a30:	9a 01       	movw	r18, r20
    1a32:	ad ec       	ldi	r26, 0xCD	; 205
    1a34:	bc ec       	ldi	r27, 0xCC	; 204
    1a36:	9b d1       	rcall	.+822    	; 0x1d6e <__umulhisi3>
    1a38:	96 95       	lsr	r25
    1a3a:	87 95       	ror	r24
    1a3c:	96 95       	lsr	r25
    1a3e:	87 95       	ror	r24
    1a40:	96 95       	lsr	r25
    1a42:	87 95       	ror	r24
    1a44:	9c 01       	movw	r18, r24
    1a46:	22 0f       	add	r18, r18
    1a48:	33 1f       	adc	r19, r19
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	88 0f       	add	r24, r24
    1a50:	99 1f       	adc	r25, r25
    1a52:	88 0f       	add	r24, r24
    1a54:	99 1f       	adc	r25, r25
    1a56:	82 0f       	add	r24, r18
    1a58:	93 1f       	adc	r25, r19
    1a5a:	9a 01       	movw	r18, r20
    1a5c:	28 1b       	sub	r18, r24
    1a5e:	39 0b       	sbc	r19, r25
    1a60:	c9 01       	movw	r24, r18
    1a62:	80 5d       	subi	r24, 0xD0	; 208
    1a64:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		break;
    1a68:	a3 c0       	rjmp	.+326    	; 0x1bb0 <time_setup+0x298>
    1a6a:	82 e8       	ldi	r24, 0x82	; 130
    1a6c:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		
		case 2:
		LCD_pos(2,0);
		LCD_STR("TIME | MONTH ");
    1a70:	8d ed       	ldi	r24, 0xDD	; 221
    1a72:	91 e0       	ldi	r25, 0x01	; 1
    1a74:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1a78:	86 ec       	ldi	r24, 0xC6	; 198
    1a7a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		LCD_pos(6,1);
		LCD_STR(month_arr[month-1]);
    1a7e:	e0 91 8d 02 	lds	r30, 0x028D	; 0x80028d <month>
    1a82:	f0 e0       	ldi	r31, 0x00	; 0
    1a84:	ee 0f       	add	r30, r30
    1a86:	ff 1f       	adc	r31, r31
    1a88:	ec 5e       	subi	r30, 0xEC	; 236
    1a8a:	fe 4f       	sbci	r31, 0xFE	; 254
    1a8c:	80 81       	ld	r24, Z
    1a8e:	91 81       	ldd	r25, Z+1	; 0x01
    1a90:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
		break;
    1a94:	8d c0       	rjmp	.+282    	; 0x1bb0 <time_setup+0x298>
    1a96:	82 e8       	ldi	r24, 0x82	; 130
    1a98:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		
		case 3:
		LCD_pos(2,0);
		LCD_STR("TIME | DAY ");
    1a9c:	8b ee       	ldi	r24, 0xEB	; 235
    1a9e:	91 e0       	ldi	r25, 0x01	; 1
    1aa0:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1aa4:	87 ec       	ldi	r24, 0xC7	; 199
    1aa6:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		LCD_pos(7,1);
		LCD_CHAR((day/10)+'0');
    1aaa:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <day>
    1aae:	cd ec       	ldi	r28, 0xCD	; 205
    1ab0:	8c 9f       	mul	r24, r28
    1ab2:	81 2d       	mov	r24, r1
    1ab4:	11 24       	eor	r1, r1
    1ab6:	86 95       	lsr	r24
    1ab8:	86 95       	lsr	r24
    1aba:	86 95       	lsr	r24
    1abc:	80 5d       	subi	r24, 0xD0	; 208
    1abe:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((day%10)+'0');
    1ac2:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <day>
    1ac6:	8c 9f       	mul	r24, r28
    1ac8:	c1 2d       	mov	r28, r1
    1aca:	11 24       	eor	r1, r1
    1acc:	c6 95       	lsr	r28
    1ace:	c6 95       	lsr	r28
    1ad0:	c6 95       	lsr	r28
    1ad2:	cc 0f       	add	r28, r28
    1ad4:	9c 2f       	mov	r25, r28
    1ad6:	99 0f       	add	r25, r25
    1ad8:	99 0f       	add	r25, r25
    1ada:	c9 0f       	add	r28, r25
    1adc:	8c 1b       	sub	r24, r28
    1ade:	80 5d       	subi	r24, 0xD0	; 208
    1ae0:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		break;
    1ae4:	65 c0       	rjmp	.+202    	; 0x1bb0 <time_setup+0x298>
    1ae6:	82 e8       	ldi	r24, 0x82	; 130
    1ae8:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		
		case 4:
		LCD_pos(2,0);
		LCD_STR("TIME | HOUR");
    1aec:	87 ef       	ldi	r24, 0xF7	; 247
    1aee:	91 e0       	ldi	r25, 0x01	; 1
    1af0:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1af4:	87 ec       	ldi	r24, 0xC7	; 199
    1af6:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		LCD_pos(7,1);
		LCD_CHAR((hour/10)+'0');
    1afa:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <hour>
    1afe:	cd ec       	ldi	r28, 0xCD	; 205
    1b00:	8c 9f       	mul	r24, r28
    1b02:	81 2d       	mov	r24, r1
    1b04:	11 24       	eor	r1, r1
    1b06:	86 95       	lsr	r24
    1b08:	86 95       	lsr	r24
    1b0a:	86 95       	lsr	r24
    1b0c:	80 5d       	subi	r24, 0xD0	; 208
    1b0e:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((hour%10)+'0');
    1b12:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <hour>
    1b16:	8c 9f       	mul	r24, r28
    1b18:	c1 2d       	mov	r28, r1
    1b1a:	11 24       	eor	r1, r1
    1b1c:	c6 95       	lsr	r28
    1b1e:	c6 95       	lsr	r28
    1b20:	c6 95       	lsr	r28
    1b22:	cc 0f       	add	r28, r28
    1b24:	9c 2f       	mov	r25, r28
    1b26:	99 0f       	add	r25, r25
    1b28:	99 0f       	add	r25, r25
    1b2a:	c9 0f       	add	r28, r25
    1b2c:	8c 1b       	sub	r24, r28
    1b2e:	80 5d       	subi	r24, 0xD0	; 208
    1b30:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		break;
    1b34:	3d c0       	rjmp	.+122    	; 0x1bb0 <time_setup+0x298>
    1b36:	81 e8       	ldi	r24, 0x81	; 129
    1b38:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>

		case 5:
		LCD_pos(1,0);
		LCD_STR("TIME | MINUTE");
    1b3c:	83 e0       	ldi	r24, 0x03	; 3
    1b3e:	92 e0       	ldi	r25, 0x02	; 2
    1b40:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1b44:	86 ec       	ldi	r24, 0xC6	; 198
    1b46:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		LCD_pos(6,1);
		LCD_CHAR((min/10)+'0');
    1b4a:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <min>
    1b4e:	cd ec       	ldi	r28, 0xCD	; 205
    1b50:	8c 9f       	mul	r24, r28
    1b52:	81 2d       	mov	r24, r1
    1b54:	11 24       	eor	r1, r1
    1b56:	86 95       	lsr	r24
    1b58:	86 95       	lsr	r24
    1b5a:	86 95       	lsr	r24
    1b5c:	80 5d       	subi	r24, 0xD0	; 208
    1b5e:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((min%10)+'0');
    1b62:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <min>
    1b66:	8c 9f       	mul	r24, r28
    1b68:	c1 2d       	mov	r28, r1
    1b6a:	11 24       	eor	r1, r1
    1b6c:	c6 95       	lsr	r28
    1b6e:	c6 95       	lsr	r28
    1b70:	c6 95       	lsr	r28
    1b72:	cc 0f       	add	r28, r28
    1b74:	9c 2f       	mov	r25, r28
    1b76:	99 0f       	add	r25, r25
    1b78:	99 0f       	add	r25, r25
    1b7a:	c9 0f       	add	r28, r25
    1b7c:	8c 1b       	sub	r24, r28
    1b7e:	80 5d       	subi	r24, 0xD0	; 208
    1b80:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		break;
    1b84:	15 c0       	rjmp	.+42     	; 0x1bb0 <time_setup+0x298>
    1b86:	81 e8       	ldi	r24, 0x81	; 129
    1b88:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		case 6:
		LCD_pos(1,0);
		LCD_STR("TIME | WEEKDAY");
    1b8c:	81 e1       	ldi	r24, 0x11	; 17
    1b8e:	92 e0       	ldi	r25, 0x02	; 2
    1b90:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1b94:	86 ec       	ldi	r24, 0xC6	; 198
    1b96:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		LCD_pos(6,1);
		LCD_STR(week_arr[week_day-1]);
    1b9a:	e0 91 93 02 	lds	r30, 0x0293	; 0x800293 <week_day>
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	ee 0f       	add	r30, r30
    1ba2:	ff 1f       	adc	r31, r31
    1ba4:	ea 5f       	subi	r30, 0xFA	; 250
    1ba6:	fe 4f       	sbci	r31, 0xFE	; 254
    1ba8:	80 81       	ld	r24, Z
    1baa:	91 81       	ldd	r25, Z+1	; 0x01
    1bac:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
		case 7:
		break;
	}


}
    1bb0:	cf 91       	pop	r28
    1bb2:	08 95       	ret

00001bb4 <main>:

int main(void)
{
	cnt=0;
    1bb4:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <cnt>
	sec=0;
    1bb8:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <sec>
	min=10;
    1bbc:	8a e0       	ldi	r24, 0x0A	; 10
    1bbe:	80 93 95 02 	sts	0x0295, r24	; 0x800295 <min>
	hour=12;
    1bc2:	8c e0       	ldi	r24, 0x0C	; 12
    1bc4:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <hour>
	day = 15;
    1bc8:	8f e0       	ldi	r24, 0x0F	; 15
    1bca:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <day>
	week_day=5;
    1bce:	85 e0       	ldi	r24, 0x05	; 5
    1bd0:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <week_day>
	month = 5;
    1bd4:	80 93 8d 02 	sts	0x028D, r24	; 0x80028d <month>
	year = 2020;
    1bd8:	84 ee       	ldi	r24, 0xE4	; 228
    1bda:	97 e0       	ldi	r25, 0x07	; 7
    1bdc:	90 93 97 02 	sts	0x0297, r25	; 0x800297 <year+0x1>
    1be0:	80 93 96 02 	sts	0x0296, r24	; 0x800296 <year>
	
	init_timer();
    1be4:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <init_timer>
	interrupt_init();
    1be8:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <interrupt_init>
	
	// LCD init
	port_init();
    1bec:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <port_init>
	LCD_Init();
    1bf0:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_Init>
	LCD_Clear();
    1bf4:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
	LCD_Comm(0x0c);
    1bf8:	8c e0       	ldi	r24, 0x0C	; 12
    1bfa:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
    1bfe:	8c ec       	ldi	r24, 0xCC	; 204
    1c00:	9c e1       	ldi	r25, 0x1C	; 28
    1c02:	01 97       	sbiw	r24, 0x01	; 1
    1c04:	f1 f7       	brne	.-4      	; 0x1c02 <main+0x4e>
    1c06:	00 c0       	rjmp	.+0      	; 0x1c08 <main+0x54>
    1c08:	00 00       	nop
	_delay_ms(2);
	char prev=mode;
	char prev_step = step;
    1c0a:	e0 90 86 02 	lds	r14, 0x0286	; 0x800286 <step>
	char prev_step_time= step_time_set;
    1c0e:	f0 90 30 01 	lds	r15, 0x0130	; 0x800130 <step_time_set>
	char was_alarm_on =0;
    /* Replace with your application code */
    while (1) 
    {
		if(mode!=prev)
    1c12:	c0 91 8b 02 	lds	r28, 0x028B	; 0x80028b <mode>
	LCD_Comm(0x0c);
	_delay_ms(2);
	char prev=mode;
	char prev_step = step;
	char prev_step_time= step_time_set;
	char was_alarm_on =0;
    1c16:	d0 e0       	ldi	r29, 0x00	; 0
    1c18:	dd 24       	eor	r13, r13
    1c1a:	d3 94       	inc	r13
			was_alarm_on=1;
		}
		if (was_alarm_on==1 && alarm_clock_check_logic(min,hour,day,month,year)==0)
		{
			disable_alarm_clock();
			PORTB = 0xff;
    1c1c:	bb 24       	eor	r11, r11
    1c1e:	ba 94       	dec	r11
			_delay_ms(2);
			was_alarm_on=0;
    1c20:	c1 2c       	mov	r12, r1
    1c22:	0a c0       	rjmp	.+20     	; 0x1c38 <main+0x84>
	char prev_step_time= step_time_set;
	char was_alarm_on =0;
    /* Replace with your application code */
    while (1) 
    {
		if(mode!=prev)
    1c24:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <mode>
    1c28:	c8 17       	cp	r28, r24
    1c2a:	29 f0       	breq	.+10     	; 0x1c36 <main+0x82>
		{
			LCD_Clear();
    1c2c:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
			prev=mode;
    1c30:	c0 91 8b 02 	lds	r28, 0x028B	; 0x80028b <mode>
    1c34:	01 c0       	rjmp	.+2      	; 0x1c38 <main+0x84>
	char prev_step_time= step_time_set;
	char was_alarm_on =0;
    /* Replace with your application code */
    while (1) 
    {
		if(mode!=prev)
    1c36:	c8 2f       	mov	r28, r24
		{
			LCD_Clear();
			prev=mode;
		}
		if (alarm_clock_check_logic(min,hour,day,month,year)==1)
    1c38:	00 91 96 02 	lds	r16, 0x0296	; 0x800296 <year>
    1c3c:	10 91 97 02 	lds	r17, 0x0297	; 0x800297 <year+0x1>
    1c40:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <month>
    1c44:	40 91 99 02 	lds	r20, 0x0299	; 0x800299 <day>
    1c48:	60 91 92 02 	lds	r22, 0x0292	; 0x800292 <hour>
    1c4c:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <min>
    1c50:	0e 94 20 02 	call	0x440	; 0x440 <alarm_clock_check_logic>
    1c54:	81 30       	cpi	r24, 0x01	; 1
    1c56:	19 f4       	brne	.+6      	; 0x1c5e <main+0xaa>
		{
			led_blink();
    1c58:	0e 94 57 02 	call	0x4ae	; 0x4ae <led_blink>
    1c5c:	02 c0       	rjmp	.+4      	; 0x1c62 <main+0xae>
			was_alarm_on=1;
		}
		if (was_alarm_on==1 && alarm_clock_check_logic(min,hour,day,month,year)==0)
    1c5e:	d1 30       	cpi	r29, 0x01	; 1
    1c60:	e1 f4       	brne	.+56     	; 0x1c9a <main+0xe6>
    1c62:	00 91 96 02 	lds	r16, 0x0296	; 0x800296 <year>
    1c66:	10 91 97 02 	lds	r17, 0x0297	; 0x800297 <year+0x1>
    1c6a:	20 91 8d 02 	lds	r18, 0x028D	; 0x80028d <month>
    1c6e:	40 91 99 02 	lds	r20, 0x0299	; 0x800299 <day>
    1c72:	60 91 92 02 	lds	r22, 0x0292	; 0x800292 <hour>
    1c76:	80 91 95 02 	lds	r24, 0x0295	; 0x800295 <min>
    1c7a:	0e 94 20 02 	call	0x440	; 0x440 <alarm_clock_check_logic>
    1c7e:	81 11       	cpse	r24, r1
    1c80:	0b c0       	rjmp	.+22     	; 0x1c98 <main+0xe4>
		{
			disable_alarm_clock();
    1c82:	0e 94 51 01 	call	0x2a2	; 0x2a2 <disable_alarm_clock>
			PORTB = 0xff;
    1c86:	b8 ba       	out	0x18, r11	; 24
    1c88:	8c ec       	ldi	r24, 0xCC	; 204
    1c8a:	9c e1       	ldi	r25, 0x1C	; 28
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	f1 f7       	brne	.-4      	; 0x1c8c <main+0xd8>
    1c90:	00 c0       	rjmp	.+0      	; 0x1c92 <main+0xde>
    1c92:	00 00       	nop
			_delay_ms(2);
			was_alarm_on=0;
    1c94:	dc 2d       	mov	r29, r12
    1c96:	01 c0       	rjmp	.+2      	; 0x1c9a <main+0xe6>
    1c98:	dd 2d       	mov	r29, r13
		}
		switch(mode)
    1c9a:	80 91 8b 02 	lds	r24, 0x028B	; 0x80028b <mode>
    1c9e:	81 30       	cpi	r24, 0x01	; 1
    1ca0:	41 f0       	breq	.+16     	; 0x1cb2 <main+0xfe>
    1ca2:	28 f0       	brcs	.+10     	; 0x1cae <main+0xfa>
    1ca4:	82 30       	cpi	r24, 0x02	; 2
    1ca6:	39 f0       	breq	.+14     	; 0x1cb6 <main+0x102>
    1ca8:	83 30       	cpi	r24, 0x03	; 3
    1caa:	b9 f1       	breq	.+110    	; 0x1d1a <main+0x166>
    1cac:	42 c0       	rjmp	.+132    	; 0x1d32 <main+0x17e>
		{
			case 0: display_normal_mode();break;
    1cae:	69 da       	rcall	.-2862   	; 0x1182 <display_normal_mode>
    1cb0:	b9 cf       	rjmp	.-142    	; 0x1c24 <main+0x70>
			case 1: display_stop_watch(); break;
    1cb2:	2a dc       	rcall	.-1964   	; 0x1508 <display_stop_watch>
    1cb4:	b7 cf       	rjmp	.-146    	; 0x1c24 <main+0x70>
    1cb6:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <step>
			case 2:	
			if (prev_step!=step)
    1cba:	8e 15       	cp	r24, r14
    1cbc:	31 f0       	breq	.+12     	; 0x1cca <main+0x116>
    1cbe:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
			{
				LCD_Clear();
    1cc2:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <cursor_home>
				cursor_home();
    1cc6:	e0 90 86 02 	lds	r14, 0x0286	; 0x800286 <step>
				prev_step=step;
    1cca:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <step>
			}
			if (step==0 && isset_alarm==0)
    1cce:	81 11       	cpse	r24, r1
    1cd0:	19 c0       	rjmp	.+50     	; 0x1d04 <main+0x150>
    1cd2:	80 91 85 02 	lds	r24, 0x0285	; 0x800285 <isset_alarm>
    1cd6:	81 11       	cpse	r24, r1
    1cd8:	15 c0       	rjmp	.+42     	; 0x1d04 <main+0x150>
    1cda:	81 e8       	ldi	r24, 0x81	; 129
    1cdc:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
    1ce0:	80 e2       	ldi	r24, 0x20	; 32
			{
				LCD_pos(1,0);
				LCD_STR("TYPE OF ALARM");
    1ce2:	92 e0       	ldi	r25, 0x02	; 2
    1ce4:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1ce8:	81 ec       	ldi	r24, 0xC1	; 193
    1cea:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
    1cee:	8e e2       	ldi	r24, 0x2E	; 46
				LCD_pos(1,1);
				LCD_STR("DATE");
    1cf0:	92 e0       	ldi	r25, 0x02	; 2
    1cf2:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1cf6:	8a ec       	ldi	r24, 0xCA	; 202
    1cf8:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
    1cfc:	83 e3       	ldi	r24, 0x33	; 51
				LCD_pos(10,1);
				LCD_STR("TIME");
    1cfe:	92 e0       	ldi	r25, 0x02	; 2
    1d00:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1d04:	80 91 94 02 	lds	r24, 0x0294	; 0x800294 <type_of_alarm>
			}
			if (type_of_alarm==1)
    1d08:	81 30       	cpi	r24, 0x01	; 1
    1d0a:	11 f4       	brne	.+4      	; 0x1d10 <main+0x15c>
			{
				display_alarm_time();
    1d0c:	d3 dc       	rcall	.-1626   	; 0x16b4 <display_alarm_time>
    1d0e:	8a cf       	rjmp	.-236    	; 0x1c24 <main+0x70>
    1d10:	81 11       	cpse	r24, r1
			}
			else if (type_of_alarm==0)
    1d12:	88 cf       	rjmp	.-240    	; 0x1c24 <main+0x70>
    1d14:	0e 94 9d 03 	call	0x73a	; 0x73a <simple_alarm_display>
			{
				simple_alarm_display();
    1d18:	85 cf       	rjmp	.-246    	; 0x1c24 <main+0x70>
    1d1a:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <step_time_set>
			}
			break;

			case 3:
				if (prev_step_time!=step_time_set)
    1d1e:	8f 15       	cp	r24, r15
    1d20:	31 f0       	breq	.+12     	; 0x1d2e <main+0x17a>
    1d22:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
				{
					LCD_Clear();
    1d26:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <cursor_home>
					cursor_home();
					prev_step_time=step_time_set;
    1d2a:	f0 90 30 01 	lds	r15, 0x0130	; 0x800130 <step_time_set>
				}
				time_setup();
    1d2e:	f4 dd       	rcall	.-1048   	; 0x1918 <time_setup>
			break;
    1d30:	79 cf       	rjmp	.-270    	; 0x1c24 <main+0x70>
			default: display_normal_mode(); break;
    1d32:	27 da       	rcall	.-2994   	; 0x1182 <display_normal_mode>
    1d34:	77 cf       	rjmp	.-274    	; 0x1c24 <main+0x70>

00001d36 <__divmodhi4>:
    1d36:	97 fb       	bst	r25, 7
    1d38:	07 2e       	mov	r0, r23
    1d3a:	16 f4       	brtc	.+4      	; 0x1d40 <__divmodhi4+0xa>
    1d3c:	00 94       	com	r0
    1d3e:	06 d0       	rcall	.+12     	; 0x1d4c <__divmodhi4_neg1>
    1d40:	77 fd       	sbrc	r23, 7
    1d42:	08 d0       	rcall	.+16     	; 0x1d54 <__divmodhi4_neg2>
    1d44:	23 d0       	rcall	.+70     	; 0x1d8c <__udivmodhi4>
    1d46:	07 fc       	sbrc	r0, 7
    1d48:	05 d0       	rcall	.+10     	; 0x1d54 <__divmodhi4_neg2>
    1d4a:	3e f4       	brtc	.+14     	; 0x1d5a <__divmodhi4_exit>

00001d4c <__divmodhi4_neg1>:
    1d4c:	90 95       	com	r25
    1d4e:	81 95       	neg	r24
    1d50:	9f 4f       	sbci	r25, 0xFF	; 255
    1d52:	08 95       	ret

00001d54 <__divmodhi4_neg2>:
    1d54:	70 95       	com	r23
    1d56:	61 95       	neg	r22
    1d58:	7f 4f       	sbci	r23, 0xFF	; 255

00001d5a <__divmodhi4_exit>:
    1d5a:	08 95       	ret

00001d5c <__tablejump2__>:
    1d5c:	ee 0f       	add	r30, r30
    1d5e:	ff 1f       	adc	r31, r31
    1d60:	00 24       	eor	r0, r0
    1d62:	00 1c       	adc	r0, r0
    1d64:	0b be       	out	0x3b, r0	; 59
    1d66:	07 90       	elpm	r0, Z+
    1d68:	f6 91       	elpm	r31, Z
    1d6a:	e0 2d       	mov	r30, r0
    1d6c:	09 94       	ijmp

00001d6e <__umulhisi3>:
    1d6e:	a2 9f       	mul	r26, r18
    1d70:	b0 01       	movw	r22, r0
    1d72:	b3 9f       	mul	r27, r19
    1d74:	c0 01       	movw	r24, r0
    1d76:	a3 9f       	mul	r26, r19
    1d78:	70 0d       	add	r23, r0
    1d7a:	81 1d       	adc	r24, r1
    1d7c:	11 24       	eor	r1, r1
    1d7e:	91 1d       	adc	r25, r1
    1d80:	b2 9f       	mul	r27, r18
    1d82:	70 0d       	add	r23, r0
    1d84:	81 1d       	adc	r24, r1
    1d86:	11 24       	eor	r1, r1
    1d88:	91 1d       	adc	r25, r1
    1d8a:	08 95       	ret

00001d8c <__udivmodhi4>:
    1d8c:	aa 1b       	sub	r26, r26
    1d8e:	bb 1b       	sub	r27, r27
    1d90:	51 e1       	ldi	r21, 0x11	; 17
    1d92:	07 c0       	rjmp	.+14     	; 0x1da2 <__udivmodhi4_ep>

00001d94 <__udivmodhi4_loop>:
    1d94:	aa 1f       	adc	r26, r26
    1d96:	bb 1f       	adc	r27, r27
    1d98:	a6 17       	cp	r26, r22
    1d9a:	b7 07       	cpc	r27, r23
    1d9c:	10 f0       	brcs	.+4      	; 0x1da2 <__udivmodhi4_ep>
    1d9e:	a6 1b       	sub	r26, r22
    1da0:	b7 0b       	sbc	r27, r23

00001da2 <__udivmodhi4_ep>:
    1da2:	88 1f       	adc	r24, r24
    1da4:	99 1f       	adc	r25, r25
    1da6:	5a 95       	dec	r21
    1da8:	a9 f7       	brne	.-22     	; 0x1d94 <__udivmodhi4_loop>
    1daa:	80 95       	com	r24
    1dac:	90 95       	com	r25
    1dae:	bc 01       	movw	r22, r24
    1db0:	cd 01       	movw	r24, r26
    1db2:	08 95       	ret

00001db4 <_exit>:
    1db4:	f8 94       	cli

00001db6 <__stop_program>:
    1db6:	ff cf       	rjmp	.-2      	; 0x1db6 <__stop_program>
