
Timer 2- CTC mode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000da  00800100  00001616  000016aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001616  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000018  008001da  008001da  00001784  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001784  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000017b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  000017f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f2a  00000000  00000000  000018f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a44  00000000  00000000  00003822  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f7d  00000000  00000000  00004266  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  000051e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000686  00000000  00000000  0000557c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001144  00000000  00000000  00005c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00006d46  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4c c0       	rjmp	.+152    	; 0x9a <__ctors_end>
       2:	00 00       	nop
       4:	b1 c3       	rjmp	.+1890   	; 0x768 <__vector_1>
       6:	00 00       	nop
       8:	c0 c4       	rjmp	.+2432   	; 0x98a <__vector_2>
       a:	00 00       	nop
       c:	ec c4       	rjmp	.+2520   	; 0x9e6 <__vector_3>
       e:	00 00       	nop
      10:	f8 c5       	rjmp	.+3056   	; 0xc02 <__vector_4>
      12:	00 00       	nop
      14:	61 c0       	rjmp	.+194    	; 0xd8 <__bad_interrupt>
      16:	00 00       	nop
      18:	5f c0       	rjmp	.+190    	; 0xd8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5d c0       	rjmp	.+186    	; 0xd8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5b c0       	rjmp	.+182    	; 0xd8 <__bad_interrupt>
      22:	00 00       	nop
      24:	59 c0       	rjmp	.+178    	; 0xd8 <__bad_interrupt>
      26:	00 00       	nop
      28:	57 c0       	rjmp	.+174    	; 0xd8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	55 c0       	rjmp	.+170    	; 0xd8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	53 c0       	rjmp	.+166    	; 0xd8 <__bad_interrupt>
      32:	00 00       	nop
      34:	51 c0       	rjmp	.+162    	; 0xd8 <__bad_interrupt>
      36:	00 00       	nop
      38:	4f c0       	rjmp	.+158    	; 0xd8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	67 c3       	rjmp	.+1742   	; 0x70c <__vector_15>
      3e:	00 00       	nop
      40:	4b c0       	rjmp	.+150    	; 0xd8 <__bad_interrupt>
      42:	00 00       	nop
      44:	49 c0       	rjmp	.+146    	; 0xd8 <__bad_interrupt>
      46:	00 00       	nop
      48:	47 c0       	rjmp	.+142    	; 0xd8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	45 c0       	rjmp	.+138    	; 0xd8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	43 c0       	rjmp	.+134    	; 0xd8 <__bad_interrupt>
      52:	00 00       	nop
      54:	41 c0       	rjmp	.+130    	; 0xd8 <__bad_interrupt>
      56:	00 00       	nop
      58:	3f c0       	rjmp	.+126    	; 0xd8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	3d c0       	rjmp	.+122    	; 0xd8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3b c0       	rjmp	.+118    	; 0xd8 <__bad_interrupt>
      62:	00 00       	nop
      64:	39 c0       	rjmp	.+114    	; 0xd8 <__bad_interrupt>
      66:	00 00       	nop
      68:	37 c0       	rjmp	.+110    	; 0xd8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	35 c0       	rjmp	.+106    	; 0xd8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	33 c0       	rjmp	.+102    	; 0xd8 <__bad_interrupt>
      72:	00 00       	nop
      74:	31 c0       	rjmp	.+98     	; 0xd8 <__bad_interrupt>
      76:	00 00       	nop
      78:	2f c0       	rjmp	.+94     	; 0xd8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	2d c0       	rjmp	.+90     	; 0xd8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2b c0       	rjmp	.+86     	; 0xd8 <__bad_interrupt>
      82:	00 00       	nop
      84:	29 c0       	rjmp	.+82     	; 0xd8 <__bad_interrupt>
      86:	00 00       	nop
      88:	27 c0       	rjmp	.+78     	; 0xd8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	98 07       	cpc	r25, r24
      8e:	9c 07       	cpc	r25, r28
      90:	a0 07       	cpc	r26, r16
      92:	a4 07       	cpc	r26, r20
      94:	a8 07       	cpc	r26, r24
      96:	ac 07       	cpc	r26, r28
      98:	b0 07       	cpc	r27, r16

0000009a <__ctors_end>:
      9a:	11 24       	eor	r1, r1
      9c:	1f be       	out	0x3f, r1	; 63
      9e:	cf ef       	ldi	r28, 0xFF	; 255
      a0:	d0 e1       	ldi	r29, 0x10	; 16
      a2:	de bf       	out	0x3e, r29	; 62
      a4:	cd bf       	out	0x3d, r28	; 61

000000a6 <__do_copy_data>:
      a6:	11 e0       	ldi	r17, 0x01	; 1
      a8:	a0 e0       	ldi	r26, 0x00	; 0
      aa:	b1 e0       	ldi	r27, 0x01	; 1
      ac:	e6 e1       	ldi	r30, 0x16	; 22
      ae:	f6 e1       	ldi	r31, 0x16	; 22
      b0:	00 e0       	ldi	r16, 0x00	; 0
      b2:	0b bf       	out	0x3b, r16	; 59
      b4:	02 c0       	rjmp	.+4      	; 0xba <__do_copy_data+0x14>
      b6:	07 90       	elpm	r0, Z+
      b8:	0d 92       	st	X+, r0
      ba:	aa 3d       	cpi	r26, 0xDA	; 218
      bc:	b1 07       	cpc	r27, r17
      be:	d9 f7       	brne	.-10     	; 0xb6 <__do_copy_data+0x10>

000000c0 <__do_clear_bss>:
      c0:	21 e0       	ldi	r18, 0x01	; 1
      c2:	aa ed       	ldi	r26, 0xDA	; 218
      c4:	b1 e0       	ldi	r27, 0x01	; 1
      c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
      c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
      ca:	a2 3f       	cpi	r26, 0xF2	; 242
      cc:	b2 07       	cpc	r27, r18
      ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
      d0:	0e 94 3f 0a 	call	0x147e	; 0x147e <main>
      d4:	0c 94 09 0b 	jmp	0x1612	; 0x1612 <_exit>

000000d8 <__bad_interrupt>:
      d8:	93 cf       	rjmp	.-218    	; 0x0 <__vectors>

000000da <LCD_Data>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      da:	e5 e6       	ldi	r30, 0x65	; 101
      dc:	f0 e0       	ldi	r31, 0x00	; 0
      de:	90 81       	ld	r25, Z
      e0:	94 60       	ori	r25, 0x04	; 4
      e2:	90 83       	st	Z, r25
      e4:	90 81       	ld	r25, Z
      e6:	9d 7f       	andi	r25, 0xFD	; 253
      e8:	90 83       	st	Z, r25
      ea:	90 81       	ld	r25, Z
      ec:	91 60       	ori	r25, 0x01	; 1
      ee:	90 83       	st	Z, r25
      f0:	96 ef       	ldi	r25, 0xF6	; 246
      f2:	9a 95       	dec	r25
      f4:	f1 f7       	brne	.-4      	; 0xf2 <LCD_Data+0x18>
      f6:	8b bb       	out	0x1b, r24	; 27
      f8:	86 ef       	ldi	r24, 0xF6	; 246
      fa:	8a 95       	dec	r24
      fc:	f1 f7       	brne	.-4      	; 0xfa <LCD_Data+0x20>
      fe:	80 81       	ld	r24, Z
     100:	8e 7f       	andi	r24, 0xFE	; 254
     102:	80 83       	st	Z, r24
     104:	08 95       	ret

00000106 <LCD_Comm>:
     106:	e5 e6       	ldi	r30, 0x65	; 101
     108:	f0 e0       	ldi	r31, 0x00	; 0
     10a:	90 81       	ld	r25, Z
     10c:	9b 7f       	andi	r25, 0xFB	; 251
     10e:	90 83       	st	Z, r25
     110:	90 81       	ld	r25, Z
     112:	9d 7f       	andi	r25, 0xFD	; 253
     114:	90 83       	st	Z, r25
     116:	90 81       	ld	r25, Z
     118:	91 60       	ori	r25, 0x01	; 1
     11a:	90 83       	st	Z, r25
     11c:	96 ef       	ldi	r25, 0xF6	; 246
     11e:	9a 95       	dec	r25
     120:	f1 f7       	brne	.-4      	; 0x11e <LCD_Comm+0x18>
     122:	8b bb       	out	0x1b, r24	; 27
     124:	86 ef       	ldi	r24, 0xF6	; 246
     126:	8a 95       	dec	r24
     128:	f1 f7       	brne	.-4      	; 0x126 <LCD_Comm+0x20>
     12a:	80 81       	ld	r24, Z
     12c:	8e 7f       	andi	r24, 0xFE	; 254
     12e:	80 83       	st	Z, r24
     130:	08 95       	ret

00000132 <LCD_CHAR>:
     132:	d3 df       	rcall	.-90     	; 0xda <LCD_Data>
     134:	8c ec       	ldi	r24, 0xCC	; 204
     136:	9c e1       	ldi	r25, 0x1C	; 28
     138:	01 97       	sbiw	r24, 0x01	; 1
     13a:	f1 f7       	brne	.-4      	; 0x138 <LCD_CHAR+0x6>
     13c:	00 c0       	rjmp	.+0      	; 0x13e <LCD_CHAR+0xc>
     13e:	00 00       	nop
     140:	08 95       	ret

00000142 <LCD_STR>:
     142:	cf 93       	push	r28
     144:	df 93       	push	r29
     146:	ec 01       	movw	r28, r24
     148:	88 81       	ld	r24, Y
     14a:	88 23       	and	r24, r24
     14c:	29 f0       	breq	.+10     	; 0x158 <LCD_STR+0x16>
     14e:	21 96       	adiw	r28, 0x01	; 1
     150:	f0 df       	rcall	.-32     	; 0x132 <LCD_CHAR>
     152:	89 91       	ld	r24, Y+
     154:	81 11       	cpse	r24, r1
     156:	fc cf       	rjmp	.-8      	; 0x150 <LCD_STR+0xe>
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <LCD_Clear>:
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	d2 df       	rcall	.-92     	; 0x106 <LCD_Comm>
     162:	8c ec       	ldi	r24, 0xCC	; 204
     164:	9c e1       	ldi	r25, 0x1C	; 28
     166:	01 97       	sbiw	r24, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <LCD_Clear+0x8>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_Clear+0xe>
     16c:	00 00       	nop
     16e:	08 95       	ret

00000170 <LCD_Init>:
     170:	88 e3       	ldi	r24, 0x38	; 56
     172:	c9 df       	rcall	.-110    	; 0x106 <LCD_Comm>
     174:	8c ec       	ldi	r24, 0xCC	; 204
     176:	9c e1       	ldi	r25, 0x1C	; 28
     178:	01 97       	sbiw	r24, 0x01	; 1
     17a:	f1 f7       	brne	.-4      	; 0x178 <LCD_Init+0x8>
     17c:	00 c0       	rjmp	.+0      	; 0x17e <LCD_Init+0xe>
     17e:	00 00       	nop
     180:	88 e3       	ldi	r24, 0x38	; 56
     182:	c1 df       	rcall	.-126    	; 0x106 <LCD_Comm>
     184:	8c ec       	ldi	r24, 0xCC	; 204
     186:	9c e1       	ldi	r25, 0x1C	; 28
     188:	01 97       	sbiw	r24, 0x01	; 1
     18a:	f1 f7       	brne	.-4      	; 0x188 <LCD_Init+0x18>
     18c:	00 c0       	rjmp	.+0      	; 0x18e <LCD_Init+0x1e>
     18e:	00 00       	nop
     190:	88 e3       	ldi	r24, 0x38	; 56
     192:	b9 df       	rcall	.-142    	; 0x106 <LCD_Comm>
     194:	8c ec       	ldi	r24, 0xCC	; 204
     196:	9c e1       	ldi	r25, 0x1C	; 28
     198:	01 97       	sbiw	r24, 0x01	; 1
     19a:	f1 f7       	brne	.-4      	; 0x198 <LCD_Init+0x28>
     19c:	00 c0       	rjmp	.+0      	; 0x19e <LCD_Init+0x2e>
     19e:	00 00       	nop
     1a0:	8e e0       	ldi	r24, 0x0E	; 14
     1a2:	b1 df       	rcall	.-158    	; 0x106 <LCD_Comm>
     1a4:	8c ec       	ldi	r24, 0xCC	; 204
     1a6:	9c e1       	ldi	r25, 0x1C	; 28
     1a8:	01 97       	sbiw	r24, 0x01	; 1
     1aa:	f1 f7       	brne	.-4      	; 0x1a8 <LCD_Init+0x38>
     1ac:	00 c0       	rjmp	.+0      	; 0x1ae <LCD_Init+0x3e>
     1ae:	00 00       	nop
     1b0:	86 e0       	ldi	r24, 0x06	; 6
     1b2:	a9 df       	rcall	.-174    	; 0x106 <LCD_Comm>
     1b4:	8c ec       	ldi	r24, 0xCC	; 204
     1b6:	9c e1       	ldi	r25, 0x1C	; 28
     1b8:	01 97       	sbiw	r24, 0x01	; 1
     1ba:	f1 f7       	brne	.-4      	; 0x1b8 <LCD_Init+0x48>
     1bc:	00 c0       	rjmp	.+0      	; 0x1be <LCD_Init+0x4e>
     1be:	00 00       	nop
     1c0:	ce cf       	rjmp	.-100    	; 0x15e <LCD_Clear>
     1c2:	08 95       	ret

000001c4 <cursor_home>:

	}	
}

void cursor_home(void) {
	LCD_Comm(0x02); 
     1c4:	82 e0       	ldi	r24, 0x02	; 2
     1c6:	9f df       	rcall	.-194    	; 0x106 <LCD_Comm>
     1c8:	8c ec       	ldi	r24, 0xCC	; 204
     1ca:	9c e1       	ldi	r25, 0x1C	; 28
     1cc:	01 97       	sbiw	r24, 0x01	; 1
     1ce:	f1 f7       	brne	.-4      	; 0x1cc <cursor_home+0x8>
     1d0:	00 c0       	rjmp	.+0      	; 0x1d2 <cursor_home+0xe>
     1d2:	00 00       	nop
     1d4:	08 95       	ret

000001d6 <init_timer>:
uch is_current_date=0;
/////////////////////////////////////////////////////////////////

void init_timer()
{
	TIMSK = 0x02; // output compare interrupt enabled
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	87 bf       	out	0x37, r24	; 55
	TCCR0 = 0x0f; // CTC mode, prescale 1024
     1da:	8f e0       	ldi	r24, 0x0F	; 15
     1dc:	83 bf       	out	0x33, r24	; 51
	OCR0 = 143;
     1de:	8f e8       	ldi	r24, 0x8F	; 143
     1e0:	81 bf       	out	0x31, r24	; 49
     1e2:	08 95       	ret

000001e4 <port_init>:
}
void port_init()
{
	DDRA = 0xff; // lcd port configuration of DDRA and DDRG
     1e4:	8f ef       	ldi	r24, 0xFF	; 255
     1e6:	8a bb       	out	0x1a, r24	; 26
	DDRG = 0x0f;
     1e8:	9f e0       	ldi	r25, 0x0F	; 15
     1ea:	90 93 64 00 	sts	0x0064, r25	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>
	DDRB = 0xff; // making PORTB as an output port for leds
     1ee:	87 bb       	out	0x17, r24	; 23
	PORTB= 0xff;
     1f0:	88 bb       	out	0x18, r24	; 24
	DDRD = 0x00; // making PORTD as an input port for recieving signals form switches
     1f2:	11 ba       	out	0x11, r1	; 17
     1f4:	08 95       	ret

000001f6 <interrupt_init>:
}
void interrupt_init(void)
{
	EIMSK=0xff; // enabling all interrupts
     1f6:	8f ef       	ldi	r24, 0xFF	; 255
     1f8:	89 bf       	out	0x39, r24	; 57
	EICRA=0xaa;// enabling falling edge trigger for all interrupts
     1fa:	8a ea       	ldi	r24, 0xAA	; 170
     1fc:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7e006a>
	EICRB=0xaa; 
     200:	8a bf       	out	0x3a, r24	; 58
	sei();   // setting global interrupt on
     202:	78 94       	sei
     204:	08 95       	ret

00000206 <is_leap_year>:
}
char is_leap_year(int y) // utility function for determining leap year
{
     206:	9c 01       	movw	r18, r24
	if(y % 4 == 0)
     208:	83 70       	andi	r24, 0x03	; 3
     20a:	99 27       	eor	r25, r25
     20c:	89 2b       	or	r24, r25
     20e:	91 f4       	brne	.+36     	; 0x234 <is_leap_year+0x2e>
	{
		//Nested if else
		if( y % 100 == 0)
     210:	c9 01       	movw	r24, r18
     212:	64 e6       	ldi	r22, 0x64	; 100
     214:	70 e0       	ldi	r23, 0x00	; 0
     216:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__divmodhi4>
     21a:	89 2b       	or	r24, r25
     21c:	69 f4       	brne	.+26     	; 0x238 <is_leap_year+0x32>
		{
			if ( y % 400 == 0)
				return 1;
     21e:	c9 01       	movw	r24, r18
     220:	60 e9       	ldi	r22, 0x90	; 144
     222:	71 e0       	ldi	r23, 0x01	; 1
     224:	0e 94 ca 0a 	call	0x1594	; 0x1594 <__divmodhi4>
     228:	9c 01       	movw	r18, r24
     22a:	81 e0       	ldi	r24, 0x01	; 1
     22c:	23 2b       	or	r18, r19
     22e:	29 f0       	breq	.+10     	; 0x23a <is_leap_year+0x34>
     230:	80 e0       	ldi	r24, 0x00	; 0
     232:	08 95       	ret
		}
		else
			return 1;
	}
	else
		return 0;
     234:	80 e0       	ldi	r24, 0x00	; 0
     236:	08 95       	ret
				return 1;
			else
				return 0;
		}
		else
			return 1;
     238:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
		return 0;
}
     23a:	08 95       	ret

0000023c <month_day_count>:
int month_day_count(ui month, ui year)
{
     23c:	0f 93       	push	r16
     23e:	1f 93       	push	r17
     240:	cf 93       	push	r28
     242:	df 93       	push	r29
     244:	cd b7       	in	r28, 0x3d	; 61
     246:	de b7       	in	r29, 0x3e	; 62
     248:	68 97       	sbiw	r28, 0x18	; 24
     24a:	0f b6       	in	r0, 0x3f	; 63
     24c:	f8 94       	cli
     24e:	de bf       	out	0x3e, r29	; 62
     250:	0f be       	out	0x3f, r0	; 63
     252:	cd bf       	out	0x3d, r28	; 61
     254:	8c 01       	movw	r16, r24
	ui const month_days[]={31,28,31,30,31,30,31,31,30,31,30,31};
     256:	98 e1       	ldi	r25, 0x18	; 24
     258:	e3 e2       	ldi	r30, 0x23	; 35
     25a:	f1 e0       	ldi	r31, 0x01	; 1
     25c:	de 01       	movw	r26, r28
     25e:	11 96       	adiw	r26, 0x01	; 1
     260:	01 90       	ld	r0, Z+
     262:	0d 92       	st	X+, r0
     264:	9a 95       	dec	r25
     266:	e1 f7       	brne	.-8      	; 0x260 <month_day_count+0x24>
	if (month==2 && is_leap_year(year))
     268:	02 30       	cpi	r16, 0x02	; 2
     26a:	11 05       	cpc	r17, r1
     26c:	21 f4       	brne	.+8      	; 0x276 <month_day_count+0x3a>
     26e:	cb 01       	movw	r24, r22
     270:	ca df       	rcall	.-108    	; 0x206 <is_leap_year>
     272:	81 11       	cpse	r24, r1
     274:	09 c0       	rjmp	.+18     	; 0x288 <month_day_count+0x4c>
	{
		return 29;
	}
	return month_days[month-1];
     276:	f8 01       	movw	r30, r16
     278:	31 97       	sbiw	r30, 0x01	; 1
     27a:	ee 0f       	add	r30, r30
     27c:	ff 1f       	adc	r31, r31
     27e:	ec 0f       	add	r30, r28
     280:	fd 1f       	adc	r31, r29
     282:	81 81       	ldd	r24, Z+1	; 0x01
     284:	92 81       	ldd	r25, Z+2	; 0x02
     286:	02 c0       	rjmp	.+4      	; 0x28c <month_day_count+0x50>
int month_day_count(ui month, ui year)
{
	ui const month_days[]={31,28,31,30,31,30,31,31,30,31,30,31};
	if (month==2 && is_leap_year(year))
	{
		return 29;
     288:	8d e1       	ldi	r24, 0x1D	; 29
     28a:	90 e0       	ldi	r25, 0x00	; 0
	}
	return month_days[month-1];
}
     28c:	68 96       	adiw	r28, 0x18	; 24
     28e:	0f b6       	in	r0, 0x3f	; 63
     290:	f8 94       	cli
     292:	de bf       	out	0x3e, r29	; 62
     294:	0f be       	out	0x3f, r0	; 63
     296:	cd bf       	out	0x3d, r28	; 61
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	08 95       	ret

000002a2 <disable_alarm_clock>:
void disable_alarm_clock(void)
{
			min_alarm=0;
     2a2:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <min_alarm>
			hour_alarm=0;
     2a6:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <hour_alarm>
			day_alarm=0;
     2aa:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <day_alarm>
			month_alarm=0;
     2ae:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <month_alarm>
			year_alarm=0;
     2b2:	10 92 08 01 	sts	0x0108, r1	; 0x800108 <year_alarm+0x1>
     2b6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <year_alarm>
			step=1;
     2ba:	81 e0       	ldi	r24, 0x01	; 1
     2bc:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <step>
			isset_alarm=0;
     2c0:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <isset_alarm>
			temp_year=year;
     2c4:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <year>
     2c8:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <year+0x1>
     2cc:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2d0:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__DATA_REGION_ORIGIN__>
			
			// clearing temp variables
			for (uch i=0;i<4;i++)
			{
				temp_arr[i]=0;
     2d4:	e2 e0       	ldi	r30, 0x02	; 2
     2d6:	f1 e0       	ldi	r31, 0x01	; 1
     2d8:	10 82       	st	Z, r1
     2da:	11 82       	std	Z+1, r1	; 0x01
				if (i>1)
				{
					temp_arr[i]=1;
     2dc:	82 83       	std	Z+2, r24	; 0x02
     2de:	83 83       	std	Z+3, r24	; 0x03
     2e0:	08 95       	ret

000002e2 <normal_clock_logic>:
				}
			}
}
void normal_clock_logic(void)
{
     2e2:	1f 93       	push	r17
     2e4:	cf 93       	push	r28
     2e6:	df 93       	push	r29
	cnt++;
     2e8:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <cnt>
     2ec:	8f 5f       	subi	r24, 0xFF	; 255
	if(cnt==100)
     2ee:	84 36       	cpi	r24, 0x64	; 100
     2f0:	19 f0       	breq	.+6      	; 0x2f8 <normal_clock_logic+0x16>
				}
			}
}
void normal_clock_logic(void)
{
	cnt++;
     2f2:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <cnt>
     2f6:	54 c0       	rjmp	.+168    	; 0x3a0 <normal_clock_logic+0xbe>
	if(cnt==100)
	{
		cnt=0;
     2f8:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <cnt>
		sec++;
     2fc:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <sec>
     300:	8f 5f       	subi	r24, 0xFF	; 255
     302:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <sec>
		if (sec>=60)
     306:	8c 33       	cpi	r24, 0x3C	; 60
     308:	38 f0       	brcs	.+14     	; 0x318 <normal_clock_logic+0x36>
		{
			min++;
     30a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <min>
     30e:	8f 5f       	subi	r24, 0xFF	; 255
     310:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <min>
			sec=0;
     314:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <sec>
		}
		if (min>=60)
     318:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <min>
     31c:	8c 33       	cpi	r24, 0x3C	; 60
     31e:	38 f0       	brcs	.+14     	; 0x32e <normal_clock_logic+0x4c>
		{
			hour++;
     320:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <hour>
     324:	8f 5f       	subi	r24, 0xFF	; 255
     326:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <hour>
			min = 0;
     32a:	10 92 e9 01 	sts	0x01E9, r1	; 0x8001e9 <min>
		}
		if(hour>=24)
     32e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <hour>
     332:	88 31       	cpi	r24, 0x18	; 24
     334:	60 f0       	brcs	.+24     	; 0x34e <normal_clock_logic+0x6c>
		{
			day++;
     336:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <day>
     33a:	8f 5f       	subi	r24, 0xFF	; 255
     33c:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <day>
			week_day++;
     340:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <week_day>
     344:	8f 5f       	subi	r24, 0xFF	; 255
     346:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <week_day>
			hour = 0;
     34a:	10 92 e7 01 	sts	0x01E7, r1	; 0x8001e7 <hour>
		}
		if (week_day>=8)
     34e:	80 91 e8 01 	lds	r24, 0x01E8	; 0x8001e8 <week_day>
     352:	88 30       	cpi	r24, 0x08	; 8
     354:	18 f0       	brcs	.+6      	; 0x35c <normal_clock_logic+0x7a>
		{
			week_day=1;
     356:	81 e0       	ldi	r24, 0x01	; 1
     358:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <week_day>
		}
		if(day>month_day_count(month,year))
     35c:	c0 91 ea 01 	lds	r28, 0x01EA	; 0x8001ea <year>
     360:	d0 91 eb 01 	lds	r29, 0x01EB	; 0x8001eb <year+0x1>
     364:	10 91 e2 01 	lds	r17, 0x01E2	; 0x8001e2 <month>
     368:	be 01       	movw	r22, r28
     36a:	81 2f       	mov	r24, r17
     36c:	90 e0       	ldi	r25, 0x00	; 0
     36e:	66 df       	rcall	.-308    	; 0x23c <month_day_count>
     370:	20 91 ed 01 	lds	r18, 0x01ED	; 0x8001ed <day>
     374:	30 e0       	ldi	r19, 0x00	; 0
     376:	82 17       	cp	r24, r18
     378:	93 07       	cpc	r25, r19
     37a:	34 f4       	brge	.+12     	; 0x388 <normal_clock_logic+0xa6>
		{
			month++;
     37c:	1f 5f       	subi	r17, 0xFF	; 255
     37e:	10 93 e2 01 	sts	0x01E2, r17	; 0x8001e2 <month>
			day = 1;
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <day>
		}
		if(month>12)
     388:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <month>
     38c:	8d 30       	cpi	r24, 0x0D	; 13
     38e:	40 f0       	brcs	.+16     	; 0x3a0 <normal_clock_logic+0xbe>
		{
			year++;
     390:	21 96       	adiw	r28, 0x01	; 1
     392:	d0 93 eb 01 	sts	0x01EB, r29	; 0x8001eb <year+0x1>
     396:	c0 93 ea 01 	sts	0x01EA, r28	; 0x8001ea <year>
			month = 1;
     39a:	81 e0       	ldi	r24, 0x01	; 1
     39c:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <month>
		}
	}
}
     3a0:	df 91       	pop	r29
     3a2:	cf 91       	pop	r28
     3a4:	1f 91       	pop	r17
     3a6:	08 95       	ret

000003a8 <stop_watch_logic>:
void stop_watch_logic(void)
{
	cnt_stp_w++;
     3a8:	80 91 f0 01 	lds	r24, 0x01F0	; 0x8001f0 <cnt_stp_w>
     3ac:	90 91 f1 01 	lds	r25, 0x01F1	; 0x8001f1 <cnt_stp_w+0x1>
     3b0:	01 96       	adiw	r24, 0x01	; 1
	if(cnt_stp_w>=100)
     3b2:	84 36       	cpi	r24, 0x64	; 100
     3b4:	91 05       	cpc	r25, r1
     3b6:	28 f4       	brcc	.+10     	; 0x3c2 <stop_watch_logic+0x1a>
		}
	}
}
void stop_watch_logic(void)
{
	cnt_stp_w++;
     3b8:	90 93 f1 01 	sts	0x01F1, r25	; 0x8001f1 <cnt_stp_w+0x1>
     3bc:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <cnt_stp_w>
     3c0:	08 95       	ret
	if(cnt_stp_w>=100)
	{
		cnt_stp_w=0;
     3c2:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <cnt_stp_w+0x1>
     3c6:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <cnt_stp_w>
		sec_stp_w++;
     3ca:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <sec_stp_w>
     3ce:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <sec_stp_w+0x1>
     3d2:	01 96       	adiw	r24, 0x01	; 1
     3d4:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <sec_stp_w+0x1>
     3d8:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <sec_stp_w>
		if (sec_stp_w>=60)
     3dc:	cc 97       	sbiw	r24, 0x3c	; 60
     3de:	68 f0       	brcs	.+26     	; 0x3fa <stop_watch_logic+0x52>
		{
			min_stp_w++;
     3e0:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <min_stp_w>
     3e4:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <min_stp_w+0x1>
     3e8:	01 96       	adiw	r24, 0x01	; 1
     3ea:	90 93 e4 01 	sts	0x01E4, r25	; 0x8001e4 <min_stp_w+0x1>
     3ee:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <min_stp_w>
			sec_stp_w=0;
     3f2:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <sec_stp_w+0x1>
     3f6:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <sec_stp_w>
		}
		if (min_stp_w>=60)
     3fa:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <min_stp_w>
     3fe:	90 91 e4 01 	lds	r25, 0x01E4	; 0x8001e4 <min_stp_w+0x1>
     402:	cc 97       	sbiw	r24, 0x3c	; 60
     404:	68 f0       	brcs	.+26     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		{
			hour_stp_w++;
     406:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <hour_stp_w>
     40a:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <hour_stp_w+0x1>
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	90 93 ef 01 	sts	0x01EF, r25	; 0x8001ef <hour_stp_w+0x1>
     414:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <hour_stp_w>
			min_stp_w = 0;
     418:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <min_stp_w+0x1>
     41c:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <min_stp_w>
		}
		if(hour_stp_w>=24)
     420:	80 91 ee 01 	lds	r24, 0x01EE	; 0x8001ee <hour_stp_w>
     424:	90 91 ef 01 	lds	r25, 0x01EF	; 0x8001ef <hour_stp_w+0x1>
     428:	48 97       	sbiw	r24, 0x18	; 24
     42a:	20 f0       	brcs	.+8      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
		{
			hour_stp_w = 0;
     42c:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <hour_stp_w+0x1>
     430:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <hour_stp_w>
     434:	08 95       	ret

00000436 <alarm_clock_check_logic>:
		}
	}
}
uch alarm_clock_check_logic(uch min, uch hour, uch day, uch month, ui year)
{
     436:	0f 93       	push	r16
     438:	1f 93       	push	r17
	if(min_alarm==min && hour_alarm==hour && day_alarm==day && month_alarm==month && year_alarm==year)
     43a:	90 91 df 01 	lds	r25, 0x01DF	; 0x8001df <min_alarm>
     43e:	98 13       	cpse	r25, r24
     440:	16 c0       	rjmp	.+44     	; 0x46e <alarm_clock_check_logic+0x38>
     442:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <hour_alarm>
     446:	86 13       	cpse	r24, r22
     448:	14 c0       	rjmp	.+40     	; 0x472 <alarm_clock_check_logic+0x3c>
     44a:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <day_alarm>
     44e:	84 13       	cpse	r24, r20
     450:	12 c0       	rjmp	.+36     	; 0x476 <alarm_clock_check_logic+0x40>
     452:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <month_alarm>
     456:	82 13       	cpse	r24, r18
     458:	10 c0       	rjmp	.+32     	; 0x47a <alarm_clock_check_logic+0x44>
	{
		return 1;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <year_alarm>
     460:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <year_alarm+0x1>
     464:	20 17       	cp	r18, r16
     466:	31 07       	cpc	r19, r17
     468:	49 f0       	breq	.+18     	; 0x47c <alarm_clock_check_logic+0x46>
     46a:	80 e0       	ldi	r24, 0x00	; 0
     46c:	07 c0       	rjmp	.+14     	; 0x47c <alarm_clock_check_logic+0x46>
	}
	return 0;
     46e:	80 e0       	ldi	r24, 0x00	; 0
     470:	05 c0       	rjmp	.+10     	; 0x47c <alarm_clock_check_logic+0x46>
     472:	80 e0       	ldi	r24, 0x00	; 0
     474:	03 c0       	rjmp	.+6      	; 0x47c <alarm_clock_check_logic+0x46>
     476:	80 e0       	ldi	r24, 0x00	; 0
     478:	01 c0       	rjmp	.+2      	; 0x47c <alarm_clock_check_logic+0x46>
     47a:	80 e0       	ldi	r24, 0x00	; 0
}
     47c:	1f 91       	pop	r17
     47e:	0f 91       	pop	r16
     480:	08 95       	ret

00000482 <led_blink>:
void led_blink(void)  // led on and off all bits for INT1
{
	PORTB = 0xff;
     482:	8f ef       	ldi	r24, 0xFF	; 255
     484:	88 bb       	out	0x18, r24	; 24
     486:	2f ef       	ldi	r18, 0xFF	; 255
     488:	8f e7       	ldi	r24, 0x7F	; 127
     48a:	9d e0       	ldi	r25, 0x0D	; 13
     48c:	21 50       	subi	r18, 0x01	; 1
     48e:	80 40       	sbci	r24, 0x00	; 0
     490:	90 40       	sbci	r25, 0x00	; 0
     492:	e1 f7       	brne	.-8      	; 0x48c <led_blink+0xa>
     494:	00 c0       	rjmp	.+0      	; 0x496 <led_blink+0x14>
     496:	00 00       	nop
	_delay_ms(300);
	PORTB = 0x00;
     498:	18 ba       	out	0x18, r1	; 24
     49a:	2f ef       	ldi	r18, 0xFF	; 255
     49c:	8f e7       	ldi	r24, 0x7F	; 127
     49e:	9d e0       	ldi	r25, 0x0D	; 13
     4a0:	21 50       	subi	r18, 0x01	; 1
     4a2:	80 40       	sbci	r24, 0x00	; 0
     4a4:	90 40       	sbci	r25, 0x00	; 0
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <led_blink+0x1e>
     4a8:	00 c0       	rjmp	.+0      	; 0x4aa <led_blink+0x28>
     4aa:	00 00       	nop
     4ac:	08 95       	ret

000004ae <alarm_clock_display>:
	_delay_ms(300);
}
void alarm_clock_display(void)
{
     4ae:	0f 93       	push	r16
     4b0:	1f 93       	push	r17
     4b2:	cf 93       	push	r28
	if (!isset_alarm)
     4b4:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <isset_alarm>
     4b8:	81 11       	cpse	r24, r1
     4ba:	24 c1       	rjmp	.+584    	; 0x704 <alarm_clock_display+0x256>
	{
		switch(step)
     4bc:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step>
     4c0:	83 30       	cpi	r24, 0x03	; 3
     4c2:	09 f4       	brne	.+2      	; 0x4c6 <alarm_clock_display+0x18>
     4c4:	b1 c0       	rjmp	.+354    	; 0x628 <alarm_clock_display+0x17a>
     4c6:	30 f4       	brcc	.+12     	; 0x4d4 <alarm_clock_display+0x26>
     4c8:	81 30       	cpi	r24, 0x01	; 1
     4ca:	59 f0       	breq	.+22     	; 0x4e2 <alarm_clock_display+0x34>
     4cc:	82 30       	cpi	r24, 0x02	; 2
     4ce:	09 f4       	brne	.+2      	; 0x4d2 <alarm_clock_display+0x24>
     4d0:	99 c0       	rjmp	.+306    	; 0x604 <alarm_clock_display+0x156>
     4d2:	18 c1       	rjmp	.+560    	; 0x704 <alarm_clock_display+0x256>
     4d4:	84 30       	cpi	r24, 0x04	; 4
     4d6:	09 f4       	brne	.+2      	; 0x4da <alarm_clock_display+0x2c>
     4d8:	cc c0       	rjmp	.+408    	; 0x672 <alarm_clock_display+0x1c4>
     4da:	85 30       	cpi	r24, 0x05	; 5
     4dc:	09 f4       	brne	.+2      	; 0x4e0 <alarm_clock_display+0x32>
     4de:	ee c0       	rjmp	.+476    	; 0x6bc <alarm_clock_display+0x20e>
     4e0:	11 c1       	rjmp	.+546    	; 0x704 <alarm_clock_display+0x256>
	}
}

void LCD_pos(unsigned char row, unsigned char col)
{
	LCD_Comm(0x80|(row+col*0x40)); 
     4e2:	82 e8       	ldi	r24, 0x82	; 130
     4e4:	10 de       	rcall	.-992    	; 0x106 <LCD_Comm>
		{
			case 1:
			LCD_pos(2,0);
			LCD_STR("ALARM | YEAR ");
     4e6:	8b e3       	ldi	r24, 0x3B	; 59
     4e8:	91 e0       	ldi	r25, 0x01	; 1
     4ea:	2b de       	rcall	.-938    	; 0x142 <LCD_STR>
     4ec:	86 ec       	ldi	r24, 0xC6	; 198
     4ee:	0b de       	rcall	.-1002   	; 0x106 <LCD_Comm>
     4f0:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_pos(6,1);
			LCD_CHAR((temp_year)/1000+'0');
     4f4:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     4f8:	36 95       	lsr	r19
     4fa:	27 95       	ror	r18
     4fc:	36 95       	lsr	r19
     4fe:	27 95       	ror	r18
     500:	36 95       	lsr	r19
     502:	27 95       	ror	r18
     504:	a5 ec       	ldi	r26, 0xC5	; 197
     506:	b0 e2       	ldi	r27, 0x20	; 32
     508:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__umulhisi3>
     50c:	92 95       	swap	r25
     50e:	82 95       	swap	r24
     510:	8f 70       	andi	r24, 0x0F	; 15
     512:	89 27       	eor	r24, r25
     514:	9f 70       	andi	r25, 0x0F	; 15
     516:	89 27       	eor	r24, r25
     518:	80 5d       	subi	r24, 0xD0	; 208
     51a:	0b de       	rcall	.-1002   	; 0x132 <LCD_CHAR>
     51c:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_CHAR((temp_year/100)%10+'0');
     520:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     524:	36 95       	lsr	r19
     526:	27 95       	ror	r18
     528:	36 95       	lsr	r19
     52a:	27 95       	ror	r18
     52c:	ab e7       	ldi	r26, 0x7B	; 123
     52e:	b4 e1       	ldi	r27, 0x14	; 20
     530:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__umulhisi3>
     534:	ac 01       	movw	r20, r24
     536:	56 95       	lsr	r21
     538:	47 95       	ror	r20
     53a:	9a 01       	movw	r18, r20
     53c:	ad ec       	ldi	r26, 0xCD	; 205
     53e:	bc ec       	ldi	r27, 0xCC	; 204
     540:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__umulhisi3>
     544:	96 95       	lsr	r25
     546:	87 95       	ror	r24
     548:	96 95       	lsr	r25
     54a:	87 95       	ror	r24
     54c:	96 95       	lsr	r25
     54e:	87 95       	ror	r24
     550:	9c 01       	movw	r18, r24
     552:	22 0f       	add	r18, r18
     554:	33 1f       	adc	r19, r19
     556:	88 0f       	add	r24, r24
     558:	99 1f       	adc	r25, r25
     55a:	88 0f       	add	r24, r24
     55c:	99 1f       	adc	r25, r25
     55e:	88 0f       	add	r24, r24
     560:	99 1f       	adc	r25, r25
     562:	82 0f       	add	r24, r18
     564:	93 1f       	adc	r25, r19
     566:	9a 01       	movw	r18, r20
     568:	28 1b       	sub	r18, r24
     56a:	39 0b       	sbc	r19, r25
     56c:	c9 01       	movw	r24, r18
     56e:	80 5d       	subi	r24, 0xD0	; 208
     570:	e0 dd       	rcall	.-1088   	; 0x132 <LCD_CHAR>
     572:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_CHAR((temp_year/10)%10+'0');
     576:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     57a:	ad ec       	ldi	r26, 0xCD	; 205
     57c:	bc ec       	ldi	r27, 0xCC	; 204
     57e:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__umulhisi3>
     582:	ac 01       	movw	r20, r24
     584:	56 95       	lsr	r21
     586:	47 95       	ror	r20
     588:	56 95       	lsr	r21
     58a:	47 95       	ror	r20
     58c:	56 95       	lsr	r21
     58e:	47 95       	ror	r20
     590:	9a 01       	movw	r18, r20
     592:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <__umulhisi3>
     596:	96 95       	lsr	r25
     598:	87 95       	ror	r24
     59a:	96 95       	lsr	r25
     59c:	87 95       	ror	r24
     59e:	96 95       	lsr	r25
     5a0:	87 95       	ror	r24
     5a2:	9c 01       	movw	r18, r24
     5a4:	22 0f       	add	r18, r18
     5a6:	33 1f       	adc	r19, r19
     5a8:	88 0f       	add	r24, r24
     5aa:	99 1f       	adc	r25, r25
     5ac:	88 0f       	add	r24, r24
     5ae:	99 1f       	adc	r25, r25
     5b0:	88 0f       	add	r24, r24
     5b2:	99 1f       	adc	r25, r25
     5b4:	82 0f       	add	r24, r18
     5b6:	93 1f       	adc	r25, r19
     5b8:	fa 01       	movw	r30, r20
     5ba:	e8 1b       	sub	r30, r24
     5bc:	f9 0b       	sbc	r31, r25
     5be:	cf 01       	movw	r24, r30
     5c0:	80 5d       	subi	r24, 0xD0	; 208
     5c2:	b7 dd       	rcall	.-1170   	; 0x132 <LCD_CHAR>
     5c4:	40 91 00 01 	lds	r20, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
			LCD_CHAR((temp_year)%10+'0');
     5c8:	50 91 01 01 	lds	r21, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     5cc:	9a 01       	movw	r18, r20
     5ce:	ad ec       	ldi	r26, 0xCD	; 205
     5d0:	bc ec       	ldi	r27, 0xCC	; 204
     5d2:	fc d7       	rcall	.+4088   	; 0x15cc <__umulhisi3>
     5d4:	96 95       	lsr	r25
     5d6:	87 95       	ror	r24
     5d8:	96 95       	lsr	r25
     5da:	87 95       	ror	r24
     5dc:	96 95       	lsr	r25
     5de:	87 95       	ror	r24
     5e0:	9c 01       	movw	r18, r24
     5e2:	22 0f       	add	r18, r18
     5e4:	33 1f       	adc	r19, r19
     5e6:	88 0f       	add	r24, r24
     5e8:	99 1f       	adc	r25, r25
     5ea:	88 0f       	add	r24, r24
     5ec:	99 1f       	adc	r25, r25
     5ee:	88 0f       	add	r24, r24
     5f0:	99 1f       	adc	r25, r25
     5f2:	82 0f       	add	r24, r18
     5f4:	93 1f       	adc	r25, r19
     5f6:	9a 01       	movw	r18, r20
     5f8:	28 1b       	sub	r18, r24
     5fa:	39 0b       	sbc	r19, r25
     5fc:	c9 01       	movw	r24, r18
     5fe:	80 5d       	subi	r24, 0xD0	; 208
     600:	98 dd       	rcall	.-1232   	; 0x132 <LCD_CHAR>
     602:	80 c0       	rjmp	.+256    	; 0x704 <alarm_clock_display+0x256>
     604:	82 e8       	ldi	r24, 0x82	; 130
     606:	7f dd       	rcall	.-1282   	; 0x106 <LCD_Comm>
			break;
			
			case 2:
			LCD_pos(2,0);
			LCD_STR("ALARM | MONTH ");
     608:	89 e4       	ldi	r24, 0x49	; 73
     60a:	91 e0       	ldi	r25, 0x01	; 1
     60c:	9a dd       	rcall	.-1228   	; 0x142 <LCD_STR>
     60e:	86 ec       	ldi	r24, 0xC6	; 198
     610:	7a dd       	rcall	.-1292   	; 0x106 <LCD_Comm>
     612:	e0 91 05 01 	lds	r30, 0x0105	; 0x800105 <temp_arr+0x3>
			LCD_pos(6,1);
			LCD_STR(month_arr[temp_arr[3]-1]);
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	ee 0f       	add	r30, r30
     61a:	ff 1f       	adc	r31, r31
     61c:	e9 5f       	subi	r30, 0xF9	; 249
     61e:	fe 4f       	sbci	r31, 0xFE	; 254
     620:	80 81       	ld	r24, Z
     622:	91 81       	ldd	r25, Z+1	; 0x01
			break;
     624:	8e dd       	rcall	.-1252   	; 0x142 <LCD_STR>
     626:	6e c0       	rjmp	.+220    	; 0x704 <alarm_clock_display+0x256>
     628:	82 e8       	ldi	r24, 0x82	; 130
     62a:	6d dd       	rcall	.-1318   	; 0x106 <LCD_Comm>
			
			case 3:
			LCD_pos(2,0);
			LCD_STR("ALARM | DAY ");
     62c:	88 e5       	ldi	r24, 0x58	; 88
     62e:	91 e0       	ldi	r25, 0x01	; 1
     630:	88 dd       	rcall	.-1264   	; 0x142 <LCD_STR>
     632:	87 ec       	ldi	r24, 0xC7	; 199
     634:	68 dd       	rcall	.-1328   	; 0x106 <LCD_Comm>
     636:	02 e0       	ldi	r16, 0x02	; 2
			LCD_pos(7,1);
			LCD_CHAR((temp_arr[2]/10)+'0');
     638:	11 e0       	ldi	r17, 0x01	; 1
     63a:	f8 01       	movw	r30, r16
     63c:	82 81       	ldd	r24, Z+2	; 0x02
     63e:	cd ec       	ldi	r28, 0xCD	; 205
     640:	8c 9f       	mul	r24, r28
     642:	81 2d       	mov	r24, r1
     644:	11 24       	eor	r1, r1
     646:	86 95       	lsr	r24
     648:	86 95       	lsr	r24
     64a:	86 95       	lsr	r24
     64c:	80 5d       	subi	r24, 0xD0	; 208
     64e:	71 dd       	rcall	.-1310   	; 0x132 <LCD_CHAR>
     650:	f8 01       	movw	r30, r16
     652:	82 81       	ldd	r24, Z+2	; 0x02
			LCD_CHAR((temp_arr[2]%10)+'0');
     654:	8c 9f       	mul	r24, r28
     656:	c1 2d       	mov	r28, r1
     658:	11 24       	eor	r1, r1
     65a:	c6 95       	lsr	r28
     65c:	c6 95       	lsr	r28
     65e:	c6 95       	lsr	r28
     660:	cc 0f       	add	r28, r28
     662:	9c 2f       	mov	r25, r28
     664:	99 0f       	add	r25, r25
     666:	99 0f       	add	r25, r25
     668:	c9 0f       	add	r28, r25
     66a:	8c 1b       	sub	r24, r28
     66c:	80 5d       	subi	r24, 0xD0	; 208
			break;
     66e:	61 dd       	rcall	.-1342   	; 0x132 <LCD_CHAR>
     670:	49 c0       	rjmp	.+146    	; 0x704 <alarm_clock_display+0x256>
     672:	82 e8       	ldi	r24, 0x82	; 130
     674:	48 dd       	rcall	.-1392   	; 0x106 <LCD_Comm>
			
			case 4:
			LCD_pos(2,0);
			LCD_STR("ALARM | HOUR");
     676:	85 e6       	ldi	r24, 0x65	; 101
     678:	91 e0       	ldi	r25, 0x01	; 1
     67a:	63 dd       	rcall	.-1338   	; 0x142 <LCD_STR>
     67c:	87 ec       	ldi	r24, 0xC7	; 199
     67e:	43 dd       	rcall	.-1402   	; 0x106 <LCD_Comm>
     680:	02 e0       	ldi	r16, 0x02	; 2
			LCD_pos(7,1);
			LCD_CHAR((temp_arr[1]/10)+'0');
     682:	11 e0       	ldi	r17, 0x01	; 1
     684:	f8 01       	movw	r30, r16
     686:	81 81       	ldd	r24, Z+1	; 0x01
     688:	cd ec       	ldi	r28, 0xCD	; 205
     68a:	8c 9f       	mul	r24, r28
     68c:	81 2d       	mov	r24, r1
     68e:	11 24       	eor	r1, r1
     690:	86 95       	lsr	r24
     692:	86 95       	lsr	r24
     694:	86 95       	lsr	r24
     696:	80 5d       	subi	r24, 0xD0	; 208
     698:	4c dd       	rcall	.-1384   	; 0x132 <LCD_CHAR>
			LCD_CHAR((temp_arr[1]%10)+'0');
     69a:	f8 01       	movw	r30, r16
     69c:	81 81       	ldd	r24, Z+1	; 0x01
     69e:	8c 9f       	mul	r24, r28
     6a0:	c1 2d       	mov	r28, r1
     6a2:	11 24       	eor	r1, r1
     6a4:	c6 95       	lsr	r28
     6a6:	c6 95       	lsr	r28
     6a8:	c6 95       	lsr	r28
     6aa:	cc 0f       	add	r28, r28
     6ac:	9c 2f       	mov	r25, r28
     6ae:	99 0f       	add	r25, r25
     6b0:	99 0f       	add	r25, r25
     6b2:	c9 0f       	add	r28, r25
     6b4:	8c 1b       	sub	r24, r28
     6b6:	80 5d       	subi	r24, 0xD0	; 208
			break;
     6b8:	3c dd       	rcall	.-1416   	; 0x132 <LCD_CHAR>
     6ba:	24 c0       	rjmp	.+72     	; 0x704 <alarm_clock_display+0x256>
     6bc:	81 e8       	ldi	r24, 0x81	; 129
     6be:	23 dd       	rcall	.-1466   	; 0x106 <LCD_Comm>

			case 5:
			LCD_pos(1,0);
			LCD_STR("ALARM | MINUTE");
     6c0:	82 e7       	ldi	r24, 0x72	; 114
     6c2:	91 e0       	ldi	r25, 0x01	; 1
     6c4:	3e dd       	rcall	.-1412   	; 0x142 <LCD_STR>
     6c6:	86 ec       	ldi	r24, 0xC6	; 198
     6c8:	1e dd       	rcall	.-1476   	; 0x106 <LCD_Comm>
     6ca:	02 e0       	ldi	r16, 0x02	; 2
     6cc:	11 e0       	ldi	r17, 0x01	; 1
			LCD_pos(6,1);
			LCD_CHAR((temp_arr[0]/10)+'0');
     6ce:	f8 01       	movw	r30, r16
     6d0:	80 81       	ld	r24, Z
     6d2:	cd ec       	ldi	r28, 0xCD	; 205
     6d4:	8c 9f       	mul	r24, r28
     6d6:	81 2d       	mov	r24, r1
     6d8:	11 24       	eor	r1, r1
     6da:	86 95       	lsr	r24
     6dc:	86 95       	lsr	r24
     6de:	86 95       	lsr	r24
     6e0:	80 5d       	subi	r24, 0xD0	; 208
     6e2:	27 dd       	rcall	.-1458   	; 0x132 <LCD_CHAR>
     6e4:	f8 01       	movw	r30, r16
     6e6:	80 81       	ld	r24, Z
			LCD_CHAR((temp_arr[0]%10)+'0');
     6e8:	8c 9f       	mul	r24, r28
     6ea:	c1 2d       	mov	r28, r1
     6ec:	11 24       	eor	r1, r1
     6ee:	c6 95       	lsr	r28
     6f0:	c6 95       	lsr	r28
     6f2:	c6 95       	lsr	r28
     6f4:	cc 0f       	add	r28, r28
     6f6:	9c 2f       	mov	r25, r28
     6f8:	99 0f       	add	r25, r25
     6fa:	99 0f       	add	r25, r25
     6fc:	c9 0f       	add	r28, r25
     6fe:	8c 1b       	sub	r24, r28
     700:	80 5d       	subi	r24, 0xD0	; 208
     702:	17 dd       	rcall	.-1490   	; 0x132 <LCD_CHAR>
     704:	cf 91       	pop	r28
     706:	1f 91       	pop	r17
     708:	0f 91       	pop	r16

			case 7:
			break;
		}
	}
}
     70a:	08 95       	ret

0000070c <__vector_15>:
     70c:	1f 92       	push	r1
     70e:	0f 92       	push	r0
     710:	0f b6       	in	r0, 0x3f	; 63

ISR(TIMER0_COMP_vect)
{
     712:	0f 92       	push	r0
     714:	11 24       	eor	r1, r1
     716:	0b b6       	in	r0, 0x3b	; 59
     718:	0f 92       	push	r0
     71a:	2f 93       	push	r18
     71c:	3f 93       	push	r19
     71e:	4f 93       	push	r20
     720:	5f 93       	push	r21
     722:	6f 93       	push	r22
     724:	7f 93       	push	r23
     726:	8f 93       	push	r24
     728:	9f 93       	push	r25
     72a:	af 93       	push	r26
     72c:	bf 93       	push	r27
     72e:	ef 93       	push	r30
     730:	ff 93       	push	r31
	if(!is_stopped)
     732:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <is_stopped>
     736:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <is_stopped+0x1>
     73a:	89 2b       	or	r24, r25
     73c:	09 f4       	brne	.+2      	; 0x740 <__vector_15+0x34>
		stop_watch_logic();
     73e:	34 de       	rcall	.-920    	; 0x3a8 <stop_watch_logic>
		
	normal_clock_logic();
     740:	d0 dd       	rcall	.-1120   	; 0x2e2 <normal_clock_logic>
     742:	ff 91       	pop	r31
}
     744:	ef 91       	pop	r30
     746:	bf 91       	pop	r27
     748:	af 91       	pop	r26
     74a:	9f 91       	pop	r25
     74c:	8f 91       	pop	r24
     74e:	7f 91       	pop	r23
     750:	6f 91       	pop	r22
     752:	5f 91       	pop	r21
     754:	4f 91       	pop	r20
     756:	3f 91       	pop	r19
     758:	2f 91       	pop	r18
     75a:	0f 90       	pop	r0
     75c:	0b be       	out	0x3b, r0	; 59
     75e:	0f 90       	pop	r0
     760:	0f be       	out	0x3f, r0	; 63
     762:	0f 90       	pop	r0
     764:	1f 90       	pop	r1
     766:	18 95       	reti

00000768 <__vector_1>:
     768:	1f 92       	push	r1

ISR(INT0_vect)
{
     76a:	0f 92       	push	r0
     76c:	0f b6       	in	r0, 0x3f	; 63
     76e:	0f 92       	push	r0
     770:	11 24       	eor	r1, r1
     772:	0b b6       	in	r0, 0x3b	; 59
     774:	0f 92       	push	r0
     776:	1f 93       	push	r17
     778:	2f 93       	push	r18
     77a:	3f 93       	push	r19
     77c:	4f 93       	push	r20
     77e:	5f 93       	push	r21
     780:	6f 93       	push	r22
     782:	7f 93       	push	r23
     784:	8f 93       	push	r24
     786:	9f 93       	push	r25
     788:	af 93       	push	r26
     78a:	bf 93       	push	r27
     78c:	cf 93       	push	r28
     78e:	df 93       	push	r29
     790:	ef 93       	push	r30
     792:	ff 93       	push	r31
	if(mode==0)
     794:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <mode>
     798:	81 11       	cpse	r24, r1
     79a:	14 c0       	rjmp	.+40     	; 0x7c4 <__vector_1+0x5c>
	{
		mode = 1; // setting up stop_watch mode
     79c:	81 e0       	ldi	r24, 0x01	; 1
     79e:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <mode>
		cnt_stp_w=0;
     7a2:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <cnt_stp_w+0x1>
     7a6:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <cnt_stp_w>
		sec_stp_w=0;
     7aa:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <sec_stp_w+0x1>
     7ae:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <sec_stp_w>
		min_stp_w=0;
     7b2:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <min_stp_w+0x1>
     7b6:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <min_stp_w>
		hour_stp_w=0;
     7ba:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <hour_stp_w+0x1>
     7be:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <hour_stp_w>
     7c2:	cd c0       	rjmp	.+410    	; 0x95e <__vector_1+0x1f6>
	}
	else if(mode==1) // stopwatch
     7c4:	81 30       	cpi	r24, 0x01	; 1
     7c6:	49 f4       	brne	.+18     	; 0x7da <__vector_1+0x72>
	{
		mode = 0;
     7c8:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <mode>
		is_stopped=1;
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	90 e0       	ldi	r25, 0x00	; 0
     7d0:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <is_stopped+0x1>
     7d4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <is_stopped>
     7d8:	c2 c0       	rjmp	.+388    	; 0x95e <__vector_1+0x1f6>
	}
	else if(mode==2) // alarm clock
     7da:	82 30       	cpi	r24, 0x02	; 2
     7dc:	09 f0       	breq	.+2      	; 0x7e0 <__vector_1+0x78>
     7de:	bf c0       	rjmp	.+382    	; 0x95e <__vector_1+0x1f6>
	{
		switch(step)
     7e0:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step>
     7e4:	83 30       	cpi	r24, 0x03	; 3
     7e6:	e9 f1       	breq	.+122    	; 0x862 <__vector_1+0xfa>
     7e8:	28 f4       	brcc	.+10     	; 0x7f4 <__vector_1+0x8c>
     7ea:	81 30       	cpi	r24, 0x01	; 1
     7ec:	51 f0       	breq	.+20     	; 0x802 <__vector_1+0x9a>
     7ee:	82 30       	cpi	r24, 0x02	; 2
     7f0:	91 f0       	breq	.+36     	; 0x816 <__vector_1+0xae>
     7f2:	b5 c0       	rjmp	.+362    	; 0x95e <__vector_1+0x1f6>
     7f4:	84 30       	cpi	r24, 0x04	; 4
     7f6:	09 f4       	brne	.+2      	; 0x7fa <__vector_1+0x92>
     7f8:	6d c0       	rjmp	.+218    	; 0x8d4 <__vector_1+0x16c>
     7fa:	85 30       	cpi	r24, 0x05	; 5
     7fc:	09 f4       	brne	.+2      	; 0x800 <__vector_1+0x98>
     7fe:	8d c0       	rjmp	.+282    	; 0x91a <__vector_1+0x1b2>
     800:	ae c0       	rjmp	.+348    	; 0x95e <__vector_1+0x1f6>
		{
			case 1:
			temp_year++;
     802:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     806:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     80a:	01 96       	adiw	r24, 0x01	; 1
     80c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     810:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
			break;
     814:	a4 c0       	rjmp	.+328    	; 0x95e <__vector_1+0x1f6>
			
			case 2:
			if (is_current_date==1)
     816:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     81a:	81 30       	cpi	r24, 0x01	; 1
     81c:	99 f4       	brne	.+38     	; 0x844 <__vector_1+0xdc>
			{
				if (temp_arr[3]+1>month && (temp_arr[3]+1)<=12)
     81e:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <temp_arr+0x3>
     822:	84 2f       	mov	r24, r20
     824:	90 e0       	ldi	r25, 0x00	; 0
     826:	01 96       	adiw	r24, 0x01	; 1
     828:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <month>
     82c:	30 e0       	ldi	r19, 0x00	; 0
     82e:	28 17       	cp	r18, r24
     830:	39 07       	cpc	r19, r25
     832:	0c f0       	brlt	.+2      	; 0x836 <__vector_1+0xce>
     834:	94 c0       	rjmp	.+296    	; 0x95e <__vector_1+0x1f6>
     836:	0d 97       	sbiw	r24, 0x0d	; 13
     838:	0c f0       	brlt	.+2      	; 0x83c <__vector_1+0xd4>
     83a:	91 c0       	rjmp	.+290    	; 0x95e <__vector_1+0x1f6>
				{
					temp_arr[3]++;
     83c:	4f 5f       	subi	r20, 0xFF	; 255
     83e:	40 93 05 01 	sts	0x0105, r20	; 0x800105 <temp_arr+0x3>
     842:	8d c0       	rjmp	.+282    	; 0x95e <__vector_1+0x1f6>
				}
			}
			else
			{
				if (temp_arr[3]+1>12)
     844:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <temp_arr+0x3>
     848:	82 2f       	mov	r24, r18
     84a:	90 e0       	ldi	r25, 0x00	; 0
     84c:	01 96       	adiw	r24, 0x01	; 1
     84e:	0d 97       	sbiw	r24, 0x0d	; 13
     850:	24 f0       	brlt	.+8      	; 0x85a <__vector_1+0xf2>
				{
					temp_arr[3]=1;
     852:	81 e0       	ldi	r24, 0x01	; 1
     854:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_arr+0x3>
     858:	82 c0       	rjmp	.+260    	; 0x95e <__vector_1+0x1f6>
				}
				else
				{
					temp_arr[3]++;
     85a:	2f 5f       	subi	r18, 0xFF	; 255
     85c:	20 93 05 01 	sts	0x0105, r18	; 0x800105 <temp_arr+0x3>
     860:	7e c0       	rjmp	.+252    	; 0x95e <__vector_1+0x1f6>
				}
			}
			break;
			
			case 3:
			if (is_current_date==1)
     862:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     866:	81 30       	cpi	r24, 0x01	; 1
     868:	e1 f4       	brne	.+56     	; 0x8a2 <__vector_1+0x13a>
			{
				if (temp_arr[2]+1>day && temp_arr[2]+1<=month_day_count(temp_arr[3], temp_year))
     86a:	10 91 04 01 	lds	r17, 0x0104	; 0x800104 <temp_arr+0x2>
     86e:	c1 2f       	mov	r28, r17
     870:	d0 e0       	ldi	r29, 0x00	; 0
     872:	21 96       	adiw	r28, 0x01	; 1
     874:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <day>
     878:	90 e0       	ldi	r25, 0x00	; 0
     87a:	8c 17       	cp	r24, r28
     87c:	9d 07       	cpc	r25, r29
     87e:	0c f0       	brlt	.+2      	; 0x882 <__vector_1+0x11a>
     880:	6e c0       	rjmp	.+220    	; 0x95e <__vector_1+0x1f6>
     882:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     886:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     88a:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <temp_arr+0x3>
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	d5 dc       	rcall	.-1622   	; 0x23c <month_day_count>
     892:	8c 17       	cp	r24, r28
     894:	9d 07       	cpc	r25, r29
     896:	0c f4       	brge	.+2      	; 0x89a <__vector_1+0x132>
     898:	62 c0       	rjmp	.+196    	; 0x95e <__vector_1+0x1f6>
				{
					temp_arr[2]++;
     89a:	1f 5f       	subi	r17, 0xFF	; 255
     89c:	10 93 04 01 	sts	0x0104, r17	; 0x800104 <temp_arr+0x2>
     8a0:	5e c0       	rjmp	.+188    	; 0x95e <__vector_1+0x1f6>
				}
			}
			else
			{
				if (temp_arr[2]+1>month_day_count(temp_arr[3], temp_year))
     8a2:	e2 e0       	ldi	r30, 0x02	; 2
     8a4:	f1 e0       	ldi	r31, 0x01	; 1
     8a6:	c2 81       	ldd	r28, Z+2	; 0x02
     8a8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     8ac:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     8b0:	83 81       	ldd	r24, Z+3	; 0x03
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	c3 dc       	rcall	.-1658   	; 0x23c <month_day_count>
     8b6:	2c 2f       	mov	r18, r28
     8b8:	30 e0       	ldi	r19, 0x00	; 0
     8ba:	2f 5f       	subi	r18, 0xFF	; 255
     8bc:	3f 4f       	sbci	r19, 0xFF	; 255
     8be:	82 17       	cp	r24, r18
     8c0:	93 07       	cpc	r25, r19
     8c2:	24 f4       	brge	.+8      	; 0x8cc <__vector_1+0x164>
				{
					temp_arr[2]=1;
     8c4:	81 e0       	ldi	r24, 0x01	; 1
     8c6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_arr+0x2>
     8ca:	49 c0       	rjmp	.+146    	; 0x95e <__vector_1+0x1f6>
				}
				else
				{
					temp_arr[2]++;
     8cc:	cf 5f       	subi	r28, 0xFF	; 255
     8ce:	c0 93 04 01 	sts	0x0104, r28	; 0x800104 <temp_arr+0x2>
     8d2:	45 c0       	rjmp	.+138    	; 0x95e <__vector_1+0x1f6>
				}
			}
			break;
			
			case 4: 
			if (is_current_date==1)
     8d4:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     8d8:	81 30       	cpi	r24, 0x01	; 1
     8da:	89 f4       	brne	.+34     	; 0x8fe <__vector_1+0x196>
			{
				if (temp_arr[1]+1>hour && (temp_arr[1]+1)<=23)
     8dc:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <temp_arr+0x1>
     8e0:	84 2f       	mov	r24, r20
     8e2:	90 e0       	ldi	r25, 0x00	; 0
     8e4:	01 96       	adiw	r24, 0x01	; 1
     8e6:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <hour>
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	28 17       	cp	r18, r24
     8ee:	39 07       	cpc	r19, r25
     8f0:	b4 f5       	brge	.+108    	; 0x95e <__vector_1+0x1f6>
     8f2:	48 97       	sbiw	r24, 0x18	; 24
     8f4:	a4 f5       	brge	.+104    	; 0x95e <__vector_1+0x1f6>
				{
					temp_arr[1]++;
     8f6:	4f 5f       	subi	r20, 0xFF	; 255
     8f8:	40 93 03 01 	sts	0x0103, r20	; 0x800103 <temp_arr+0x1>
     8fc:	30 c0       	rjmp	.+96     	; 0x95e <__vector_1+0x1f6>
				}
			}
			else
			{
				if (temp_arr[1]+1>=24)
     8fe:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <temp_arr+0x1>
     902:	82 2f       	mov	r24, r18
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	01 96       	adiw	r24, 0x01	; 1
     908:	48 97       	sbiw	r24, 0x18	; 24
     90a:	1c f0       	brlt	.+6      	; 0x912 <__vector_1+0x1aa>
				{
					temp_arr[1]=0;
     90c:	10 92 03 01 	sts	0x0103, r1	; 0x800103 <temp_arr+0x1>
     910:	26 c0       	rjmp	.+76     	; 0x95e <__vector_1+0x1f6>
				}
				else
				{
					temp_arr[1]++;
     912:	2f 5f       	subi	r18, 0xFF	; 255
     914:	20 93 03 01 	sts	0x0103, r18	; 0x800103 <temp_arr+0x1>
     918:	22 c0       	rjmp	.+68     	; 0x95e <__vector_1+0x1f6>
				}
			}
			break;
			
			case 5:	
			if (is_current_date==1)
     91a:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     91e:	81 30       	cpi	r24, 0x01	; 1
     920:	89 f4       	brne	.+34     	; 0x944 <__vector_1+0x1dc>
			{
				if (temp_arr[0]+1>min && (temp_arr[0]+1)<=59)
     922:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <temp_arr>
     926:	84 2f       	mov	r24, r20
     928:	90 e0       	ldi	r25, 0x00	; 0
     92a:	01 96       	adiw	r24, 0x01	; 1
     92c:	20 91 e9 01 	lds	r18, 0x01E9	; 0x8001e9 <min>
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	28 17       	cp	r18, r24
     934:	39 07       	cpc	r19, r25
     936:	9c f4       	brge	.+38     	; 0x95e <__vector_1+0x1f6>
     938:	cc 97       	sbiw	r24, 0x3c	; 60
     93a:	8c f4       	brge	.+34     	; 0x95e <__vector_1+0x1f6>
				{
					temp_arr[0]++;
     93c:	4f 5f       	subi	r20, 0xFF	; 255
     93e:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <temp_arr>
     942:	0d c0       	rjmp	.+26     	; 0x95e <__vector_1+0x1f6>
				}
			} 
			else
			{
				if (temp_arr[0]+1>=60)
     944:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <temp_arr>
     948:	82 2f       	mov	r24, r18
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	01 96       	adiw	r24, 0x01	; 1
     94e:	cc 97       	sbiw	r24, 0x3c	; 60
     950:	1c f0       	brlt	.+6      	; 0x958 <__vector_1+0x1f0>
				{
					temp_arr[0]=0;
     952:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <temp_arr>
     956:	03 c0       	rjmp	.+6      	; 0x95e <__vector_1+0x1f6>
				}
				else
				{
					temp_arr[0]++;
     958:	2f 5f       	subi	r18, 0xFF	; 255
     95a:	20 93 02 01 	sts	0x0102, r18	; 0x800102 <temp_arr>
			break;
			default: break;
		}
		
	}
}
     95e:	ff 91       	pop	r31
     960:	ef 91       	pop	r30
     962:	df 91       	pop	r29
     964:	cf 91       	pop	r28
     966:	bf 91       	pop	r27
     968:	af 91       	pop	r26
     96a:	9f 91       	pop	r25
     96c:	8f 91       	pop	r24
     96e:	7f 91       	pop	r23
     970:	6f 91       	pop	r22
     972:	5f 91       	pop	r21
     974:	4f 91       	pop	r20
     976:	3f 91       	pop	r19
     978:	2f 91       	pop	r18
     97a:	1f 91       	pop	r17
     97c:	0f 90       	pop	r0
     97e:	0b be       	out	0x3b, r0	; 59
     980:	0f 90       	pop	r0
     982:	0f be       	out	0x3f, r0	; 63
     984:	0f 90       	pop	r0
     986:	1f 90       	pop	r1
     988:	18 95       	reti

0000098a <__vector_2>:

ISR(INT1_vect)
{
     98a:	1f 92       	push	r1
     98c:	0f 92       	push	r0
     98e:	0f b6       	in	r0, 0x3f	; 63
     990:	0f 92       	push	r0
     992:	11 24       	eor	r1, r1
     994:	8f 93       	push	r24
     996:	9f 93       	push	r25
	if(mode==1) // stop and go button for stopwatch 
     998:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <mode>
     99c:	81 30       	cpi	r24, 0x01	; 1
     99e:	91 f4       	brne	.+36     	; 0x9c4 <__vector_2+0x3a>
	{
		if (!is_stopped)
     9a0:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <is_stopped>
     9a4:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <is_stopped+0x1>
     9a8:	89 2b       	or	r24, r25
     9aa:	39 f4       	brne	.+14     	; 0x9ba <__vector_2+0x30>
			is_stopped = 1;
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <is_stopped+0x1>
     9b4:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <is_stopped>
     9b8:	0f c0       	rjmp	.+30     	; 0x9d8 <__vector_2+0x4e>
		else
			is_stopped=0;
     9ba:	10 92 22 01 	sts	0x0122, r1	; 0x800122 <is_stopped+0x1>
     9be:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <is_stopped>
     9c2:	0a c0       	rjmp	.+20     	; 0x9d8 <__vector_2+0x4e>
	}
	else if(mode==0)
     9c4:	81 11       	cpse	r24, r1
     9c6:	04 c0       	rjmp	.+8      	; 0x9d0 <__vector_2+0x46>
	{
		mode=2;
     9c8:	82 e0       	ldi	r24, 0x02	; 2
     9ca:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <mode>
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__vector_2+0x4e>
	}
	else if(mode==2)
     9d0:	82 30       	cpi	r24, 0x02	; 2
     9d2:	11 f4       	brne	.+4      	; 0x9d8 <__vector_2+0x4e>
	{
		mode=0;
     9d4:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <mode>
	}
}
     9d8:	9f 91       	pop	r25
     9da:	8f 91       	pop	r24
     9dc:	0f 90       	pop	r0
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	0f 90       	pop	r0
     9e2:	1f 90       	pop	r1
     9e4:	18 95       	reti

000009e6 <__vector_3>:

ISR(INT2_vect)
{
     9e6:	1f 92       	push	r1
     9e8:	0f 92       	push	r0
     9ea:	0f b6       	in	r0, 0x3f	; 63
     9ec:	0f 92       	push	r0
     9ee:	11 24       	eor	r1, r1
     9f0:	0b b6       	in	r0, 0x3b	; 59
     9f2:	0f 92       	push	r0
     9f4:	2f 93       	push	r18
     9f6:	3f 93       	push	r19
     9f8:	4f 93       	push	r20
     9fa:	5f 93       	push	r21
     9fc:	6f 93       	push	r22
     9fe:	7f 93       	push	r23
     a00:	8f 93       	push	r24
     a02:	9f 93       	push	r25
     a04:	af 93       	push	r26
     a06:	bf 93       	push	r27
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	ef 93       	push	r30
     a0e:	ff 93       	push	r31
	if(mode==1)// reset button for stopwatch
     a10:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <mode>
     a14:	81 30       	cpi	r24, 0x01	; 1
     a16:	e9 f4       	brne	.+58     	; 0xa52 <__vector_3+0x6c>
	{
		if(!is_stopped)
     a18:	80 91 21 01 	lds	r24, 0x0121	; 0x800121 <is_stopped>
     a1c:	90 91 22 01 	lds	r25, 0x0122	; 0x800122 <is_stopped+0x1>
     a20:	89 2b       	or	r24, r25
     a22:	31 f4       	brne	.+12     	; 0xa30 <__vector_3+0x4a>
			is_stopped=1;
     a24:	81 e0       	ldi	r24, 0x01	; 1
     a26:	90 e0       	ldi	r25, 0x00	; 0
     a28:	90 93 22 01 	sts	0x0122, r25	; 0x800122 <is_stopped+0x1>
     a2c:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <is_stopped>

		cnt_stp_w=0;
     a30:	10 92 f1 01 	sts	0x01F1, r1	; 0x8001f1 <cnt_stp_w+0x1>
     a34:	10 92 f0 01 	sts	0x01F0, r1	; 0x8001f0 <cnt_stp_w>
		sec_stp_w=0;
     a38:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <sec_stp_w+0x1>
     a3c:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <sec_stp_w>
		min_stp_w=0;
     a40:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <min_stp_w+0x1>
     a44:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <min_stp_w>
		hour_stp_w=0;
     a48:	10 92 ef 01 	sts	0x01EF, r1	; 0x8001ef <hour_stp_w+0x1>
     a4c:	10 92 ee 01 	sts	0x01EE, r1	; 0x8001ee <hour_stp_w>
     a50:	c3 c0       	rjmp	.+390    	; 0xbd8 <__vector_3+0x1f2>
	}
	else if(mode==0)
     a52:	81 11       	cpse	r24, r1
     a54:	02 c0       	rjmp	.+4      	; 0xa5a <__vector_3+0x74>
	{
		disable_alarm_clock();
     a56:	25 dc       	rcall	.-1974   	; 0x2a2 <disable_alarm_clock>
     a58:	bf c0       	rjmp	.+382    	; 0xbd8 <__vector_3+0x1f2>
	}
	else if(mode==2)
     a5a:	82 30       	cpi	r24, 0x02	; 2
     a5c:	09 f0       	breq	.+2      	; 0xa60 <__vector_3+0x7a>
     a5e:	bc c0       	rjmp	.+376    	; 0xbd8 <__vector_3+0x1f2>
	{
		switch(step)
     a60:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step>
     a64:	83 30       	cpi	r24, 0x03	; 3
     a66:	09 f4       	brne	.+2      	; 0xa6a <__vector_3+0x84>
     a68:	45 c0       	rjmp	.+138    	; 0xaf4 <__vector_3+0x10e>
     a6a:	28 f4       	brcc	.+10     	; 0xa76 <__vector_3+0x90>
     a6c:	81 30       	cpi	r24, 0x01	; 1
     a6e:	51 f0       	breq	.+20     	; 0xa84 <__vector_3+0x9e>
     a70:	82 30       	cpi	r24, 0x02	; 2
     a72:	d1 f0       	breq	.+52     	; 0xaa8 <__vector_3+0xc2>
     a74:	b1 c0       	rjmp	.+354    	; 0xbd8 <__vector_3+0x1f2>
     a76:	84 30       	cpi	r24, 0x04	; 4
     a78:	09 f4       	brne	.+2      	; 0xa7c <__vector_3+0x96>
     a7a:	69 c0       	rjmp	.+210    	; 0xb4e <__vector_3+0x168>
     a7c:	85 30       	cpi	r24, 0x05	; 5
     a7e:	09 f4       	brne	.+2      	; 0xa82 <__vector_3+0x9c>
     a80:	89 c0       	rjmp	.+274    	; 0xb94 <__vector_3+0x1ae>
     a82:	aa c0       	rjmp	.+340    	; 0xbd8 <__vector_3+0x1f2>
		{
			case 1:
			if (temp_year-1>=year)
     a84:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     a88:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <year>
     a92:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <year+0x1>
     a96:	82 17       	cp	r24, r18
     a98:	93 07       	cpc	r25, r19
     a9a:	08 f4       	brcc	.+2      	; 0xa9e <__vector_3+0xb8>
     a9c:	9d c0       	rjmp	.+314    	; 0xbd8 <__vector_3+0x1f2>
			{
				temp_year--;
     a9e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     aa2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     aa6:	98 c0       	rjmp	.+304    	; 0xbd8 <__vector_3+0x1f2>
			}
			break;
			
			case 2:
			if (is_current_date==1)
     aa8:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     aac:	81 30       	cpi	r24, 0x01	; 1
     aae:	89 f4       	brne	.+34     	; 0xad2 <__vector_3+0xec>
			{
				if (temp_arr[3]-1>=month)
     ab0:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <temp_arr+0x3>
     ab4:	24 2f       	mov	r18, r20
     ab6:	30 e0       	ldi	r19, 0x00	; 0
     ab8:	21 50       	subi	r18, 0x01	; 1
     aba:	31 09       	sbc	r19, r1
     abc:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <month>
     ac0:	90 e0       	ldi	r25, 0x00	; 0
     ac2:	28 17       	cp	r18, r24
     ac4:	39 07       	cpc	r19, r25
     ac6:	0c f4       	brge	.+2      	; 0xaca <__vector_3+0xe4>
     ac8:	87 c0       	rjmp	.+270    	; 0xbd8 <__vector_3+0x1f2>
				{
					temp_arr[3]--;
     aca:	41 50       	subi	r20, 0x01	; 1
     acc:	40 93 05 01 	sts	0x0105, r20	; 0x800105 <temp_arr+0x3>
     ad0:	83 c0       	rjmp	.+262    	; 0xbd8 <__vector_3+0x1f2>
				}
			}
			else
			{
				if (temp_arr[3]-1<=0)
     ad2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <temp_arr+0x3>
     ad6:	28 2f       	mov	r18, r24
     ad8:	30 e0       	ldi	r19, 0x00	; 0
     ada:	21 50       	subi	r18, 0x01	; 1
     adc:	31 09       	sbc	r19, r1
     ade:	12 16       	cp	r1, r18
     ae0:	13 06       	cpc	r1, r19
     ae2:	24 f0       	brlt	.+8      	; 0xaec <__vector_3+0x106>
				{
					temp_arr[3]=12;
     ae4:	8c e0       	ldi	r24, 0x0C	; 12
     ae6:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_arr+0x3>
     aea:	76 c0       	rjmp	.+236    	; 0xbd8 <__vector_3+0x1f2>
				}
				else
				{
					temp_arr[3]--;
     aec:	81 50       	subi	r24, 0x01	; 1
     aee:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_arr+0x3>
     af2:	72 c0       	rjmp	.+228    	; 0xbd8 <__vector_3+0x1f2>
				}
			}
			break;
			
			case 3:
			if (is_current_date==1)
     af4:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     af8:	81 30       	cpi	r24, 0x01	; 1
     afa:	89 f4       	brne	.+34     	; 0xb1e <__vector_3+0x138>
			{
				if (!(temp_arr[2]-1<day))
     afc:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <temp_arr+0x2>
     b00:	24 2f       	mov	r18, r20
     b02:	30 e0       	ldi	r19, 0x00	; 0
     b04:	21 50       	subi	r18, 0x01	; 1
     b06:	31 09       	sbc	r19, r1
     b08:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <day>
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	28 17       	cp	r18, r24
     b10:	39 07       	cpc	r19, r25
     b12:	0c f4       	brge	.+2      	; 0xb16 <__vector_3+0x130>
     b14:	61 c0       	rjmp	.+194    	; 0xbd8 <__vector_3+0x1f2>
				{
					temp_arr[2]--;
     b16:	41 50       	subi	r20, 0x01	; 1
     b18:	40 93 04 01 	sts	0x0104, r20	; 0x800104 <temp_arr+0x2>
     b1c:	5d c0       	rjmp	.+186    	; 0xbd8 <__vector_3+0x1f2>
				}
			}
			else
			{
				if (temp_arr[2]-1<=0)
     b1e:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <temp_arr+0x2>
     b22:	28 2f       	mov	r18, r24
     b24:	30 e0       	ldi	r19, 0x00	; 0
     b26:	21 50       	subi	r18, 0x01	; 1
     b28:	31 09       	sbc	r19, r1
     b2a:	12 16       	cp	r1, r18
     b2c:	13 06       	cpc	r1, r19
     b2e:	5c f0       	brlt	.+22     	; 0xb46 <__vector_3+0x160>
				{
					temp_arr[2]=month_day_count(temp_arr[3],temp_year);
     b30:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     b34:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     b38:	c2 e0       	ldi	r28, 0x02	; 2
     b3a:	d1 e0       	ldi	r29, 0x01	; 1
     b3c:	8b 81       	ldd	r24, Y+3	; 0x03
     b3e:	90 e0       	ldi	r25, 0x00	; 0
     b40:	7d db       	rcall	.-2310   	; 0x23c <month_day_count>
     b42:	8a 83       	std	Y+2, r24	; 0x02
     b44:	49 c0       	rjmp	.+146    	; 0xbd8 <__vector_3+0x1f2>
				}
				else
				{
					temp_arr[2]--;
     b46:	81 50       	subi	r24, 0x01	; 1
     b48:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_arr+0x2>
     b4c:	45 c0       	rjmp	.+138    	; 0xbd8 <__vector_3+0x1f2>
				}
			}
			break;

			case 4:
			if (is_current_date==1)
     b4e:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     b52:	81 30       	cpi	r24, 0x01	; 1
     b54:	81 f4       	brne	.+32     	; 0xb76 <__vector_3+0x190>
			{

				if (!(temp_arr[1]-1<hour))
     b56:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <temp_arr+0x1>
     b5a:	24 2f       	mov	r18, r20
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	21 50       	subi	r18, 0x01	; 1
     b60:	31 09       	sbc	r19, r1
     b62:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <hour>
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	28 17       	cp	r18, r24
     b6a:	39 07       	cpc	r19, r25
     b6c:	ac f1       	brlt	.+106    	; 0xbd8 <__vector_3+0x1f2>
				{
					temp_arr[1]--;
     b6e:	41 50       	subi	r20, 0x01	; 1
     b70:	40 93 03 01 	sts	0x0103, r20	; 0x800103 <temp_arr+0x1>
     b74:	31 c0       	rjmp	.+98     	; 0xbd8 <__vector_3+0x1f2>
				}
			}
			else
			{
				if (temp_arr[1]-1<0)
     b76:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <temp_arr+0x1>
     b7a:	28 2f       	mov	r18, r24
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	21 50       	subi	r18, 0x01	; 1
     b80:	31 09       	sbc	r19, r1
     b82:	22 f4       	brpl	.+8      	; 0xb8c <__vector_3+0x1a6>
				{
					temp_arr[1]=23;
     b84:	87 e1       	ldi	r24, 0x17	; 23
     b86:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp_arr+0x1>
     b8a:	26 c0       	rjmp	.+76     	; 0xbd8 <__vector_3+0x1f2>
				}
				else
				{
					temp_arr[1]--;
     b8c:	81 50       	subi	r24, 0x01	; 1
     b8e:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp_arr+0x1>
     b92:	22 c0       	rjmp	.+68     	; 0xbd8 <__vector_3+0x1f2>
				}
			}
			break; 

			case 5:	
			if (is_current_date==1)
     b94:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     b98:	81 30       	cpi	r24, 0x01	; 1
     b9a:	81 f4       	brne	.+32     	; 0xbbc <__vector_3+0x1d6>
			{

				if (!(temp_arr[0]-1<min))
     b9c:	40 91 02 01 	lds	r20, 0x0102	; 0x800102 <temp_arr>
     ba0:	24 2f       	mov	r18, r20
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	21 50       	subi	r18, 0x01	; 1
     ba6:	31 09       	sbc	r19, r1
     ba8:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <min>
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	28 17       	cp	r18, r24
     bb0:	39 07       	cpc	r19, r25
     bb2:	94 f0       	brlt	.+36     	; 0xbd8 <__vector_3+0x1f2>
				{
					temp_arr[0]--;
     bb4:	41 50       	subi	r20, 0x01	; 1
     bb6:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <temp_arr>
     bba:	0e c0       	rjmp	.+28     	; 0xbd8 <__vector_3+0x1f2>
				}
			}
			else
			{				
				if (temp_arr[0]-1<0)
     bbc:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <temp_arr>
     bc0:	28 2f       	mov	r18, r24
     bc2:	30 e0       	ldi	r19, 0x00	; 0
     bc4:	21 50       	subi	r18, 0x01	; 1
     bc6:	31 09       	sbc	r19, r1
     bc8:	22 f4       	brpl	.+8      	; 0xbd2 <__vector_3+0x1ec>
				{
					temp_arr[0]=59;
     bca:	8b e3       	ldi	r24, 0x3B	; 59
     bcc:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_arr>
     bd0:	03 c0       	rjmp	.+6      	; 0xbd8 <__vector_3+0x1f2>
				}
				else
				{
					temp_arr[0]--;
     bd2:	81 50       	subi	r24, 0x01	; 1
     bd4:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_arr>
			break;

			default: break;
		}
	}
}
     bd8:	ff 91       	pop	r31
     bda:	ef 91       	pop	r30
     bdc:	df 91       	pop	r29
     bde:	cf 91       	pop	r28
     be0:	bf 91       	pop	r27
     be2:	af 91       	pop	r26
     be4:	9f 91       	pop	r25
     be6:	8f 91       	pop	r24
     be8:	7f 91       	pop	r23
     bea:	6f 91       	pop	r22
     bec:	5f 91       	pop	r21
     bee:	4f 91       	pop	r20
     bf0:	3f 91       	pop	r19
     bf2:	2f 91       	pop	r18
     bf4:	0f 90       	pop	r0
     bf6:	0b be       	out	0x3b, r0	; 59
     bf8:	0f 90       	pop	r0
     bfa:	0f be       	out	0x3f, r0	; 63
     bfc:	0f 90       	pop	r0
     bfe:	1f 90       	pop	r1
     c00:	18 95       	reti

00000c02 <__vector_4>:

ISR(INT3_vect)
{
     c02:	1f 92       	push	r1
     c04:	0f 92       	push	r0
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	0f 92       	push	r0
     c0a:	11 24       	eor	r1, r1
     c0c:	0b b6       	in	r0, 0x3b	; 59
     c0e:	0f 92       	push	r0
     c10:	2f 93       	push	r18
     c12:	3f 93       	push	r19
     c14:	8f 93       	push	r24
     c16:	9f 93       	push	r25
     c18:	ef 93       	push	r30
     c1a:	ff 93       	push	r31
	if (mode==0)
     c1c:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <mode>
     c20:	82 30       	cpi	r24, 0x02	; 2
     c22:	09 f0       	breq	.+2      	; 0xc26 <__vector_4+0x24>
     c24:	85 c0       	rjmp	.+266    	; 0xd30 <__vector_4+0x12e>
	{
		// code for stopwatch
	}
	else if(mode==2)
	{
		step++;
     c26:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step>
     c2a:	8f 5f       	subi	r24, 0xFF	; 255
     c2c:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <step>
		switch(step)
     c30:	83 30       	cpi	r24, 0x03	; 3
     c32:	01 f1       	breq	.+64     	; 0xc74 <__vector_4+0x72>
     c34:	18 f4       	brcc	.+6      	; 0xc3c <__vector_4+0x3a>
     c36:	82 30       	cpi	r24, 0x02	; 2
     c38:	39 f0       	breq	.+14     	; 0xc48 <__vector_4+0x46>
     c3a:	58 c0       	rjmp	.+176    	; 0xcec <__vector_4+0xea>
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	71 f1       	breq	.+92     	; 0xc9c <__vector_4+0x9a>
     c40:	85 30       	cpi	r24, 0x05	; 5
     c42:	09 f4       	brne	.+2      	; 0xc46 <__vector_4+0x44>
     c44:	3f c0       	rjmp	.+126    	; 0xcc4 <__vector_4+0xc2>
     c46:	52 c0       	rjmp	.+164    	; 0xcec <__vector_4+0xea>
		{
			case 2:
			if (temp_year==year)
     c48:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     c4c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     c50:	80 91 ea 01 	lds	r24, 0x01EA	; 0x8001ea <year>
     c54:	90 91 eb 01 	lds	r25, 0x01EB	; 0x8001eb <year+0x1>
     c58:	28 17       	cp	r18, r24
     c5a:	39 07       	cpc	r19, r25
     c5c:	41 f4       	brne	.+16     	; 0xc6e <__vector_4+0x6c>
			{
				temp_arr[3]=month;
     c5e:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <month>
     c62:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <temp_arr+0x3>
				is_current_date=1;
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
     c6c:	61 c0       	rjmp	.+194    	; 0xd30 <__vector_4+0x12e>
			}
			else
			{
				is_current_date=0;
     c6e:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
     c72:	5e c0       	rjmp	.+188    	; 0xd30 <__vector_4+0x12e>
			}

			break;

			case 3:
			if (temp_arr[3]==month && is_current_date==1)
     c74:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <temp_arr+0x3>
     c78:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <month>
     c7c:	98 13       	cpse	r25, r24
     c7e:	0b c0       	rjmp	.+22     	; 0xc96 <__vector_4+0x94>
     c80:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     c84:	81 30       	cpi	r24, 0x01	; 1
     c86:	39 f4       	brne	.+14     	; 0xc96 <__vector_4+0x94>
			{
				is_current_date=1;
     c88:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
				temp_arr[2]=day;
     c8c:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <day>
     c90:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <temp_arr+0x2>
     c94:	4d c0       	rjmp	.+154    	; 0xd30 <__vector_4+0x12e>
			}
			else
			{
				is_current_date=0;
     c96:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
     c9a:	4a c0       	rjmp	.+148    	; 0xd30 <__vector_4+0x12e>
			}
	
			break;
			
			case 4:
			if (temp_arr[2]==day && is_current_date==1)
     c9c:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <temp_arr+0x2>
     ca0:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <day>
     ca4:	98 13       	cpse	r25, r24
     ca6:	0b c0       	rjmp	.+22     	; 0xcbe <__vector_4+0xbc>
     ca8:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     cac:	81 30       	cpi	r24, 0x01	; 1
     cae:	39 f4       	brne	.+14     	; 0xcbe <__vector_4+0xbc>
			{
				is_current_date=1;
     cb0:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
				temp_arr[1]=hour;
     cb4:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <hour>
     cb8:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <temp_arr+0x1>
     cbc:	39 c0       	rjmp	.+114    	; 0xd30 <__vector_4+0x12e>
			}
			else{is_current_date=0;}
     cbe:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
     cc2:	36 c0       	rjmp	.+108    	; 0xd30 <__vector_4+0x12e>
			break;

			case 5:
			if (temp_arr[1]==hour && is_current_date==1)
     cc4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <temp_arr+0x1>
     cc8:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <hour>
     ccc:	98 13       	cpse	r25, r24
     cce:	0b c0       	rjmp	.+22     	; 0xce6 <__vector_4+0xe4>
     cd0:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <__data_end>
     cd4:	81 30       	cpi	r24, 0x01	; 1
     cd6:	39 f4       	brne	.+14     	; 0xce6 <__vector_4+0xe4>
			{
				is_current_date=1;
     cd8:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <__data_end>
				temp_arr[0]=min;
     cdc:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <min>
     ce0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <temp_arr>
     ce4:	25 c0       	rjmp	.+74     	; 0xd30 <__vector_4+0x12e>
			}
			else{is_current_date=0;}
     ce6:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <__data_end>
     cea:	22 c0       	rjmp	.+68     	; 0xd30 <__vector_4+0x12e>
			break;
		}
		if (step>5)
     cec:	86 30       	cpi	r24, 0x06	; 6
     cee:	00 f1       	brcs	.+64     	; 0xd30 <__vector_4+0x12e>
		{
			step=7; // this means end of time setting
     cf0:	87 e0       	ldi	r24, 0x07	; 7
     cf2:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <step>
			isset_alarm=1;
     cf6:	81 e0       	ldi	r24, 0x01	; 1
     cf8:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <isset_alarm>
				
			min_alarm=temp_arr[0];
     cfc:	e2 e0       	ldi	r30, 0x02	; 2
     cfe:	f1 e0       	ldi	r31, 0x01	; 1
     d00:	90 81       	ld	r25, Z
     d02:	90 93 df 01 	sts	0x01DF, r25	; 0x8001df <min_alarm>
			hour_alarm=temp_arr[1];
     d06:	91 81       	ldd	r25, Z+1	; 0x01
     d08:	90 93 de 01 	sts	0x01DE, r25	; 0x8001de <hour_alarm>
			day_alarm=temp_arr[2];
     d0c:	92 81       	ldd	r25, Z+2	; 0x02
     d0e:	90 93 dd 01 	sts	0x01DD, r25	; 0x8001dd <day_alarm>
			month_alarm=temp_arr[3];
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	90 93 dc 01 	sts	0x01DC, r25	; 0x8001dc <month_alarm>
			year_alarm=temp_year;
     d18:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     d1c:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     d20:	30 93 08 01 	sts	0x0108, r19	; 0x800108 <year_alarm+0x1>
     d24:	20 93 07 01 	sts	0x0107, r18	; 0x800107 <year_alarm>
				
			// clearing temp variables
			for (uch i=0;i<4;i++)
			{
				temp_arr[i]=0;
     d28:	10 82       	st	Z, r1
     d2a:	11 82       	std	Z+1, r1	; 0x01
				if (i>1)
				{
					temp_arr[i]=1;
     d2c:	82 83       	std	Z+2, r24	; 0x02
     d2e:	83 83       	std	Z+3, r24	; 0x03
				}
			}
		}
	}
}
     d30:	ff 91       	pop	r31
     d32:	ef 91       	pop	r30
     d34:	9f 91       	pop	r25
     d36:	8f 91       	pop	r24
     d38:	3f 91       	pop	r19
     d3a:	2f 91       	pop	r18
     d3c:	0f 90       	pop	r0
     d3e:	0b be       	out	0x3b, r0	; 59
     d40:	0f 90       	pop	r0
     d42:	0f be       	out	0x3f, r0	; 63
     d44:	0f 90       	pop	r0
     d46:	1f 90       	pop	r1
     d48:	18 95       	reti

00000d4a <display_normal_mode>:

void display_normal_mode(void)
{
     d4a:	0f 93       	push	r16
     d4c:	1f 93       	push	r17
     d4e:	cf 93       	push	r28
     d50:	df 93       	push	r29
     d52:	00 d0       	rcall	.+0      	; 0xd54 <display_normal_mode+0xa>
     d54:	00 d0       	rcall	.+0      	; 0xd56 <display_normal_mode+0xc>
     d56:	00 d0       	rcall	.+0      	; 0xd58 <display_normal_mode+0xe>
     d58:	cd b7       	in	r28, 0x3d	; 61
     d5a:	de b7       	in	r29, 0x3e	; 62
	char AM[] = "AM";
     d5c:	81 e4       	ldi	r24, 0x41	; 65
     d5e:	9d e4       	ldi	r25, 0x4D	; 77
     d60:	9a 83       	std	Y+2, r25	; 0x02
     d62:	89 83       	std	Y+1, r24	; 0x01
     d64:	1b 82       	std	Y+3, r1	; 0x03
	char PM[] = "PM";
     d66:	80 e5       	ldi	r24, 0x50	; 80
     d68:	9d e4       	ldi	r25, 0x4D	; 77
     d6a:	9d 83       	std	Y+5, r25	; 0x05
     d6c:	8c 83       	std	Y+4, r24	; 0x04
     d6e:	1e 82       	std	Y+6, r1	; 0x06
     d70:	80 e8       	ldi	r24, 0x80	; 128
     d72:	c9 d9       	rcall	.-3182   	; 0x106 <LCD_Comm>
	
	// Displaying year
	LCD_pos(0,0);
	LCD_CHAR((year)/1000+'0');
     d74:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <year>
     d78:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <year+0x1>
     d7c:	36 95       	lsr	r19
     d7e:	27 95       	ror	r18
     d80:	36 95       	lsr	r19
     d82:	27 95       	ror	r18
     d84:	36 95       	lsr	r19
     d86:	27 95       	ror	r18
     d88:	a5 ec       	ldi	r26, 0xC5	; 197
     d8a:	b0 e2       	ldi	r27, 0x20	; 32
     d8c:	1f d4       	rcall	.+2110   	; 0x15cc <__umulhisi3>
     d8e:	92 95       	swap	r25
     d90:	82 95       	swap	r24
     d92:	8f 70       	andi	r24, 0x0F	; 15
     d94:	89 27       	eor	r24, r25
     d96:	9f 70       	andi	r25, 0x0F	; 15
     d98:	89 27       	eor	r24, r25
     d9a:	80 5d       	subi	r24, 0xD0	; 208
     d9c:	ca d9       	rcall	.-3180   	; 0x132 <LCD_CHAR>
	LCD_CHAR((year/100)%10+'0');
     d9e:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <year>
     da2:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <year+0x1>
     da6:	36 95       	lsr	r19
     da8:	27 95       	ror	r18
     daa:	36 95       	lsr	r19
     dac:	27 95       	ror	r18
     dae:	ab e7       	ldi	r26, 0x7B	; 123
     db0:	b4 e1       	ldi	r27, 0x14	; 20
     db2:	0c d4       	rcall	.+2072   	; 0x15cc <__umulhisi3>
     db4:	ac 01       	movw	r20, r24
     db6:	56 95       	lsr	r21
     db8:	47 95       	ror	r20
     dba:	9a 01       	movw	r18, r20
     dbc:	ad ec       	ldi	r26, 0xCD	; 205
     dbe:	bc ec       	ldi	r27, 0xCC	; 204
     dc0:	05 d4       	rcall	.+2058   	; 0x15cc <__umulhisi3>
     dc2:	96 95       	lsr	r25
     dc4:	87 95       	ror	r24
     dc6:	96 95       	lsr	r25
     dc8:	87 95       	ror	r24
     dca:	96 95       	lsr	r25
     dcc:	87 95       	ror	r24
     dce:	9c 01       	movw	r18, r24
     dd0:	22 0f       	add	r18, r18
     dd2:	33 1f       	adc	r19, r19
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	88 0f       	add	r24, r24
     dda:	99 1f       	adc	r25, r25
     ddc:	88 0f       	add	r24, r24
     dde:	99 1f       	adc	r25, r25
     de0:	82 0f       	add	r24, r18
     de2:	93 1f       	adc	r25, r19
     de4:	9a 01       	movw	r18, r20
     de6:	28 1b       	sub	r18, r24
     de8:	39 0b       	sbc	r19, r25
     dea:	c9 01       	movw	r24, r18
     dec:	80 5d       	subi	r24, 0xD0	; 208
     dee:	a1 d9       	rcall	.-3262   	; 0x132 <LCD_CHAR>
	LCD_CHAR((year/10)%10+'0');
     df0:	20 91 ea 01 	lds	r18, 0x01EA	; 0x8001ea <year>
     df4:	30 91 eb 01 	lds	r19, 0x01EB	; 0x8001eb <year+0x1>
     df8:	ad ec       	ldi	r26, 0xCD	; 205
     dfa:	bc ec       	ldi	r27, 0xCC	; 204
     dfc:	e7 d3       	rcall	.+1998   	; 0x15cc <__umulhisi3>
     dfe:	ac 01       	movw	r20, r24
     e00:	56 95       	lsr	r21
     e02:	47 95       	ror	r20
     e04:	56 95       	lsr	r21
     e06:	47 95       	ror	r20
     e08:	56 95       	lsr	r21
     e0a:	47 95       	ror	r20
     e0c:	9a 01       	movw	r18, r20
     e0e:	de d3       	rcall	.+1980   	; 0x15cc <__umulhisi3>
     e10:	96 95       	lsr	r25
     e12:	87 95       	ror	r24
     e14:	96 95       	lsr	r25
     e16:	87 95       	ror	r24
     e18:	96 95       	lsr	r25
     e1a:	87 95       	ror	r24
     e1c:	9c 01       	movw	r18, r24
     e1e:	22 0f       	add	r18, r18
     e20:	33 1f       	adc	r19, r19
     e22:	88 0f       	add	r24, r24
     e24:	99 1f       	adc	r25, r25
     e26:	88 0f       	add	r24, r24
     e28:	99 1f       	adc	r25, r25
     e2a:	88 0f       	add	r24, r24
     e2c:	99 1f       	adc	r25, r25
     e2e:	82 0f       	add	r24, r18
     e30:	93 1f       	adc	r25, r19
     e32:	9a 01       	movw	r18, r20
     e34:	28 1b       	sub	r18, r24
     e36:	39 0b       	sbc	r19, r25
     e38:	c9 01       	movw	r24, r18
     e3a:	80 5d       	subi	r24, 0xD0	; 208
     e3c:	7a d9       	rcall	.-3340   	; 0x132 <LCD_CHAR>
	LCD_CHAR((year)%10+'0');
     e3e:	40 91 ea 01 	lds	r20, 0x01EA	; 0x8001ea <year>
     e42:	50 91 eb 01 	lds	r21, 0x01EB	; 0x8001eb <year+0x1>
     e46:	9a 01       	movw	r18, r20
     e48:	ad ec       	ldi	r26, 0xCD	; 205
     e4a:	bc ec       	ldi	r27, 0xCC	; 204
     e4c:	bf d3       	rcall	.+1918   	; 0x15cc <__umulhisi3>
     e4e:	96 95       	lsr	r25
     e50:	87 95       	ror	r24
     e52:	96 95       	lsr	r25
     e54:	87 95       	ror	r24
     e56:	96 95       	lsr	r25
     e58:	87 95       	ror	r24
     e5a:	9c 01       	movw	r18, r24
     e5c:	22 0f       	add	r18, r18
     e5e:	33 1f       	adc	r19, r19
     e60:	88 0f       	add	r24, r24
     e62:	99 1f       	adc	r25, r25
     e64:	88 0f       	add	r24, r24
     e66:	99 1f       	adc	r25, r25
     e68:	88 0f       	add	r24, r24
     e6a:	99 1f       	adc	r25, r25
     e6c:	82 0f       	add	r24, r18
     e6e:	93 1f       	adc	r25, r19
     e70:	9a 01       	movw	r18, r20
     e72:	28 1b       	sub	r18, r24
     e74:	39 0b       	sbc	r19, r25
     e76:	c9 01       	movw	r24, r18
     e78:	80 5d       	subi	r24, 0xD0	; 208
     e7a:	5b d9       	rcall	.-3402   	; 0x132 <LCD_CHAR>
     e7c:	85 e8       	ldi	r24, 0x85	; 133
     e7e:	43 d9       	rcall	.-3450   	; 0x106 <LCD_Comm>
     e80:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <day>
	
	
	// displaying day and month in form of "d/m"
	LCD_pos(5,0);
	if ((day/10)>0)
     e84:	8a 30       	cpi	r24, 0x0A	; 10
     e86:	d0 f0       	brcs	.+52     	; 0xebc <display_normal_mode+0x172>
	{
		LCD_CHAR((day/10)+'0');
     e88:	1d ec       	ldi	r17, 0xCD	; 205
     e8a:	81 9f       	mul	r24, r17
     e8c:	81 2d       	mov	r24, r1
     e8e:	11 24       	eor	r1, r1
     e90:	86 95       	lsr	r24
     e92:	86 95       	lsr	r24
     e94:	86 95       	lsr	r24
     e96:	80 5d       	subi	r24, 0xD0	; 208
     e98:	4c d9       	rcall	.-3432   	; 0x132 <LCD_CHAR>
     e9a:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <day>
		LCD_CHAR((day%10)+'0');
     e9e:	81 9f       	mul	r24, r17
     ea0:	11 2d       	mov	r17, r1
     ea2:	11 24       	eor	r1, r1
     ea4:	16 95       	lsr	r17
     ea6:	16 95       	lsr	r17
     ea8:	16 95       	lsr	r17
     eaa:	11 0f       	add	r17, r17
     eac:	91 2f       	mov	r25, r17
     eae:	99 0f       	add	r25, r25
     eb0:	99 0f       	add	r25, r25
     eb2:	19 0f       	add	r17, r25
     eb4:	81 1b       	sub	r24, r17
     eb6:	80 5d       	subi	r24, 0xD0	; 208
	}
	else
	{
		LCD_CHAR('0');
     eb8:	3c d9       	rcall	.-3464   	; 0x132 <LCD_CHAR>
     eba:	06 c0       	rjmp	.+12     	; 0xec8 <display_normal_mode+0x17e>
     ebc:	80 e3       	ldi	r24, 0x30	; 48
		LCD_CHAR((day)+'0');
     ebe:	39 d9       	rcall	.-3470   	; 0x132 <LCD_CHAR>
     ec0:	80 91 ed 01 	lds	r24, 0x01ED	; 0x8001ed <day>
     ec4:	80 5d       	subi	r24, 0xD0	; 208
	}
	LCD_CHAR('/');
     ec6:	35 d9       	rcall	.-3478   	; 0x132 <LCD_CHAR>
     ec8:	8f e2       	ldi	r24, 0x2F	; 47
     eca:	33 d9       	rcall	.-3482   	; 0x132 <LCD_CHAR>
	
	if ((month/10)>0)
     ecc:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <month>
     ed0:	8a 30       	cpi	r24, 0x0A	; 10
     ed2:	d0 f0       	brcs	.+52     	; 0xf08 <display_normal_mode+0x1be>
	{
		LCD_CHAR((month/10)+'0');
     ed4:	1d ec       	ldi	r17, 0xCD	; 205
     ed6:	81 9f       	mul	r24, r17
     ed8:	81 2d       	mov	r24, r1
     eda:	11 24       	eor	r1, r1
     edc:	86 95       	lsr	r24
     ede:	86 95       	lsr	r24
     ee0:	86 95       	lsr	r24
     ee2:	80 5d       	subi	r24, 0xD0	; 208
     ee4:	26 d9       	rcall	.-3508   	; 0x132 <LCD_CHAR>
		LCD_CHAR((month%10)+'0');
     ee6:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <month>
     eea:	81 9f       	mul	r24, r17
     eec:	11 2d       	mov	r17, r1
     eee:	11 24       	eor	r1, r1
     ef0:	16 95       	lsr	r17
     ef2:	16 95       	lsr	r17
     ef4:	16 95       	lsr	r17
     ef6:	11 0f       	add	r17, r17
     ef8:	91 2f       	mov	r25, r17
     efa:	99 0f       	add	r25, r25
     efc:	99 0f       	add	r25, r25
     efe:	19 0f       	add	r17, r25
     f00:	81 1b       	sub	r24, r17
     f02:	80 5d       	subi	r24, 0xD0	; 208
	}
	else
	{
		LCD_CHAR('0');
     f04:	16 d9       	rcall	.-3540   	; 0x132 <LCD_CHAR>
     f06:	06 c0       	rjmp	.+12     	; 0xf14 <display_normal_mode+0x1ca>
		LCD_CHAR((month)+'0');
     f08:	80 e3       	ldi	r24, 0x30	; 48
     f0a:	13 d9       	rcall	.-3546   	; 0x132 <LCD_CHAR>
     f0c:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <month>
     f10:	80 5d       	subi	r24, 0xD0	; 208
     f12:	0f d9       	rcall	.-3554   	; 0x132 <LCD_CHAR>
     f14:	8b e8       	ldi	r24, 0x8B	; 139
	
	//////////////////////////////////////////////////////////////////////////
	
	// displaying week days
	LCD_pos(11,0);
	switch(week_day)
     f16:	f7 d8       	rcall	.-3602   	; 0x106 <LCD_Comm>
     f18:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <week_day>
     f1c:	8e 2f       	mov	r24, r30
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	fc 01       	movw	r30, r24
     f22:	31 97       	sbiw	r30, 0x01	; 1
     f24:	e7 30       	cpi	r30, 0x07	; 7
     f26:	f1 05       	cpc	r31, r1
     f28:	f0 f4       	brcc	.+60     	; 0xf66 <display_normal_mode+0x21c>
	{
		case 1: LCD_STR("Mon"); break;
     f2a:	ea 5b       	subi	r30, 0xBA	; 186
     f2c:	ff 4f       	sbci	r31, 0xFF	; 255
     f2e:	45 c3       	rjmp	.+1674   	; 0x15ba <__tablejump2__>
     f30:	81 e8       	ldi	r24, 0x81	; 129
		case 2: LCD_STR("Tue"); break;
     f32:	91 e0       	ldi	r25, 0x01	; 1
     f34:	06 d9       	rcall	.-3572   	; 0x142 <LCD_STR>
     f36:	17 c0       	rjmp	.+46     	; 0xf66 <display_normal_mode+0x21c>
     f38:	85 e8       	ldi	r24, 0x85	; 133
		case 3: LCD_STR("Wen"); break;
     f3a:	91 e0       	ldi	r25, 0x01	; 1
     f3c:	02 d9       	rcall	.-3580   	; 0x142 <LCD_STR>
     f3e:	13 c0       	rjmp	.+38     	; 0xf66 <display_normal_mode+0x21c>
     f40:	89 e8       	ldi	r24, 0x89	; 137
		case 4: LCD_STR("Thu"); break;
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	fe d8       	rcall	.-3588   	; 0x142 <LCD_STR>
     f46:	0f c0       	rjmp	.+30     	; 0xf66 <display_normal_mode+0x21c>
     f48:	8d e8       	ldi	r24, 0x8D	; 141
     f4a:	91 e0       	ldi	r25, 0x01	; 1
		case 5: LCD_STR("Fri"); break;
     f4c:	fa d8       	rcall	.-3596   	; 0x142 <LCD_STR>
     f4e:	0b c0       	rjmp	.+22     	; 0xf66 <display_normal_mode+0x21c>
     f50:	81 e9       	ldi	r24, 0x91	; 145
     f52:	91 e0       	ldi	r25, 0x01	; 1
		case 6: LCD_STR("Sat"); break;
     f54:	f6 d8       	rcall	.-3604   	; 0x142 <LCD_STR>
     f56:	07 c0       	rjmp	.+14     	; 0xf66 <display_normal_mode+0x21c>
     f58:	85 e9       	ldi	r24, 0x95	; 149
     f5a:	91 e0       	ldi	r25, 0x01	; 1
		case 7: LCD_STR("Sun"); break;
     f5c:	f2 d8       	rcall	.-3612   	; 0x142 <LCD_STR>
     f5e:	03 c0       	rjmp	.+6      	; 0xf66 <display_normal_mode+0x21c>
     f60:	89 e9       	ldi	r24, 0x99	; 153
	}
	//////////////////////////////////////////////////////////////////////////
	
	// displaying hours
	if(hour>12)
     f62:	91 e0       	ldi	r25, 0x01	; 1
     f64:	ee d8       	rcall	.-3620   	; 0x142 <LCD_STR>
     f66:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <hour>
     f6a:	8d 30       	cpi	r24, 0x0D	; 13
	{
		LCD_pos(0,1);
		LCD_STR(PM);
     f6c:	e8 f0       	brcs	.+58     	; 0xfa8 <display_normal_mode+0x25e>
     f6e:	80 ec       	ldi	r24, 0xC0	; 192
     f70:	ca d8       	rcall	.-3692   	; 0x106 <LCD_Comm>
     f72:	ce 01       	movw	r24, r28
     f74:	04 96       	adiw	r24, 0x04	; 4
		LCD_pos(3,1);
		LCD_CHAR((hour-12)/10+'0');
     f76:	e5 d8       	rcall	.-3638   	; 0x142 <LCD_STR>
     f78:	83 ec       	ldi	r24, 0xC3	; 195
     f7a:	c5 d8       	rcall	.-3702   	; 0x106 <LCD_Comm>
     f7c:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <hour>
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	0c 97       	sbiw	r24, 0x0c	; 12
     f84:	0a e0       	ldi	r16, 0x0A	; 10
     f86:	10 e0       	ldi	r17, 0x00	; 0
     f88:	b8 01       	movw	r22, r16
     f8a:	04 d3       	rcall	.+1544   	; 0x1594 <__divmodhi4>
     f8c:	80 e3       	ldi	r24, 0x30	; 48
		LCD_CHAR((hour-12)%10+'0');
     f8e:	86 0f       	add	r24, r22
     f90:	d0 d8       	rcall	.-3680   	; 0x132 <LCD_CHAR>
     f92:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <hour>
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0c 97       	sbiw	r24, 0x0c	; 12
     f9a:	b8 01       	movw	r22, r16
     f9c:	fb d2       	rcall	.+1526   	; 0x1594 <__divmodhi4>
     f9e:	80 5d       	subi	r24, 0xD0	; 208
		LCD_CHAR(':');
     fa0:	c8 d8       	rcall	.-3696   	; 0x132 <LCD_CHAR>
     fa2:	8a e3       	ldi	r24, 0x3A	; 58
     fa4:	c6 d8       	rcall	.-3700   	; 0x132 <LCD_CHAR>
     fa6:	24 c0       	rjmp	.+72     	; 0xff0 <display_normal_mode+0x2a6>
     fa8:	80 ec       	ldi	r24, 0xC0	; 192
     faa:	ad d8       	rcall	.-3750   	; 0x106 <LCD_Comm>
		
	}
	else
	{
		LCD_pos(0,1);
		LCD_STR(AM);
     fac:	ce 01       	movw	r24, r28
     fae:	01 96       	adiw	r24, 0x01	; 1
     fb0:	c8 d8       	rcall	.-3696   	; 0x142 <LCD_STR>
     fb2:	83 ec       	ldi	r24, 0xC3	; 195
     fb4:	a8 d8       	rcall	.-3760   	; 0x106 <LCD_Comm>
     fb6:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <hour>
		LCD_pos(3,1);
		LCD_CHAR((hour)/10+'0');
     fba:	1d ec       	ldi	r17, 0xCD	; 205
     fbc:	81 9f       	mul	r24, r17
     fbe:	81 2d       	mov	r24, r1
     fc0:	11 24       	eor	r1, r1
     fc2:	86 95       	lsr	r24
     fc4:	86 95       	lsr	r24
     fc6:	86 95       	lsr	r24
     fc8:	80 5d       	subi	r24, 0xD0	; 208
     fca:	b3 d8       	rcall	.-3738   	; 0x132 <LCD_CHAR>
     fcc:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <hour>
		LCD_CHAR((hour)%10+'0');
     fd0:	81 9f       	mul	r24, r17
     fd2:	11 2d       	mov	r17, r1
     fd4:	11 24       	eor	r1, r1
     fd6:	16 95       	lsr	r17
     fd8:	16 95       	lsr	r17
     fda:	16 95       	lsr	r17
     fdc:	11 0f       	add	r17, r17
     fde:	91 2f       	mov	r25, r17
     fe0:	99 0f       	add	r25, r25
     fe2:	99 0f       	add	r25, r25
     fe4:	19 0f       	add	r17, r25
     fe6:	81 1b       	sub	r24, r17
     fe8:	80 5d       	subi	r24, 0xD0	; 208
     fea:	a3 d8       	rcall	.-3770   	; 0x132 <LCD_CHAR>
		LCD_CHAR(':');
     fec:	8a e3       	ldi	r24, 0x3A	; 58
     fee:	a1 d8       	rcall	.-3774   	; 0x132 <LCD_CHAR>
     ff0:	86 ec       	ldi	r24, 0xC6	; 198
     ff2:	89 d8       	rcall	.-3822   	; 0x106 <LCD_Comm>
     ff4:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <min>
	}
	
	// min displaying
	LCD_pos(6,1);
	LCD_CHAR((min/10)+'0');
     ff8:	1d ec       	ldi	r17, 0xCD	; 205
     ffa:	81 9f       	mul	r24, r17
     ffc:	81 2d       	mov	r24, r1
     ffe:	11 24       	eor	r1, r1
    1000:	86 95       	lsr	r24
    1002:	86 95       	lsr	r24
    1004:	86 95       	lsr	r24
    1006:	80 5d       	subi	r24, 0xD0	; 208
    1008:	94 d8       	rcall	.-3800   	; 0x132 <LCD_CHAR>
    100a:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <min>
	LCD_CHAR((min%10)+'0');
    100e:	81 9f       	mul	r24, r17
    1010:	91 2d       	mov	r25, r1
    1012:	11 24       	eor	r1, r1
    1014:	96 95       	lsr	r25
    1016:	96 95       	lsr	r25
    1018:	96 95       	lsr	r25
    101a:	99 0f       	add	r25, r25
    101c:	29 2f       	mov	r18, r25
    101e:	22 0f       	add	r18, r18
    1020:	22 0f       	add	r18, r18
    1022:	92 0f       	add	r25, r18
    1024:	89 1b       	sub	r24, r25
    1026:	80 5d       	subi	r24, 0xD0	; 208
    1028:	84 d8       	rcall	.-3832   	; 0x132 <LCD_CHAR>
    102a:	8a e3       	ldi	r24, 0x3A	; 58
    102c:	82 d8       	rcall	.-3836   	; 0x132 <LCD_CHAR>
	LCD_CHAR(':');
    102e:	89 ec       	ldi	r24, 0xC9	; 201
    1030:	6a d8       	rcall	.-3884   	; 0x106 <LCD_Comm>
    1032:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <sec>
    1036:	81 9f       	mul	r24, r17
    1038:	81 2d       	mov	r24, r1
	
	// sec displaying
	LCD_pos(9, 1);
	LCD_CHAR((sec/10)+'0');
    103a:	11 24       	eor	r1, r1
    103c:	86 95       	lsr	r24
    103e:	86 95       	lsr	r24
    1040:	86 95       	lsr	r24
    1042:	80 5d       	subi	r24, 0xD0	; 208
    1044:	76 d8       	rcall	.-3860   	; 0x132 <LCD_CHAR>
    1046:	80 91 ec 01 	lds	r24, 0x01EC	; 0x8001ec <sec>
    104a:	81 9f       	mul	r24, r17
    104c:	11 2d       	mov	r17, r1
    104e:	11 24       	eor	r1, r1
	LCD_CHAR((sec%10)+'0');
    1050:	16 95       	lsr	r17
    1052:	16 95       	lsr	r17
    1054:	16 95       	lsr	r17
    1056:	11 0f       	add	r17, r17
    1058:	91 2f       	mov	r25, r17
    105a:	99 0f       	add	r25, r25
    105c:	99 0f       	add	r25, r25
    105e:	19 0f       	add	r17, r25
    1060:	81 1b       	sub	r24, r17
    1062:	80 5d       	subi	r24, 0xD0	; 208
    1064:	66 d8       	rcall	.-3892   	; 0x132 <LCD_CHAR>
    1066:	26 96       	adiw	r28, 0x06	; 6
    1068:	0f b6       	in	r0, 0x3f	; 63
    106a:	f8 94       	cli
    106c:	de bf       	out	0x3e, r29	; 62
    106e:	0f be       	out	0x3f, r0	; 63
    1070:	cd bf       	out	0x3d, r28	; 61
	
}
    1072:	df 91       	pop	r29
    1074:	cf 91       	pop	r28
    1076:	1f 91       	pop	r17
    1078:	0f 91       	pop	r16
    107a:	08 95       	ret

0000107c <display_stop_watch>:
    107c:	80 e8       	ldi	r24, 0x80	; 128
    107e:	43 d8       	rcall	.-3962   	; 0x106 <LCD_Comm>
    1080:	20 91 ee 01 	lds	r18, 0x01EE	; 0x8001ee <hour_stp_w>
    1084:	30 91 ef 01 	lds	r19, 0x01EF	; 0x8001ef <hour_stp_w+0x1>

void display_stop_watch(void)
{
	// hour
	LCD_pos(0,0);
	LCD_CHAR((hour_stp_w)/10+'0');
    1088:	ad ec       	ldi	r26, 0xCD	; 205
    108a:	bc ec       	ldi	r27, 0xCC	; 204
    108c:	9f d2       	rcall	.+1342   	; 0x15cc <__umulhisi3>
    108e:	96 95       	lsr	r25
    1090:	87 95       	ror	r24
    1092:	96 95       	lsr	r25
    1094:	87 95       	ror	r24
    1096:	96 95       	lsr	r25
    1098:	87 95       	ror	r24
    109a:	80 5d       	subi	r24, 0xD0	; 208
    109c:	4a d8       	rcall	.-3948   	; 0x132 <LCD_CHAR>
	LCD_CHAR((hour_stp_w)%10+'0');
    109e:	40 91 ee 01 	lds	r20, 0x01EE	; 0x8001ee <hour_stp_w>
    10a2:	50 91 ef 01 	lds	r21, 0x01EF	; 0x8001ef <hour_stp_w+0x1>
    10a6:	9a 01       	movw	r18, r20
    10a8:	ad ec       	ldi	r26, 0xCD	; 205
    10aa:	bc ec       	ldi	r27, 0xCC	; 204
    10ac:	8f d2       	rcall	.+1310   	; 0x15cc <__umulhisi3>
    10ae:	96 95       	lsr	r25
    10b0:	87 95       	ror	r24
    10b2:	96 95       	lsr	r25
    10b4:	87 95       	ror	r24
    10b6:	96 95       	lsr	r25
    10b8:	87 95       	ror	r24
    10ba:	9c 01       	movw	r18, r24
    10bc:	22 0f       	add	r18, r18
    10be:	33 1f       	adc	r19, r19
    10c0:	88 0f       	add	r24, r24
    10c2:	99 1f       	adc	r25, r25
    10c4:	88 0f       	add	r24, r24
    10c6:	99 1f       	adc	r25, r25
    10c8:	88 0f       	add	r24, r24
    10ca:	99 1f       	adc	r25, r25
    10cc:	82 0f       	add	r24, r18
    10ce:	93 1f       	adc	r25, r19
    10d0:	9a 01       	movw	r18, r20
    10d2:	28 1b       	sub	r18, r24
    10d4:	39 0b       	sbc	r19, r25
    10d6:	c9 01       	movw	r24, r18
    10d8:	80 5d       	subi	r24, 0xD0	; 208
	LCD_CHAR('h');
    10da:	2b d8       	rcall	.-4010   	; 0x132 <LCD_CHAR>
    10dc:	88 e6       	ldi	r24, 0x68	; 104
    10de:	29 d8       	rcall	.-4014   	; 0x132 <LCD_CHAR>
    10e0:	83 ec       	ldi	r24, 0xC3	; 195
    10e2:	11 d8       	rcall	.-4062   	; 0x106 <LCD_Comm>
    10e4:	20 91 e3 01 	lds	r18, 0x01E3	; 0x8001e3 <min_stp_w>
	
	// min
	LCD_pos(3,1);
	LCD_CHAR((min_stp_w/10)+'0');
    10e8:	30 91 e4 01 	lds	r19, 0x01E4	; 0x8001e4 <min_stp_w+0x1>
    10ec:	ad ec       	ldi	r26, 0xCD	; 205
    10ee:	bc ec       	ldi	r27, 0xCC	; 204
    10f0:	6d d2       	rcall	.+1242   	; 0x15cc <__umulhisi3>
    10f2:	96 95       	lsr	r25
    10f4:	87 95       	ror	r24
    10f6:	96 95       	lsr	r25
    10f8:	87 95       	ror	r24
    10fa:	96 95       	lsr	r25
    10fc:	87 95       	ror	r24
    10fe:	80 5d       	subi	r24, 0xD0	; 208
    1100:	18 d8       	rcall	.-4048   	; 0x132 <LCD_CHAR>
    1102:	40 91 e3 01 	lds	r20, 0x01E3	; 0x8001e3 <min_stp_w>
	LCD_CHAR((min_stp_w%10)+'0');
    1106:	50 91 e4 01 	lds	r21, 0x01E4	; 0x8001e4 <min_stp_w+0x1>
    110a:	9a 01       	movw	r18, r20
    110c:	ad ec       	ldi	r26, 0xCD	; 205
    110e:	bc ec       	ldi	r27, 0xCC	; 204
    1110:	5d d2       	rcall	.+1210   	; 0x15cc <__umulhisi3>
    1112:	96 95       	lsr	r25
    1114:	87 95       	ror	r24
    1116:	96 95       	lsr	r25
    1118:	87 95       	ror	r24
    111a:	96 95       	lsr	r25
    111c:	87 95       	ror	r24
    111e:	9c 01       	movw	r18, r24
    1120:	22 0f       	add	r18, r18
    1122:	33 1f       	adc	r19, r19
    1124:	88 0f       	add	r24, r24
    1126:	99 1f       	adc	r25, r25
    1128:	88 0f       	add	r24, r24
    112a:	99 1f       	adc	r25, r25
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	82 0f       	add	r24, r18
    1132:	93 1f       	adc	r25, r19
    1134:	9a 01       	movw	r18, r20
    1136:	28 1b       	sub	r18, r24
    1138:	39 0b       	sbc	r19, r25
    113a:	c9 01       	movw	r24, r18
    113c:	80 5d       	subi	r24, 0xD0	; 208
    113e:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1142:	8a e3       	ldi	r24, 0x3A	; 58
	LCD_CHAR(':');
    1144:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1148:	86 ec       	ldi	r24, 0xC6	; 198
    114a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
    114e:	20 91 e5 01 	lds	r18, 0x01E5	; 0x8001e5 <sec_stp_w>
	
	// sec
	LCD_pos(6, 1);
	LCD_CHAR((sec_stp_w/10)+'0');
    1152:	30 91 e6 01 	lds	r19, 0x01E6	; 0x8001e6 <sec_stp_w+0x1>
    1156:	ad ec       	ldi	r26, 0xCD	; 205
    1158:	bc ec       	ldi	r27, 0xCC	; 204
    115a:	38 d2       	rcall	.+1136   	; 0x15cc <__umulhisi3>
    115c:	96 95       	lsr	r25
    115e:	87 95       	ror	r24
    1160:	96 95       	lsr	r25
    1162:	87 95       	ror	r24
    1164:	96 95       	lsr	r25
    1166:	87 95       	ror	r24
    1168:	80 5d       	subi	r24, 0xD0	; 208
    116a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    116e:	40 91 e5 01 	lds	r20, 0x01E5	; 0x8001e5 <sec_stp_w>
	LCD_CHAR((sec_stp_w%10)+'0');
    1172:	50 91 e6 01 	lds	r21, 0x01E6	; 0x8001e6 <sec_stp_w+0x1>
    1176:	9a 01       	movw	r18, r20
    1178:	ad ec       	ldi	r26, 0xCD	; 205
    117a:	bc ec       	ldi	r27, 0xCC	; 204
    117c:	27 d2       	rcall	.+1102   	; 0x15cc <__umulhisi3>
    117e:	96 95       	lsr	r25
    1180:	87 95       	ror	r24
    1182:	96 95       	lsr	r25
    1184:	87 95       	ror	r24
    1186:	96 95       	lsr	r25
    1188:	87 95       	ror	r24
    118a:	9c 01       	movw	r18, r24
    118c:	22 0f       	add	r18, r18
    118e:	33 1f       	adc	r19, r19
    1190:	88 0f       	add	r24, r24
    1192:	99 1f       	adc	r25, r25
    1194:	88 0f       	add	r24, r24
    1196:	99 1f       	adc	r25, r25
    1198:	88 0f       	add	r24, r24
    119a:	99 1f       	adc	r25, r25
    119c:	82 0f       	add	r24, r18
    119e:	93 1f       	adc	r25, r19
    11a0:	9a 01       	movw	r18, r20
    11a2:	28 1b       	sub	r18, r24
    11a4:	39 0b       	sbc	r19, r25
    11a6:	c9 01       	movw	r24, r18
    11a8:	80 5d       	subi	r24, 0xD0	; 208
    11aa:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    11ae:	8a e3       	ldi	r24, 0x3A	; 58
	LCD_CHAR(':');
    11b0:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    11b4:	89 ec       	ldi	r24, 0xC9	; 201
    11b6:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
    11ba:	20 91 f0 01 	lds	r18, 0x01F0	; 0x8001f0 <cnt_stp_w>
	
	//milliseconds
	LCD_pos(9, 1);
	LCD_CHAR((cnt_stp_w/10)+'0');
    11be:	30 91 f1 01 	lds	r19, 0x01F1	; 0x8001f1 <cnt_stp_w+0x1>
    11c2:	ad ec       	ldi	r26, 0xCD	; 205
    11c4:	bc ec       	ldi	r27, 0xCC	; 204
    11c6:	02 d2       	rcall	.+1028   	; 0x15cc <__umulhisi3>
    11c8:	96 95       	lsr	r25
    11ca:	87 95       	ror	r24
    11cc:	96 95       	lsr	r25
    11ce:	87 95       	ror	r24
    11d0:	96 95       	lsr	r25
    11d2:	87 95       	ror	r24
    11d4:	80 5d       	subi	r24, 0xD0	; 208
    11d6:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    11da:	40 91 f0 01 	lds	r20, 0x01F0	; 0x8001f0 <cnt_stp_w>
	LCD_CHAR((cnt_stp_w%10)+'0');
    11de:	50 91 f1 01 	lds	r21, 0x01F1	; 0x8001f1 <cnt_stp_w+0x1>
    11e2:	9a 01       	movw	r18, r20
    11e4:	ad ec       	ldi	r26, 0xCD	; 205
    11e6:	bc ec       	ldi	r27, 0xCC	; 204
    11e8:	f1 d1       	rcall	.+994    	; 0x15cc <__umulhisi3>
    11ea:	96 95       	lsr	r25
    11ec:	87 95       	ror	r24
    11ee:	96 95       	lsr	r25
    11f0:	87 95       	ror	r24
    11f2:	96 95       	lsr	r25
    11f4:	87 95       	ror	r24
    11f6:	9c 01       	movw	r18, r24
    11f8:	22 0f       	add	r18, r18
    11fa:	33 1f       	adc	r19, r19
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	88 0f       	add	r24, r24
    1202:	99 1f       	adc	r25, r25
    1204:	88 0f       	add	r24, r24
    1206:	99 1f       	adc	r25, r25
    1208:	82 0f       	add	r24, r18
    120a:	93 1f       	adc	r25, r19
    120c:	9a 01       	movw	r18, r20
    120e:	28 1b       	sub	r18, r24
    1210:	39 0b       	sbc	r19, r25
    1212:	c9 01       	movw	r24, r18
    1214:	80 5d       	subi	r24, 0xD0	; 208
    1216:	0c 94 99 00 	jmp	0x132	; 0x132 <LCD_CHAR>
    121a:	08 95       	ret

0000121c <display_alarm_time>:
    121c:	cf 93       	push	r28
	
}

void display_alarm_time(void)
{
	if (isset_alarm)
    121e:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <isset_alarm>
    1222:	88 23       	and	r24, r24
    1224:	09 f4       	brne	.+2      	; 0x1228 <display_alarm_time+0xc>
    1226:	28 c1       	rjmp	.+592    	; 0x1478 <display_alarm_time+0x25c>
    1228:	82 e8       	ldi	r24, 0x82	; 130
    122a:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
	{
		LCD_pos(2,0);
		LCD_STR("ALARM IS ON");
    122e:	8d e9       	ldi	r24, 0x9D	; 157
    1230:	91 e0       	ldi	r25, 0x01	; 1
    1232:	0e 94 a1 00 	call	0x142	; 0x142 <LCD_STR>
    1236:	80 ec       	ldi	r24, 0xC0	; 192
    1238:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
		
		LCD_pos(0,1);
		LCD_CHAR((year_alarm)/1000+'0');
    123c:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <year_alarm>
    1240:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <year_alarm+0x1>
    1244:	36 95       	lsr	r19
    1246:	27 95       	ror	r18
    1248:	36 95       	lsr	r19
    124a:	27 95       	ror	r18
    124c:	36 95       	lsr	r19
    124e:	27 95       	ror	r18
    1250:	a5 ec       	ldi	r26, 0xC5	; 197
    1252:	b0 e2       	ldi	r27, 0x20	; 32
    1254:	bb d1       	rcall	.+886    	; 0x15cc <__umulhisi3>
    1256:	92 95       	swap	r25
    1258:	82 95       	swap	r24
    125a:	8f 70       	andi	r24, 0x0F	; 15
    125c:	89 27       	eor	r24, r25
    125e:	9f 70       	andi	r25, 0x0F	; 15
    1260:	89 27       	eor	r24, r25
    1262:	80 5d       	subi	r24, 0xD0	; 208
    1264:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((year_alarm/100)%10+'0');
    1268:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <year_alarm>
    126c:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <year_alarm+0x1>
    1270:	36 95       	lsr	r19
    1272:	27 95       	ror	r18
    1274:	36 95       	lsr	r19
    1276:	27 95       	ror	r18
    1278:	ab e7       	ldi	r26, 0x7B	; 123
    127a:	b4 e1       	ldi	r27, 0x14	; 20
    127c:	a7 d1       	rcall	.+846    	; 0x15cc <__umulhisi3>
    127e:	ac 01       	movw	r20, r24
    1280:	56 95       	lsr	r21
    1282:	47 95       	ror	r20
    1284:	9a 01       	movw	r18, r20
    1286:	ad ec       	ldi	r26, 0xCD	; 205
    1288:	bc ec       	ldi	r27, 0xCC	; 204
    128a:	a0 d1       	rcall	.+832    	; 0x15cc <__umulhisi3>
    128c:	96 95       	lsr	r25
    128e:	87 95       	ror	r24
    1290:	96 95       	lsr	r25
    1292:	87 95       	ror	r24
    1294:	96 95       	lsr	r25
    1296:	87 95       	ror	r24
    1298:	9c 01       	movw	r18, r24
    129a:	22 0f       	add	r18, r18
    129c:	33 1f       	adc	r19, r19
    129e:	88 0f       	add	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	88 0f       	add	r24, r24
    12a4:	99 1f       	adc	r25, r25
    12a6:	88 0f       	add	r24, r24
    12a8:	99 1f       	adc	r25, r25
    12aa:	82 0f       	add	r24, r18
    12ac:	93 1f       	adc	r25, r19
    12ae:	9a 01       	movw	r18, r20
    12b0:	28 1b       	sub	r18, r24
    12b2:	39 0b       	sbc	r19, r25
    12b4:	c9 01       	movw	r24, r18
    12b6:	80 5d       	subi	r24, 0xD0	; 208
    12b8:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((year_alarm/10)%10+'0');
    12bc:	20 91 07 01 	lds	r18, 0x0107	; 0x800107 <year_alarm>
    12c0:	30 91 08 01 	lds	r19, 0x0108	; 0x800108 <year_alarm+0x1>
    12c4:	ad ec       	ldi	r26, 0xCD	; 205
    12c6:	bc ec       	ldi	r27, 0xCC	; 204
    12c8:	81 d1       	rcall	.+770    	; 0x15cc <__umulhisi3>
    12ca:	ac 01       	movw	r20, r24
    12cc:	56 95       	lsr	r21
    12ce:	47 95       	ror	r20
    12d0:	56 95       	lsr	r21
    12d2:	47 95       	ror	r20
    12d4:	56 95       	lsr	r21
    12d6:	47 95       	ror	r20
    12d8:	9a 01       	movw	r18, r20
    12da:	78 d1       	rcall	.+752    	; 0x15cc <__umulhisi3>
    12dc:	96 95       	lsr	r25
    12de:	87 95       	ror	r24
    12e0:	96 95       	lsr	r25
    12e2:	87 95       	ror	r24
    12e4:	96 95       	lsr	r25
    12e6:	87 95       	ror	r24
    12e8:	9c 01       	movw	r18, r24
    12ea:	22 0f       	add	r18, r18
    12ec:	33 1f       	adc	r19, r19
    12ee:	88 0f       	add	r24, r24
    12f0:	99 1f       	adc	r25, r25
    12f2:	88 0f       	add	r24, r24
    12f4:	99 1f       	adc	r25, r25
    12f6:	88 0f       	add	r24, r24
    12f8:	99 1f       	adc	r25, r25
    12fa:	82 0f       	add	r24, r18
    12fc:	93 1f       	adc	r25, r19
    12fe:	9a 01       	movw	r18, r20
    1300:	28 1b       	sub	r18, r24
    1302:	39 0b       	sbc	r19, r25
    1304:	c9 01       	movw	r24, r18
    1306:	80 5d       	subi	r24, 0xD0	; 208
    1308:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((year_alarm)%10+'0');
    130c:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <year_alarm>
    1310:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <year_alarm+0x1>
    1314:	9a 01       	movw	r18, r20
    1316:	ad ec       	ldi	r26, 0xCD	; 205
    1318:	bc ec       	ldi	r27, 0xCC	; 204
    131a:	58 d1       	rcall	.+688    	; 0x15cc <__umulhisi3>
    131c:	96 95       	lsr	r25
    131e:	87 95       	ror	r24
    1320:	96 95       	lsr	r25
    1322:	87 95       	ror	r24
    1324:	96 95       	lsr	r25
    1326:	87 95       	ror	r24
    1328:	9c 01       	movw	r18, r24
    132a:	22 0f       	add	r18, r18
    132c:	33 1f       	adc	r19, r19
    132e:	88 0f       	add	r24, r24
    1330:	99 1f       	adc	r25, r25
    1332:	88 0f       	add	r24, r24
    1334:	99 1f       	adc	r25, r25
    1336:	88 0f       	add	r24, r24
    1338:	99 1f       	adc	r25, r25
    133a:	82 0f       	add	r24, r18
    133c:	93 1f       	adc	r25, r19
    133e:	9a 01       	movw	r18, r20
    1340:	28 1b       	sub	r18, r24
    1342:	39 0b       	sbc	r19, r25
    1344:	c9 01       	movw	r24, r18
    1346:	80 5d       	subi	r24, 0xD0	; 208
    1348:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR(' ');
    134c:	80 e2       	ldi	r24, 0x20	; 32
    134e:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		if ((day_alarm/10)>0)
    1352:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <day_alarm>
    1356:	8a 30       	cpi	r24, 0x0A	; 10
    1358:	e0 f0       	brcs	.+56     	; 0x1392 <display_alarm_time+0x176>
		{
			LCD_CHAR((day_alarm/10)+'0');
    135a:	cd ec       	ldi	r28, 0xCD	; 205
    135c:	8c 9f       	mul	r24, r28
    135e:	81 2d       	mov	r24, r1
    1360:	11 24       	eor	r1, r1
    1362:	86 95       	lsr	r24
    1364:	86 95       	lsr	r24
    1366:	86 95       	lsr	r24
    1368:	80 5d       	subi	r24, 0xD0	; 208
    136a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
			LCD_CHAR((day_alarm%10)+'0');
    136e:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <day_alarm>
    1372:	8c 9f       	mul	r24, r28
    1374:	c1 2d       	mov	r28, r1
    1376:	11 24       	eor	r1, r1
    1378:	c6 95       	lsr	r28
    137a:	c6 95       	lsr	r28
    137c:	c6 95       	lsr	r28
    137e:	cc 0f       	add	r28, r28
    1380:	9c 2f       	mov	r25, r28
    1382:	99 0f       	add	r25, r25
    1384:	99 0f       	add	r25, r25
    1386:	c9 0f       	add	r28, r25
    1388:	8c 1b       	sub	r24, r28
    138a:	80 5d       	subi	r24, 0xD0	; 208
    138c:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    1390:	08 c0       	rjmp	.+16     	; 0x13a2 <display_alarm_time+0x186>
		}
		else
		{
			LCD_CHAR('0');
    1392:	80 e3       	ldi	r24, 0x30	; 48
    1394:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
			LCD_CHAR((day_alarm)+'0');
    1398:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <day_alarm>
    139c:	80 5d       	subi	r24, 0xD0	; 208
    139e:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		}
		LCD_CHAR('/');
    13a2:	8f e2       	ldi	r24, 0x2F	; 47
    13a4:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		
		if ((month_alarm/10)>0)
    13a8:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <month_alarm>
    13ac:	8a 30       	cpi	r24, 0x0A	; 10
    13ae:	e0 f0       	brcs	.+56     	; 0x13e8 <display_alarm_time+0x1cc>
		{
			LCD_CHAR((month_alarm/10)+'0');
    13b0:	cd ec       	ldi	r28, 0xCD	; 205
    13b2:	8c 9f       	mul	r24, r28
    13b4:	81 2d       	mov	r24, r1
    13b6:	11 24       	eor	r1, r1
    13b8:	86 95       	lsr	r24
    13ba:	86 95       	lsr	r24
    13bc:	86 95       	lsr	r24
    13be:	80 5d       	subi	r24, 0xD0	; 208
    13c0:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
			LCD_CHAR((month_alarm%10)+'0');
    13c4:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <month_alarm>
    13c8:	8c 9f       	mul	r24, r28
    13ca:	c1 2d       	mov	r28, r1
    13cc:	11 24       	eor	r1, r1
    13ce:	c6 95       	lsr	r28
    13d0:	c6 95       	lsr	r28
    13d2:	c6 95       	lsr	r28
    13d4:	cc 0f       	add	r28, r28
    13d6:	9c 2f       	mov	r25, r28
    13d8:	99 0f       	add	r25, r25
    13da:	99 0f       	add	r25, r25
    13dc:	c9 0f       	add	r28, r25
    13de:	8c 1b       	sub	r24, r28
    13e0:	80 5d       	subi	r24, 0xD0	; 208
    13e2:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
    13e6:	08 c0       	rjmp	.+16     	; 0x13f8 <display_alarm_time+0x1dc>
		}
		else
		{
			LCD_CHAR('0');
    13e8:	80 e3       	ldi	r24, 0x30	; 48
    13ea:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
			LCD_CHAR((month_alarm)+'0');
    13ee:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <month_alarm>
    13f2:	80 5d       	subi	r24, 0xD0	; 208
    13f4:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		}
		LCD_CHAR(' ');
    13f8:	80 e2       	ldi	r24, 0x20	; 32
    13fa:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((hour_alarm)/10+'0');
    13fe:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <hour_alarm>
    1402:	cd ec       	ldi	r28, 0xCD	; 205
    1404:	8c 9f       	mul	r24, r28
    1406:	81 2d       	mov	r24, r1
    1408:	11 24       	eor	r1, r1
    140a:	86 95       	lsr	r24
    140c:	86 95       	lsr	r24
    140e:	86 95       	lsr	r24
    1410:	80 5d       	subi	r24, 0xD0	; 208
    1412:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((hour_alarm)%10+'0');
    1416:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <hour_alarm>
    141a:	8c 9f       	mul	r24, r28
    141c:	91 2d       	mov	r25, r1
    141e:	11 24       	eor	r1, r1
    1420:	96 95       	lsr	r25
    1422:	96 95       	lsr	r25
    1424:	96 95       	lsr	r25
    1426:	99 0f       	add	r25, r25
    1428:	29 2f       	mov	r18, r25
    142a:	22 0f       	add	r18, r18
    142c:	22 0f       	add	r18, r18
    142e:	92 0f       	add	r25, r18
    1430:	89 1b       	sub	r24, r25
    1432:	80 5d       	subi	r24, 0xD0	; 208
    1434:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR(':');
    1438:	8a e3       	ldi	r24, 0x3A	; 58
    143a:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((min_alarm)/10+'0');
    143e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <min_alarm>
    1442:	8c 9f       	mul	r24, r28
    1444:	81 2d       	mov	r24, r1
    1446:	11 24       	eor	r1, r1
    1448:	86 95       	lsr	r24
    144a:	86 95       	lsr	r24
    144c:	86 95       	lsr	r24
    144e:	80 5d       	subi	r24, 0xD0	; 208
    1450:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		LCD_CHAR((min_alarm)%10+'0');
    1454:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <min_alarm>
    1458:	8c 9f       	mul	r24, r28
    145a:	c1 2d       	mov	r28, r1
    145c:	11 24       	eor	r1, r1
    145e:	c6 95       	lsr	r28
    1460:	c6 95       	lsr	r28
    1462:	c6 95       	lsr	r28
    1464:	cc 0f       	add	r28, r28
    1466:	9c 2f       	mov	r25, r28
    1468:	99 0f       	add	r25, r25
    146a:	99 0f       	add	r25, r25
    146c:	c9 0f       	add	r28, r25
    146e:	8c 1b       	sub	r24, r28
    1470:	80 5d       	subi	r24, 0xD0	; 208
    1472:	0e 94 99 00 	call	0x132	; 0x132 <LCD_CHAR>
		
	}
	else
	{
		alarm_clock_display();
    1476:	01 c0       	rjmp	.+2      	; 0x147a <display_alarm_time+0x25e>
    1478:	1a d8       	rcall	.-4044   	; 0x4ae <alarm_clock_display>
	}
}
    147a:	cf 91       	pop	r28
    147c:	08 95       	ret

0000147e <main>:

int main(void)
{
	
	cnt=0;
    147e:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <cnt>
	sec=0;
    1482:	10 92 ec 01 	sts	0x01EC, r1	; 0x8001ec <sec>
	min=10;
    1486:	8a e0       	ldi	r24, 0x0A	; 10
    1488:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <min>
	hour=12;
    148c:	8c e0       	ldi	r24, 0x0C	; 12
    148e:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <hour>
	day = 15;
    1492:	8f e0       	ldi	r24, 0x0F	; 15
    1494:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <day>
	week_day=7;
    1498:	87 e0       	ldi	r24, 0x07	; 7
    149a:	80 93 e8 01 	sts	0x01E8, r24	; 0x8001e8 <week_day>
	month = 3;
    149e:	83 e0       	ldi	r24, 0x03	; 3
    14a0:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <month>
	year = 2020;
    14a4:	84 ee       	ldi	r24, 0xE4	; 228
    14a6:	97 e0       	ldi	r25, 0x07	; 7
    14a8:	90 93 eb 01 	sts	0x01EB, r25	; 0x8001eb <year+0x1>
    14ac:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <year>
	
	init_timer();
    14b0:	0e 94 eb 00 	call	0x1d6	; 0x1d6 <init_timer>
	interrupt_init();
    14b4:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <interrupt_init>
	
	// LCD init
	port_init();
    14b8:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <port_init>
	LCD_Init();
    14bc:	0e 94 b8 00 	call	0x170	; 0x170 <LCD_Init>
	LCD_Clear();
    14c0:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
	LCD_Comm(0x0c);
    14c4:	8c e0       	ldi	r24, 0x0C	; 12
    14c6:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Comm>
    14ca:	8c ec       	ldi	r24, 0xCC	; 204
    14cc:	9c e1       	ldi	r25, 0x1C	; 28
    14ce:	01 97       	sbiw	r24, 0x01	; 1
    14d0:	f1 f7       	brne	.-4      	; 0x14ce <main+0x50>
    14d2:	00 c0       	rjmp	.+0      	; 0x14d4 <main+0x56>
    14d4:	00 00       	nop
	_delay_ms(2);
	char prev=mode;
	char prev_step = step;
    14d6:	f0 90 06 01 	lds	r15, 0x0106	; 0x800106 <step>
	char was_alarm_on =0;
    /* Replace with your application code */
    while (1) 
    {
		if(mode!=prev)
    14da:	c0 91 e0 01 	lds	r28, 0x01E0	; 0x8001e0 <mode>
	LCD_Clear();
	LCD_Comm(0x0c);
	_delay_ms(2);
	char prev=mode;
	char prev_step = step;
	char was_alarm_on =0;
    14de:	d0 e0       	ldi	r29, 0x00	; 0
    14e0:	ee 24       	eor	r14, r14
    14e2:	e3 94       	inc	r14
			was_alarm_on=1;
		}
		if (was_alarm_on==1 && alarm_clock_check_logic(min,hour,day,month,year)==0)
		{
			disable_alarm_clock();
			PORTB = 0xff;
    14e4:	dd 24       	eor	r13, r13
    14e6:	da 94       	dec	r13
    14e8:	0a c0       	rjmp	.+20     	; 0x14fe <main+0x80>
	char prev_step = step;
	char was_alarm_on =0;
    /* Replace with your application code */
    while (1) 
    {
		if(mode!=prev)
    14ea:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <mode>
    14ee:	c8 17       	cp	r28, r24
    14f0:	29 f0       	breq	.+10     	; 0x14fc <main+0x7e>
		{
			LCD_Clear();
    14f2:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
			prev=mode;
    14f6:	c0 91 e0 01 	lds	r28, 0x01E0	; 0x8001e0 <mode>
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <main+0x80>
	char prev_step = step;
	char was_alarm_on =0;
    /* Replace with your application code */
    while (1) 
    {
		if(mode!=prev)
    14fc:	c8 2f       	mov	r28, r24
		{
			LCD_Clear();
			prev=mode;
		}
		if (alarm_clock_check_logic(min,hour,day,month,year)==1)
    14fe:	00 91 ea 01 	lds	r16, 0x01EA	; 0x8001ea <year>
    1502:	10 91 eb 01 	lds	r17, 0x01EB	; 0x8001eb <year+0x1>
    1506:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <month>
    150a:	40 91 ed 01 	lds	r20, 0x01ED	; 0x8001ed <day>
    150e:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <hour>
    1512:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <min>
    1516:	0e 94 1b 02 	call	0x436	; 0x436 <alarm_clock_check_logic>
    151a:	81 30       	cpi	r24, 0x01	; 1
    151c:	19 f4       	brne	.+6      	; 0x1524 <main+0xa6>
		{
			led_blink();
    151e:	0e 94 41 02 	call	0x482	; 0x482 <led_blink>
    1522:	02 c0       	rjmp	.+4      	; 0x1528 <main+0xaa>
			was_alarm_on=1;
		}
		if (was_alarm_on==1 && alarm_clock_check_logic(min,hour,day,month,year)==0)
    1524:	d1 30       	cpi	r29, 0x01	; 1
    1526:	e1 f4       	brne	.+56     	; 0x1560 <main+0xe2>
    1528:	00 91 ea 01 	lds	r16, 0x01EA	; 0x8001ea <year>
    152c:	10 91 eb 01 	lds	r17, 0x01EB	; 0x8001eb <year+0x1>
    1530:	20 91 e2 01 	lds	r18, 0x01E2	; 0x8001e2 <month>
    1534:	40 91 ed 01 	lds	r20, 0x01ED	; 0x8001ed <day>
    1538:	60 91 e7 01 	lds	r22, 0x01E7	; 0x8001e7 <hour>
    153c:	80 91 e9 01 	lds	r24, 0x01E9	; 0x8001e9 <min>
    1540:	0e 94 1b 02 	call	0x436	; 0x436 <alarm_clock_check_logic>
    1544:	81 11       	cpse	r24, r1
    1546:	0b c0       	rjmp	.+22     	; 0x155e <main+0xe0>
		{
			disable_alarm_clock();
    1548:	0e 94 51 01 	call	0x2a2	; 0x2a2 <disable_alarm_clock>
			PORTB = 0xff;
    154c:	d8 ba       	out	0x18, r13	; 24
    154e:	8c ec       	ldi	r24, 0xCC	; 204
    1550:	9c e1       	ldi	r25, 0x1C	; 28
    1552:	01 97       	sbiw	r24, 0x01	; 1
    1554:	f1 f7       	brne	.-4      	; 0x1552 <main+0xd4>
    1556:	00 c0       	rjmp	.+0      	; 0x1558 <main+0xda>
    1558:	00 00       	nop
    155a:	de 2d       	mov	r29, r14
    155c:	01 c0       	rjmp	.+2      	; 0x1560 <main+0xe2>
    155e:	de 2d       	mov	r29, r14
			_delay_ms(2);
		}
		switch(mode)
    1560:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <mode>
    1564:	81 30       	cpi	r24, 0x01	; 1
    1566:	31 f0       	breq	.+12     	; 0x1574 <main+0xf6>
    1568:	18 f0       	brcs	.+6      	; 0x1570 <main+0xf2>
    156a:	82 30       	cpi	r24, 0x02	; 2
    156c:	29 f0       	breq	.+10     	; 0x1578 <main+0xfa>
    156e:	10 c0       	rjmp	.+32     	; 0x1590 <main+0x112>
		{
			case 0: display_normal_mode();break;
    1570:	ec db       	rcall	.-2088   	; 0xd4a <display_normal_mode>
    1572:	bb cf       	rjmp	.-138    	; 0x14ea <main+0x6c>
			case 1: display_stop_watch(); break;
    1574:	83 dd       	rcall	.-1274   	; 0x107c <display_stop_watch>
    1576:	b9 cf       	rjmp	.-142    	; 0x14ea <main+0x6c>
    1578:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <step>
			case 2:	
			if (prev_step!=step)
    157c:	8f 15       	cp	r24, r15
    157e:	31 f0       	breq	.+12     	; 0x158c <main+0x10e>
    1580:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Clear>
			{
				LCD_Clear();
    1584:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <cursor_home>
				cursor_home();
    1588:	f0 90 06 01 	lds	r15, 0x0106	; 0x800106 <step>
				prev_step=step;
			}
			display_alarm_time();
    158c:	47 de       	rcall	.-882    	; 0x121c <display_alarm_time>
			break;
    158e:	ad cf       	rjmp	.-166    	; 0x14ea <main+0x6c>
			default: display_normal_mode(); break;
    1590:	dc db       	rcall	.-2120   	; 0xd4a <display_normal_mode>
    1592:	ab cf       	rjmp	.-170    	; 0x14ea <main+0x6c>

00001594 <__divmodhi4>:
    1594:	97 fb       	bst	r25, 7
    1596:	07 2e       	mov	r0, r23
    1598:	16 f4       	brtc	.+4      	; 0x159e <__divmodhi4+0xa>
    159a:	00 94       	com	r0
    159c:	06 d0       	rcall	.+12     	; 0x15aa <__divmodhi4_neg1>
    159e:	77 fd       	sbrc	r23, 7
    15a0:	08 d0       	rcall	.+16     	; 0x15b2 <__divmodhi4_neg2>
    15a2:	23 d0       	rcall	.+70     	; 0x15ea <__udivmodhi4>
    15a4:	07 fc       	sbrc	r0, 7
    15a6:	05 d0       	rcall	.+10     	; 0x15b2 <__divmodhi4_neg2>
    15a8:	3e f4       	brtc	.+14     	; 0x15b8 <__divmodhi4_exit>

000015aa <__divmodhi4_neg1>:
    15aa:	90 95       	com	r25
    15ac:	81 95       	neg	r24
    15ae:	9f 4f       	sbci	r25, 0xFF	; 255
    15b0:	08 95       	ret

000015b2 <__divmodhi4_neg2>:
    15b2:	70 95       	com	r23
    15b4:	61 95       	neg	r22
    15b6:	7f 4f       	sbci	r23, 0xFF	; 255

000015b8 <__divmodhi4_exit>:
    15b8:	08 95       	ret

000015ba <__tablejump2__>:
    15ba:	ee 0f       	add	r30, r30
    15bc:	ff 1f       	adc	r31, r31
    15be:	00 24       	eor	r0, r0
    15c0:	00 1c       	adc	r0, r0
    15c2:	0b be       	out	0x3b, r0	; 59
    15c4:	07 90       	elpm	r0, Z+
    15c6:	f6 91       	elpm	r31, Z
    15c8:	e0 2d       	mov	r30, r0
    15ca:	09 94       	ijmp

000015cc <__umulhisi3>:
    15cc:	a2 9f       	mul	r26, r18
    15ce:	b0 01       	movw	r22, r0
    15d0:	b3 9f       	mul	r27, r19
    15d2:	c0 01       	movw	r24, r0
    15d4:	a3 9f       	mul	r26, r19
    15d6:	70 0d       	add	r23, r0
    15d8:	81 1d       	adc	r24, r1
    15da:	11 24       	eor	r1, r1
    15dc:	91 1d       	adc	r25, r1
    15de:	b2 9f       	mul	r27, r18
    15e0:	70 0d       	add	r23, r0
    15e2:	81 1d       	adc	r24, r1
    15e4:	11 24       	eor	r1, r1
    15e6:	91 1d       	adc	r25, r1
    15e8:	08 95       	ret

000015ea <__udivmodhi4>:
    15ea:	aa 1b       	sub	r26, r26
    15ec:	bb 1b       	sub	r27, r27
    15ee:	51 e1       	ldi	r21, 0x11	; 17
    15f0:	07 c0       	rjmp	.+14     	; 0x1600 <__udivmodhi4_ep>

000015f2 <__udivmodhi4_loop>:
    15f2:	aa 1f       	adc	r26, r26
    15f4:	bb 1f       	adc	r27, r27
    15f6:	a6 17       	cp	r26, r22
    15f8:	b7 07       	cpc	r27, r23
    15fa:	10 f0       	brcs	.+4      	; 0x1600 <__udivmodhi4_ep>
    15fc:	a6 1b       	sub	r26, r22
    15fe:	b7 0b       	sbc	r27, r23

00001600 <__udivmodhi4_ep>:
    1600:	88 1f       	adc	r24, r24
    1602:	99 1f       	adc	r25, r25
    1604:	5a 95       	dec	r21
    1606:	a9 f7       	brne	.-22     	; 0x15f2 <__udivmodhi4_loop>
    1608:	80 95       	com	r24
    160a:	90 95       	com	r25
    160c:	bc 01       	movw	r22, r24
    160e:	cd 01       	movw	r24, r26
    1610:	08 95       	ret

00001612 <_exit>:
    1612:	f8 94       	cli

00001614 <__stop_program>:
    1614:	ff cf       	rjmp	.-2      	; 0x1614 <__stop_program>
